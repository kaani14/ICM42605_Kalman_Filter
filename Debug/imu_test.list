
imu_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f20  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080090f8  080090f8  000190f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009140  08009140  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08009140  08009140  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009140  08009140  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009140  08009140  00019140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009148  08009148  00019148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  20000078  080091c8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  080091c8  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003806c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044a1  00000000  00000000  00058114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002570  00000000  00000000  0005c5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002438  00000000  00000000  0005eb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d71  00000000  00000000  00060f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a04f  00000000  00000000  00085cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6a6e  00000000  00000000  0009fd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018678e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b108  00000000  00000000  001867e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000078 	.word	0x20000078
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080090e0 	.word	0x080090e0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000007c 	.word	0x2000007c
 8000214:	080090e0 	.word	0x080090e0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bb2:	ed97 0a01 	vldr	s0, [r7, #4]
 8000bb6:	f007 ff47 	bl	8008a48 <asinf>
 8000bba:	eef0 7a40 	vmov.f32	s15, s0
 8000bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f000 fb63 	bl	800129c <_ZNSaISt6vectorIfSaIfEEED1Ev>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 fb46 	bl	800127c <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE12_Vector_implC1Ev>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ffeb 	bl	8000be0 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EEC1Ev>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f000 fb92 	bl	8001346 <_ZNSaIfED1Ev>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4618      	mov	r0, r3
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      _Vector_base() = default;
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 fb75 	bl	8001326 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <_ZNSt6vectorIfSaIfEEC1Ev>:
      vector() = default;
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ffeb 	bl	8000c2c <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <_ZNSt12_Vector_baseIsSaIsEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f000 fbbc 	bl	80013e6 <_ZNSaIsED1Ev>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <_ZNSt12_Vector_baseIsSaIsEEC1Ev>:
      _Vector_base() = default;
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 fb9f 	bl	80013c6 <_ZNSt12_Vector_baseIsSaIsEE12_Vector_implC1Ev>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <_ZNSt6vectorIsSaIsEEC1Ev>:
      vector() = default;
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ffeb 	bl	8000c78 <_ZNSt12_Vector_baseIsSaIsEEC1Ev>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <_ZN8ICM42605C1Ev>:
#include <icm42605.h>
#include "main.h"
#include <math.h>
extern I2C_HandleTypeDef hi2c1;

ICM42605::ICM42605()
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff9f 	bl	8000bfa <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	330c      	adds	r3, #12
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff9a 	bl	8000bfa <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	331c      	adds	r3, #28
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ffbb 	bl	8000c46 <_ZNSt6vectorIfSaIfEEC1Ev>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3328      	adds	r3, #40	; 0x28
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ffdc 	bl	8000c92 <_ZNSt6vectorIsSaIsEEC1Ev>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	3334      	adds	r3, #52	; 0x34
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff ffd7 	bl	8000c92 <_ZNSt6vectorIsSaIsEEC1Ev>
{
	gyro_cal = {0, 0};
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f103 001c 	add.w	r0, r3, #28
 8000cea:	f04f 0300 	mov.w	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	f107 0310 	add.w	r3, r7, #16
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	f107 0308 	add.w	r3, r7, #8
 8000d04:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000d08:	f000 fbad 	bl	8001466 <_ZNSt6vectorIfSaIfEEaSESt16initializer_listIfE>
}
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_ZN8ICM42605D1Ev>:

ICM42605::~ICM42605()
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3334      	adds	r3, #52	; 0x34
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 fb84 	bl	8001430 <_ZNSt6vectorIsSaIsEED1Ev>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3328      	adds	r3, #40	; 0x28
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 fb7f 	bl	8001430 <_ZNSt6vectorIsSaIsEED1Ev>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	331c      	adds	r3, #28
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 fb2a 	bl	8001390 <_ZNSt6vectorIfSaIfEED1Ev>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	330c      	adds	r3, #12
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 fad5 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 fad1 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
{

}
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <_ZN8ICM426054InitEv>:


void ICM42605::Init()
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af04      	add	r7, sp, #16
 8000d5e:	6078      	str	r0, [r7, #4]

	  uint8_t data;

		  data = 0x2F;	//Sensor wake-up. Power-management register
 8000d60:	232f      	movs	r3, #47	; 0x2f
 8000d62:	73fb      	strb	r3, [r7, #15]
		  HAL_I2C_Mem_Write (&hi2c1, ICM_ADDR, 0x4E, 1, &data, 1, 1000);
 8000d64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d68:	9302      	str	r3, [sp, #8]
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	9301      	str	r3, [sp, #4]
 8000d6e:	f107 030f 	add.w	r3, r7, #15
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2301      	movs	r3, #1
 8000d76:	224e      	movs	r2, #78	; 0x4e
 8000d78:	21d2      	movs	r1, #210	; 0xd2
 8000d7a:	4818      	ldr	r0, [pc, #96]	; (8000ddc <_ZN8ICM426054InitEv+0x84>)
 8000d7c:	f005 fdca 	bl	8006914 <HAL_I2C_Mem_Write>
		  HAL_Delay(2);
 8000d80:	2002      	movs	r0, #2
 8000d82:	f005 fa83 	bl	800628c <HAL_Delay>

		  data = 0x46;	//Configure Gyro Range, +/- 500dps
 8000d86:	2346      	movs	r3, #70	; 0x46
 8000d88:	73fb      	strb	r3, [r7, #15]
		  HAL_I2C_Mem_Write (&hi2c1, ICM_ADDR, 0x4F, 1, &data, 1, 1000);
 8000d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8e:	9302      	str	r3, [sp, #8]
 8000d90:	2301      	movs	r3, #1
 8000d92:	9301      	str	r3, [sp, #4]
 8000d94:	f107 030f 	add.w	r3, r7, #15
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	224f      	movs	r2, #79	; 0x4f
 8000d9e:	21d2      	movs	r1, #210	; 0xd2
 8000da0:	480e      	ldr	r0, [pc, #56]	; (8000ddc <_ZN8ICM426054InitEv+0x84>)
 8000da2:	f005 fdb7 	bl	8006914 <HAL_I2C_Mem_Write>
		  HAL_Delay(2);
 8000da6:	2002      	movs	r0, #2
 8000da8:	f005 fa70 	bl	800628c <HAL_Delay>

		  data = 0x26;	//Configure Acc Range, +/- 8g
 8000dac:	2326      	movs	r3, #38	; 0x26
 8000dae:	73fb      	strb	r3, [r7, #15]
		  HAL_I2C_Mem_Write (&hi2c1, ICM_ADDR, 0x50, 1, &data, 1, 1000);
 8000db0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db4:	9302      	str	r3, [sp, #8]
 8000db6:	2301      	movs	r3, #1
 8000db8:	9301      	str	r3, [sp, #4]
 8000dba:	f107 030f 	add.w	r3, r7, #15
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	2250      	movs	r2, #80	; 0x50
 8000dc4:	21d2      	movs	r1, #210	; 0xd2
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <_ZN8ICM426054InitEv+0x84>)
 8000dc8:	f005 fda4 	bl	8006914 <HAL_I2C_Mem_Write>
		  HAL_Delay(2);
 8000dcc:	2002      	movs	r0, #2
 8000dce:	f005 fa5d 	bl	800628c <HAL_Delay>
}
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000110 	.word	0x20000110

08000de0 <_ZN8ICM426057ReadAccEv>:

void  ICM42605::ReadAcc()
{
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b0a0      	sub	sp, #128	; 0x80
 8000de4:	af04      	add	r7, sp, #16
 8000de6:	6078      	str	r0, [r7, #4]
	uint8_t acc_data[6];

	HAL_I2C_Mem_Read(&hi2c1, ICM_ADDR, 0x1F, 1, acc_data, 6, 1000);
 8000de8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dec:	9302      	str	r3, [sp, #8]
 8000dee:	2306      	movs	r3, #6
 8000df0:	9301      	str	r3, [sp, #4]
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	2301      	movs	r3, #1
 8000dfa:	221f      	movs	r2, #31
 8000dfc:	21d2      	movs	r1, #210	; 0xd2
 8000dfe:	4880      	ldr	r0, [pc, #512]	; (8001000 <_ZN8ICM426057ReadAccEv+0x220>)
 8000e00:	f005 fe9c 	bl	8006b3c <HAL_I2C_Mem_Read>

	acc_raw_data_ = {
						(int16_t)(acc_data[0] << 8 | acc_data[1]),
						(int16_t)(acc_data[2] << 8 | acc_data[3]),
						(int16_t)(acc_data[4] << 8 | acc_data[5])
					};
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f103 0028 	add.w	r0, r3, #40	; 0x28
						(int16_t)(acc_data[0] << 8 | acc_data[1]),
 8000e0a:	7b3b      	ldrb	r3, [r7, #12]
 8000e0c:	021b      	lsls	r3, r3, #8
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	7b7b      	ldrb	r3, [r7, #13]
 8000e12:	b21b      	sxth	r3, r3
 8000e14:	4313      	orrs	r3, r2
 8000e16:	b21b      	sxth	r3, r3
	acc_raw_data_ = {
 8000e18:	83bb      	strh	r3, [r7, #28]
						(int16_t)(acc_data[2] << 8 | acc_data[3]),
 8000e1a:	7bbb      	ldrb	r3, [r7, #14]
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	b21a      	sxth	r2, r3
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	4313      	orrs	r3, r2
 8000e26:	b21b      	sxth	r3, r3
	acc_raw_data_ = {
 8000e28:	83fb      	strh	r3, [r7, #30]
						(int16_t)(acc_data[4] << 8 | acc_data[5])
 8000e2a:	7c3b      	ldrb	r3, [r7, #16]
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	b21a      	sxth	r2, r3
 8000e30:	7c7b      	ldrb	r3, [r7, #17]
 8000e32:	b21b      	sxth	r3, r3
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b21b      	sxth	r3, r3
	acc_raw_data_ = {
 8000e38:	843b      	strh	r3, [r7, #32]
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	2303      	movs	r3, #3
 8000e42:	61bb      	str	r3, [r7, #24]
					};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000e4c:	f000 fb26 	bl	800149c <_ZNSt6vectorIsSaIsEEaSESt16initializer_listIsE>

	float acc_total_vector = sqrt((acc_raw_data_[0] * acc_raw_data_[0]) + (acc_raw_data_[1] * acc_raw_data_[1]) + (acc_raw_data_[2] * acc_raw_data_[2]));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3328      	adds	r3, #40	; 0x28
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 fb3b 	bl	80014d2 <_ZNSt6vectorIsSaIsEEixEj>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e62:	461c      	mov	r4, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3328      	adds	r3, #40	; 0x28
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 fb31 	bl	80014d2 <_ZNSt6vectorIsSaIsEEixEj>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e76:	fb03 f404 	mul.w	r4, r3, r4
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3328      	adds	r3, #40	; 0x28
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 fb26 	bl	80014d2 <_ZNSt6vectorIsSaIsEEixEj>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e8c:	461d      	mov	r5, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3328      	adds	r3, #40	; 0x28
 8000e92:	2101      	movs	r1, #1
 8000e94:	4618      	mov	r0, r3
 8000e96:	f000 fb1c 	bl	80014d2 <_ZNSt6vectorIsSaIsEEixEj>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea0:	fb03 f305 	mul.w	r3, r3, r5
 8000ea4:	441c      	add	r4, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3328      	adds	r3, #40	; 0x28
 8000eaa:	2102      	movs	r1, #2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 fb10 	bl	80014d2 <_ZNSt6vectorIsSaIsEEixEj>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eb8:	461d      	mov	r5, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3328      	adds	r3, #40	; 0x28
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 fb06 	bl	80014d2 <_ZNSt6vectorIsSaIsEEixEj>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ecc:	fb03 f305 	mul.w	r3, r3, r5
 8000ed0:	4423      	add	r3, r4
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 fb0d 	bl	80014f2 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000ed8:	ec53 2b10 	vmov	r2, r3, d0
 8000edc:	4610      	mov	r0, r2
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f7ff fe06 	bl	8000af0 <__aeabi_d2f>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	66fb      	str	r3, [r7, #108]	; 0x6c

	acc_ = 	{
				{-asin((float)acc_raw_data_[0] / acc_total_vector), 0},
				{ 0, asin((float)acc_raw_data_[1] / acc_total_vector)}
			};
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f103 040c 	add.w	r4, r3, #12
				{-asin((float)acc_raw_data_[0] / acc_total_vector), 0},
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3328      	adds	r3, #40	; 0x28
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 faec 	bl	80014d2 <_ZNSt6vectorIsSaIsEEixEj>
 8000efa:	4603      	mov	r3, r0
 8000efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f00:	ee07 3a90 	vmov	s15, r3
 8000f04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f08:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000f0c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f10:	eeb0 0a66 	vmov.f32	s0, s13
 8000f14:	f7ff fe48 	bl	8000ba8 <_ZSt4asinf>
 8000f18:	eef0 7a40 	vmov.f32	s15, s0
 8000f1c:	eef1 7a67 	vneg.f32	s15, s15
	acc_ = 	{
 8000f20:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 8000f24:	f04f 0300 	mov.w	r3, #0
 8000f28:	653b      	str	r3, [r7, #80]	; 0x50
 8000f2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8000f30:	2302      	movs	r3, #2
 8000f32:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 faf2 	bl	8001522 <_ZNSaIfEC1Ev>
 8000f3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f42:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000f46:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000f4a:	ca06      	ldmia	r2, {r1, r2}
 8000f4c:	f000 faf5 	bl	800153a <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	663b      	str	r3, [r7, #96]	; 0x60
				{ 0, asin((float)acc_raw_data_[1] / acc_total_vector)}
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3328      	adds	r3, #40	; 0x28
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 fab8 	bl	80014d2 <_ZNSt6vectorIsSaIsEEixEj>
 8000f62:	4603      	mov	r3, r0
 8000f64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f68:	ee07 3a90 	vmov	s15, r3
 8000f6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f70:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000f74:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f78:	eeb0 0a66 	vmov.f32	s0, s13
 8000f7c:	f7ff fe14 	bl	8000ba8 <_ZSt4asinf>
 8000f80:	eef0 7a40 	vmov.f32	s15, s0
	acc_ = 	{
 8000f84:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
 8000f88:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8000f8e:	2302      	movs	r3, #2
 8000f90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000f92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 fac3 	bl	8001522 <_ZNSaIfEC1Ev>
 8000f9c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000fa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa4:	f103 000c 	add.w	r0, r3, #12
 8000fa8:	4613      	mov	r3, r2
 8000faa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000fae:	ca06      	ldmia	r2, {r1, r2}
 8000fb0:	f000 fac3 	bl	800153a <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8000fb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fba:	2302      	movs	r3, #2
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
			};
 8000fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	f000 fad8 	bl	800157c <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSESt16initializer_listIS1_E>
	acc_ = 	{
 8000fcc:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000fd0:	3418      	adds	r4, #24
 8000fd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd6:	429c      	cmp	r4, r3
 8000fd8:	d004      	beq.n	8000fe4 <_ZN8ICM426057ReadAccEv+0x204>
 8000fda:	3c0c      	subs	r4, #12
			};
 8000fdc:	4620      	mov	r0, r4
 8000fde:	f000 f9d7 	bl	8001390 <_ZNSt6vectorIfSaIfEED1Ev>
	acc_ = 	{
 8000fe2:	e7f6      	b.n	8000fd2 <_ZN8ICM426057ReadAccEv+0x1f2>
			};
 8000fe4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f9ac 	bl	8001346 <_ZNSaIfED1Ev>
 8000fee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f9a7 	bl	8001346 <_ZNSaIfED1Ev>
}
 8000ff8:	bf00      	nop
 8000ffa:	3770      	adds	r7, #112	; 0x70
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8001000:	20000110 	.word	0x20000110

08001004 <_ZN8ICM4260513GyroCalibrateEv>:

void  ICM42605::GyroCalibrate()			//average of first 2000 readings
{
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	ed2d 8b02 	vpush	{d8}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	//sum of first 2000 readings
	for (int i = 0; i < 2000; i++)
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800101a:	da2e      	bge.n	800107a <_ZN8ICM4260513GyroCalibrateEv+0x76>
	{
		ReadGyro();
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f859 	bl	80010d4 <_ZN8ICM426058ReadGyroEv>
		for (int k = 0; k <2; k++)
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	2b01      	cmp	r3, #1
 800102a:	dc1f      	bgt.n	800106c <_ZN8ICM4260513GyroCalibrateEv+0x68>
			gyro_cal[k] +=gyro_raw_data[k];
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3334      	adds	r3, #52	; 0x34
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f000 fa4c 	bl	80014d2 <_ZNSt6vectorIsSaIsEEixEj>
 800103a:	4603      	mov	r3, r0
 800103c:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	331c      	adds	r3, #28
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f000 fab2 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 800104e:	4603      	mov	r3, r0
 8001050:	ed93 7a00 	vldr	s14, [r3]
 8001054:	ee07 4a90 	vmov	s15, r4
 8001058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001060:	edc3 7a00 	vstr	s15, [r3]
		for (int k = 0; k <2; k++)
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	3301      	adds	r3, #1
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	e7dc      	b.n	8001026 <_ZN8ICM4260513GyroCalibrateEv+0x22>
		HAL_Delay(3);
 800106c:	2003      	movs	r0, #3
 800106e:	f005 f90d 	bl	800628c <HAL_Delay>
	for (int i = 0; i < 2000; i++)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	3301      	adds	r3, #1
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	e7cc      	b.n	8001014 <_ZN8ICM4260513GyroCalibrateEv+0x10>
	}

	//divide by 2000
	for(int i=0; i<2; i++)
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2b01      	cmp	r3, #1
 8001082:	dc1b      	bgt.n	80010bc <_ZN8ICM4260513GyroCalibrateEv+0xb8>
		gyro_cal[i] = gyro_cal[i] / 2000;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	331c      	adds	r3, #28
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fa90 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8001092:	4603      	mov	r3, r0
 8001094:	ed93 8a00 	vldr	s16, [r3]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	331c      	adds	r3, #28
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 fa86 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 80010a6:	4603      	mov	r3, r0
 80010a8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80010d0 <_ZN8ICM4260513GyroCalibrateEv+0xcc>
 80010ac:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80010b0:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<2; i++)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3301      	adds	r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	e7e0      	b.n	800107e <_ZN8ICM4260513GyroCalibrateEv+0x7a>

	gyro_calibration_flag_ = true;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2201      	movs	r2, #1
 80010c0:	761a      	strb	r2, [r3, #24]
}
 80010c2:	bf00      	nop
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	ecbd 8b02 	vpop	{d8}
 80010cc:	bd90      	pop	{r4, r7, pc}
 80010ce:	bf00      	nop
 80010d0:	44fa0000 	.word	0x44fa0000

080010d4 <_ZN8ICM426058ReadGyroEv>:

void  ICM42605::ReadGyro()
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	ed2d 8b02 	vpush	{d8}
 80010da:	b09f      	sub	sp, #124	; 0x7c
 80010dc:	af04      	add	r7, sp, #16
 80010de:	6078      	str	r0, [r7, #4]
	uint8_t gyro_data[6];

	HAL_I2C_Mem_Read(&hi2c1, ICM_ADDR, 0x25, 1, gyro_data, 6, 1000);
 80010e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e4:	9302      	str	r3, [sp, #8]
 80010e6:	2306      	movs	r3, #6
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	2225      	movs	r2, #37	; 0x25
 80010f4:	21d2      	movs	r1, #210	; 0xd2
 80010f6:	485e      	ldr	r0, [pc, #376]	; (8001270 <_ZN8ICM426058ReadGyroEv+0x19c>)
 80010f8:	f005 fd20 	bl	8006b3c <HAL_I2C_Mem_Read>

	gyro_raw_data =	{
						((int16_t)(gyro_data[0] << 8 | gyro_data [1])),
						((int16_t)(gyro_data[2] << 8 | gyro_data [3]))
					};
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f103 0034 	add.w	r0, r3, #52	; 0x34
						((int16_t)(gyro_data[0] << 8 | gyro_data [1])),
 8001102:	7b3b      	ldrb	r3, [r7, #12]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b21a      	sxth	r2, r3
 8001108:	7b7b      	ldrb	r3, [r7, #13]
 800110a:	b21b      	sxth	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b21b      	sxth	r3, r3
	gyro_raw_data =	{
 8001110:	83bb      	strh	r3, [r7, #28]
						((int16_t)(gyro_data[2] << 8 | gyro_data [3]))
 8001112:	7bbb      	ldrb	r3, [r7, #14]
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	b21a      	sxth	r2, r3
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	b21b      	sxth	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	b21b      	sxth	r3, r3
	gyro_raw_data =	{
 8001120:	83fb      	strh	r3, [r7, #30]
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	2302      	movs	r3, #2
 800112a:	61bb      	str	r3, [r7, #24]
					};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001134:	f000 f9b2 	bl	800149c <_ZNSt6vectorIsSaIsEEaSESt16initializer_listIsE>

	gyro_ = {
				{(gyro_raw_data[1] - gyro_cal[1]) / 65.5f / 57.296f, 0},
				{0, (gyro_raw_data[0] - gyro_cal[0]) / 65.5f / 57.296f}
			};			//65.5, gyro configuration, from datasheet
 8001138:	687c      	ldr	r4, [r7, #4]
				{(gyro_raw_data[1] - gyro_cal[1]) / 65.5f / 57.296f, 0},
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3334      	adds	r3, #52	; 0x34
 800113e:	2101      	movs	r1, #1
 8001140:	4618      	mov	r0, r3
 8001142:	f000 f9c6 	bl	80014d2 <_ZNSt6vectorIsSaIsEEixEj>
 8001146:	4603      	mov	r3, r0
 8001148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114c:	ee07 3a90 	vmov	s15, r3
 8001150:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	331c      	adds	r3, #28
 8001158:	2101      	movs	r1, #1
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fa29 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8001160:	4603      	mov	r3, r0
 8001162:	edd3 7a00 	vldr	s15, [r3]
 8001166:	ee78 7a67 	vsub.f32	s15, s16, s15
 800116a:	eddf 6a42 	vldr	s13, [pc, #264]	; 8001274 <_ZN8ICM426058ReadGyroEv+0x1a0>
 800116e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001172:	eddf 6a41 	vldr	s13, [pc, #260]	; 8001278 <_ZN8ICM426058ReadGyroEv+0x1a4>
 8001176:	eec7 7a26 	vdiv.f32	s15, s14, s13
	gyro_ = {
 800117a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
 800117e:	f04f 0300 	mov.w	r3, #0
 8001182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001184:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001188:	643b      	str	r3, [r7, #64]	; 0x40
 800118a:	2302      	movs	r3, #2
 800118c:	647b      	str	r3, [r7, #68]	; 0x44
 800118e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f9c5 	bl	8001522 <_ZNSaIfEC1Ev>
 8001198:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800119c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80011a0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80011a4:	ca06      	ldmia	r2, {r1, r2}
 80011a6:	f000 f9c8 	bl	800153a <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 80011aa:	f04f 0300 	mov.w	r3, #0
 80011ae:	65fb      	str	r3, [r7, #92]	; 0x5c
				{0, (gyro_raw_data[0] - gyro_cal[0]) / 65.5f / 57.296f}
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3334      	adds	r3, #52	; 0x34
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f98b 	bl	80014d2 <_ZNSt6vectorIsSaIsEEixEj>
 80011bc:	4603      	mov	r3, r0
 80011be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	331c      	adds	r3, #28
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f9ee 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 80011d6:	4603      	mov	r3, r0
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	ee78 7a67 	vsub.f32	s15, s16, s15
 80011e0:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001274 <_ZN8ICM426058ReadGyroEv+0x1a0>
 80011e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011e8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001278 <_ZN8ICM426058ReadGyroEv+0x1a4>
 80011ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
	gyro_ = {
 80011f0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 80011f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011f8:	657b      	str	r3, [r7, #84]	; 0x54
 80011fa:	2302      	movs	r3, #2
 80011fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80011fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f98d 	bl	8001522 <_ZNSaIfEC1Ev>
 8001208:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800120c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001210:	f103 000c 	add.w	r0, r3, #12
 8001214:	4613      	mov	r3, r2
 8001216:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800121a:	ca06      	ldmia	r2, {r1, r2}
 800121c:	f000 f98d 	bl	800153a <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8001220:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001224:	623b      	str	r3, [r7, #32]
 8001226:	2302      	movs	r3, #2
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
			};			//65.5, gyro configuration, from datasheet
 800122a:	f107 0320 	add.w	r3, r7, #32
 800122e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001232:	4620      	mov	r0, r4
 8001234:	f000 f9a2 	bl	800157c <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSESt16initializer_listIS1_E>
	gyro_ = {
 8001238:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800123c:	3418      	adds	r4, #24
 800123e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001242:	429c      	cmp	r4, r3
 8001244:	d004      	beq.n	8001250 <_ZN8ICM426058ReadGyroEv+0x17c>
 8001246:	3c0c      	subs	r4, #12
			};			//65.5, gyro configuration, from datasheet
 8001248:	4620      	mov	r0, r4
 800124a:	f000 f8a1 	bl	8001390 <_ZNSt6vectorIfSaIfEED1Ev>
	gyro_ = {
 800124e:	e7f6      	b.n	800123e <_ZN8ICM426058ReadGyroEv+0x16a>
			};			//65.5, gyro configuration, from datasheet
 8001250:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001254:	4618      	mov	r0, r3
 8001256:	f000 f876 	bl	8001346 <_ZNSaIfED1Ev>
 800125a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f871 	bl	8001346 <_ZNSaIfED1Ev>
						//57.296, conversion to radians
}
 8001264:	bf00      	nop
 8001266:	376c      	adds	r7, #108	; 0x6c
 8001268:	46bd      	mov	sp, r7
 800126a:	ecbd 8b02 	vpop	{d8}
 800126e:	bd90      	pop	{r4, r7, pc}
 8001270:	20000110 	.word	0x20000110
 8001274:	42830000 	.word	0x42830000
 8001278:	42652f1b 	.word	0x42652f1b

0800127c <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 f9a4 	bl	80015d2 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4618      	mov	r0, r3
 800128e:	f000 f9ac 	bl	80015ea <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <_ZNSaISt6vectorIfSaIfEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 f9b4 	bl	8001612 <_ZN9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEED1Ev>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	109b      	asrs	r3, r3, #2
 80012cc:	4a07      	ldr	r2, [pc, #28]	; (80012ec <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EED1Ev+0x38>)
 80012ce:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 80012d2:	461a      	mov	r2, r3
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 f9a7 	bl	8001628 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE13_M_deallocateEPS2_j>
      }
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fc73 	bl	8000bc8 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE12_Vector_implD1Ev>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	aaaaaaab 	.word	0xaaaaaaab

080012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80012f0:	b5b0      	push	{r4, r5, r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681c      	ldr	r4, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f9a3 	bl	800164e <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8001308:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800130a:	461a      	mov	r2, r3
 800130c:	4629      	mov	r1, r5
 800130e:	4620      	mov	r0, r4
 8001310:	f000 f9a8 	bl	8001664 <_ZSt8_DestroyIPSt6vectorIfSaIfEES2_EvT_S4_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ffcc 	bl	80012b4 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EED1Ev>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bdb0      	pop	{r4, r5, r7, pc}

08001326 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 f8f7 	bl	8001522 <_ZNSaIfEC1Ev>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f9a2 	bl	8001680 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <_ZNSaIfED1Ev>:
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 f9aa 	bl	80016a8 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8001376:	461a      	mov	r2, r3
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 f9a0 	bl	80016be <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fc47 	bl	8000c14 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <_ZNSt6vectorIfSaIfEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001390:	b5b0      	push	{r4, r5, r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681c      	ldr	r4, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f99e 	bl	80016e4 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80013a8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80013aa:	461a      	mov	r2, r3
 80013ac:	4629      	mov	r1, r5
 80013ae:	4620      	mov	r0, r4
 80013b0:	f000 f9a3 	bl	80016fa <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      }
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ffd1 	bl	800135e <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bdb0      	pop	{r4, r5, r7, pc}

080013c6 <_ZNSt12_Vector_baseIsSaIsEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f9a1 	bl	8001716 <_ZNSaIsEC1Ev>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 f9a9 	bl	800172e <_ZNSt12_Vector_baseIsSaIsEE17_Vector_impl_dataC1Ev>
	{ }
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <_ZNSaIsED1Ev>:
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 f9b1 	bl	8001756 <_ZN9__gnu_cxx13new_allocatorIsED1Ev>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <_ZNSt12_Vector_baseIsSaIsEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	105b      	asrs	r3, r3, #1
	_M_deallocate(_M_impl._M_start,
 8001416:	461a      	mov	r2, r3
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f9a7 	bl	800176c <_ZNSt12_Vector_baseIsSaIsEE13_M_deallocateEPsj>
      }
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fc1d 	bl	8000c60 <_ZNSt12_Vector_baseIsSaIsEE12_Vector_implD1Ev>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <_ZNSt6vectorIsSaIsEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001430:	b5b0      	push	{r4, r5, r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681c      	ldr	r4, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f9a5 	bl	8001792 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 8001448:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800144a:	461a      	mov	r2, r3
 800144c:	4629      	mov	r1, r5
 800144e:	4620      	mov	r0, r4
 8001450:	f000 f9aa 	bl	80017a8 <_ZSt8_DestroyIPssEvT_S1_RSaIT0_E>
      }
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ffd1 	bl	80013fe <_ZNSt12_Vector_baseIsSaIsEED1Ev>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bdb0      	pop	{r4, r5, r7, pc}

08001466 <_ZNSt6vectorIfSaIfEEaSESt16initializer_listIfE>:
       *  Note that the assignment completely changes the %vector and
       *  that the resulting %vector's size is the same as the number
       *  of elements assigned.
       */
      vector&
      operator=(initializer_list<value_type> __l)
 8001466:	b5b0      	push	{r4, r5, r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	e883 0006 	stmia.w	r3, {r1, r2}
      {
	this->_M_assign_aux(__l.begin(), __l.end(),
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	4618      	mov	r0, r3
 8001478:	f000 f9a4 	bl	80017c4 <_ZNKSt16initializer_listIfE5beginEv>
 800147c:	4604      	mov	r4, r0
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	4618      	mov	r0, r3
 8001482:	f000 f9ab 	bl	80017dc <_ZNKSt16initializer_listIfE3endEv>
 8001486:	4602      	mov	r2, r0
 8001488:	462b      	mov	r3, r5
 800148a:	4621      	mov	r1, r4
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f000 f9b7 	bl	8001800 <_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag>
			    random_access_iterator_tag());
	return *this;
 8001492:	68fb      	ldr	r3, [r7, #12]
      }
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bdb0      	pop	{r4, r5, r7, pc}

0800149c <_ZNSt6vectorIsSaIsEEaSESt16initializer_listIsE>:
      operator=(initializer_list<value_type> __l)
 800149c:	b5b0      	push	{r4, r5, r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	e883 0006 	stmia.w	r3, {r1, r2}
	this->_M_assign_aux(__l.begin(), __l.end(),
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 fa40 	bl	8001932 <_ZNKSt16initializer_listIsE5beginEv>
 80014b2:	4604      	mov	r4, r0
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 fa47 	bl	800194a <_ZNKSt16initializer_listIsE3endEv>
 80014bc:	4602      	mov	r2, r0
 80014be:	462b      	mov	r3, r5
 80014c0:	4621      	mov	r1, r4
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f000 fa53 	bl	800196e <_ZNSt6vectorIsSaIsEE13_M_assign_auxIPKsEEvT_S5_St20forward_iterator_tag>
	return *this;
 80014c8:	68fb      	ldr	r3, [r7, #12]
      }
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bdb0      	pop	{r4, r5, r7, pc}

080014d2 <_ZNSt6vectorIsSaIsEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4413      	add	r3, r2
      }
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7fe ffde 	bl	80004bc <__aeabi_i2d>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	ec43 2b10 	vmov	d0, r2, r3
 8001508:	f007 fa6a 	bl	80089e0 <sqrt>
 800150c:	eeb0 7a40 	vmov.f32	s14, s0
 8001510:	eef0 7a60 	vmov.f32	s15, s1
 8001514:	eeb0 0a47 	vmov.f32	s0, s14
 8001518:	eef0 0a67 	vmov.f32	s1, s15
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 fab8 	bl	8001aa0 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>:
      vector(initializer_list<value_type> __l,
 800153a:	b5b0      	push	{r4, r5, r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	60f8      	str	r0, [r7, #12]
 8001542:	1d38      	adds	r0, r7, #4
 8001544:	e880 0006 	stmia.w	r0, {r1, r2}
 8001548:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6839      	ldr	r1, [r7, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fab1 	bl	8001ab6 <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f934 	bl	80017c4 <_ZNKSt16initializer_listIfE5beginEv>
 800155c:	4604      	mov	r4, r0
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	4618      	mov	r0, r3
 8001562:	f000 f93b 	bl	80017dc <_ZNKSt16initializer_listIfE3endEv>
 8001566:	4602      	mov	r2, r0
 8001568:	462b      	mov	r3, r5
 800156a:	4621      	mov	r1, r4
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f000 fab1 	bl	8001ad4 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag>
      }
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bdb0      	pop	{r4, r5, r7, pc}

0800157c <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSESt16initializer_listIS1_E>:
      operator=(initializer_list<value_type> __l)
 800157c:	b5b0      	push	{r4, r5, r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	e883 0006 	stmia.w	r3, {r1, r2}
	this->_M_assign_aux(__l.begin(), __l.end(),
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	4618      	mov	r0, r3
 800158e:	f000 fada 	bl	8001b46 <_ZNKSt16initializer_listISt6vectorIfSaIfEEE5beginEv>
 8001592:	4604      	mov	r4, r0
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	4618      	mov	r0, r3
 8001598:	f000 fae1 	bl	8001b5e <_ZNKSt16initializer_listISt6vectorIfSaIfEEE3endEv>
 800159c:	4602      	mov	r2, r0
 800159e:	462b      	mov	r3, r5
 80015a0:	4621      	mov	r1, r4
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 faf0 	bl	8001b88 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>
	return *this;
 80015a8:	68fb      	ldr	r3, [r7, #12]
      }
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bdb0      	pop	{r4, r5, r7, pc}

080015b2 <_ZNSt6vectorIfSaIfEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
      }
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <_ZNSaISt6vectorIfSaIfEEEC1Ev>:
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 fb76 	bl	8001ccc <_ZN9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEEC1Ev>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
	{ }
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <_ZN9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
	if (__p)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d005      	beq.n	8001646 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	68b9      	ldr	r1, [r7, #8]
 8001640:	4618      	mov	r0, r3
 8001642:	f000 fb4e 	bl	8001ce2 <_ZNSt16allocator_traitsISaISt6vectorIfSaIfEEEE10deallocateERS3_PS2_j>
      }
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <_ZSt8_DestroyIPSt6vectorIfSaIfEES2_EvT_S4_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 fb44 	bl	8001d00 <_ZSt8_DestroyIPSt6vectorIfSaIfEEEvT_S4_>
    }
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
	{ }
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>:
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 80016be:	b580      	push	{r7, lr}
 80016c0:	b084      	sub	sp, #16
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	60f8      	str	r0, [r7, #12]
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
	if (__p)
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 fb1f 	bl	8001d1a <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
 8001700:	60f8      	str	r0, [r7, #12]
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8001706:	68b9      	ldr	r1, [r7, #8]
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f000 fb15 	bl	8001d38 <_ZSt8_DestroyIPfEvT_S1_>
    }
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <_ZNSaIsEC1Ev>:
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 fb17 	bl	8001d52 <_ZN9__gnu_cxx13new_allocatorIsEC1Ev>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <_ZNSt12_Vector_baseIsSaIsEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
	{ }
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_ZN9__gnu_cxx13new_allocatorIsED1Ev>:
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <_ZNSt12_Vector_baseIsSaIsEE13_M_deallocateEPsj>:
      _M_deallocate(pointer __p, size_t __n)
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
	if (__p)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d005      	beq.n	800178a <_ZNSt12_Vector_baseIsSaIsEE13_M_deallocateEPsj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	68b9      	ldr	r1, [r7, #8]
 8001784:	4618      	mov	r0, r3
 8001786:	f000 faef 	bl	8001d68 <_ZNSt16allocator_traitsISaIsEE10deallocateERS0_Psj>
      }
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <_ZSt8_DestroyIPssEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f000 fae5 	bl	8001d86 <_ZSt8_DestroyIPsEvT_S1_>
    }
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <_ZNKSt16initializer_listIfE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <_ZNKSt16initializer_listIfE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ffed 	bl	80017c4 <_ZNKSt16initializer_listIfE5beginEv>
 80017ea:	4604      	mov	r4, r0
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 fad7 	bl	8001da0 <_ZNKSt16initializer_listIfE4sizeEv>
 80017f2:	4603      	mov	r3, r0
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4423      	add	r3, r4
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd90      	pop	{r4, r7, pc}

08001800 <_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag>:
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
 8001800:	b5b0      	push	{r4, r5, r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	703b      	strb	r3, [r7, #0]
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	68b8      	ldr	r0, [r7, #8]
 8001812:	f000 fad1 	bl	8001db8 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8001816:	4603      	mov	r3, r0
 8001818:	61fb      	str	r3, [r7, #28]

	if (__len > capacity())
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 fae0 	bl	8001de0 <_ZNKSt6vectorIfSaIfEE8capacityEv>
 8001820:	4602      	mov	r2, r0
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	4293      	cmp	r3, r2
 8001826:	bf8c      	ite	hi
 8001828:	2301      	movhi	r3, #1
 800182a:	2300      	movls	r3, #0
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d038      	beq.n	80018a4 <_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag+0xa4>
	  {
	    _S_check_init_len(__len, _M_get_Tp_allocator());
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff55 	bl	80016e4 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800183a:	4603      	mov	r3, r0
 800183c:	4619      	mov	r1, r3
 800183e:	69f8      	ldr	r0, [r7, #28]
 8001840:	f000 fade 	bl	8001e00 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	69f9      	ldr	r1, [r7, #28]
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f000 fb00 	bl	8001e50 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIPKfEEPfjT_S6_>
 8001850:	6178      	str	r0, [r7, #20]
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681c      	ldr	r4, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	685d      	ldr	r5, [r3, #4]
			  _M_get_Tp_allocator());
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff41 	bl	80016e4 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8001862:	4603      	mov	r3, r0
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001864:	461a      	mov	r2, r3
 8001866:	4629      	mov	r1, r5
 8001868:	4620      	mov	r0, r4
 800186a:	f7ff ff46 	bl	80016fa <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6819      	ldr	r1, [r3, #0]
			  this->_M_impl._M_end_of_storage
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	689a      	ldr	r2, [r3, #8]
			  - this->_M_impl._M_start);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	109b      	asrs	r3, r3, #2
	    _M_deallocate(this->_M_impl._M_start,
 8001880:	461a      	mov	r2, r3
 8001882:	f7ff ff1c 	bl	80016be <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	    this->_M_impl._M_start = __tmp;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	441a      	add	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	605a      	str	r2, [r3, #4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	609a      	str	r2, [r3, #8]
	      std::__uninitialized_copy_a(__mid, __last,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
	  }
      }
 80018a2:	e042      	b.n	800192a <_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag+0x12a>
	else if (size() >= __len)
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f000 faef 	bl	8001e88 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80018aa:	4602      	mov	r2, r0
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	4293      	cmp	r3, r2
 80018b0:	bf94      	ite	ls
 80018b2:	2301      	movls	r3, #1
 80018b4:	2300      	movhi	r3, #0
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00c      	beq.n	80018d6 <_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag+0xd6>
	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	68b8      	ldr	r0, [r7, #8]
 80018c6:	f000 fb10 	bl	8001eea <_ZSt4copyIPKfPfET0_T_S4_S3_>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4619      	mov	r1, r3
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 faea 	bl	8001ea8 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>
      }
 80018d4:	e029      	b.n	800192a <_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag+0x12a>
	    _ForwardIterator __mid = __first;
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	613b      	str	r3, [r7, #16]
	    std::advance(__mid, size());
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 fad4 	bl	8001e88 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80018e0:	4602      	mov	r2, r0
 80018e2:	f107 0310 	add.w	r3, r7, #16
 80018e6:	4611      	mov	r1, r2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fb16 	bl	8001f1a <_ZSt7advanceIPKfjEvRT_T0_>
	    std::copy(__first, __mid, this->_M_impl._M_start);
 80018ee:	6939      	ldr	r1, [r7, #16]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	68b8      	ldr	r0, [r7, #8]
 80018f8:	f000 faf7 	bl	8001eea <_ZSt4copyIPKfPfET0_T_S4_S3_>
	    const size_type __attribute__((__unused__)) __n = __len - size();
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f000 fac3 	bl	8001e88 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8001902:	4602      	mov	r2, r0
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
	      std::__uninitialized_copy_a(__mid, __last,
 800190a:	693c      	ldr	r4, [r7, #16]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	685d      	ldr	r5, [r3, #4]
					  _M_get_Tp_allocator());
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fee6 	bl	80016e4 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8001918:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__mid, __last,
 800191a:	462a      	mov	r2, r5
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	4620      	mov	r0, r4
 8001920:	f000 fb0e 	bl	8001f40 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>
 8001924:	4602      	mov	r2, r0
	    this->_M_impl._M_finish =
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	605a      	str	r2, [r3, #4]
      }
 800192a:	bf00      	nop
 800192c:	3720      	adds	r7, #32
 800192e:	46bd      	mov	sp, r7
 8001930:	bdb0      	pop	{r4, r5, r7, pc}

08001932 <_ZNKSt16initializer_listIsE5beginEv>:
      begin() const noexcept { return _M_array; }
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <_ZNKSt16initializer_listIsE3endEv>:
      end() const noexcept { return begin() + size(); }
 800194a:	b590      	push	{r4, r7, lr}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ffed 	bl	8001932 <_ZNKSt16initializer_listIsE5beginEv>
 8001958:	4604      	mov	r4, r0
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 fb01 	bl	8001f62 <_ZNKSt16initializer_listIsE4sizeEv>
 8001960:	4603      	mov	r3, r0
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4423      	add	r3, r4
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bd90      	pop	{r4, r7, pc}

0800196e <_ZNSt6vectorIsSaIsEE13_M_assign_auxIPKsEEvT_S5_St20forward_iterator_tag>:
      vector<_Tp, _Alloc>::
 800196e:	b5b0      	push	{r4, r5, r7, lr}
 8001970:	b088      	sub	sp, #32
 8001972:	af00      	add	r7, sp, #0
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	703b      	strb	r3, [r7, #0]
	const size_type __len = std::distance(__first, __last);
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	68b8      	ldr	r0, [r7, #8]
 8001980:	f000 fafb 	bl	8001f7a <_ZSt8distanceIPKsENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8001984:	4603      	mov	r3, r0
 8001986:	61fb      	str	r3, [r7, #28]
	if (__len > capacity())
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f000 fb0a 	bl	8001fa2 <_ZNKSt6vectorIsSaIsEE8capacityEv>
 800198e:	4602      	mov	r2, r0
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	4293      	cmp	r3, r2
 8001994:	bf8c      	ite	hi
 8001996:	2301      	movhi	r3, #1
 8001998:	2300      	movls	r3, #0
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	d038      	beq.n	8001a12 <_ZNSt6vectorIsSaIsEE13_M_assign_auxIPKsEEvT_S5_St20forward_iterator_tag+0xa4>
	    _S_check_init_len(__len, _M_get_Tp_allocator());
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fef5 	bl	8001792 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4619      	mov	r1, r3
 80019ac:	69f8      	ldr	r0, [r7, #28]
 80019ae:	f000 fb09 	bl	8001fc4 <_ZNSt6vectorIsSaIsEE17_S_check_init_lenEjRKS0_>
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	69f9      	ldr	r1, [r7, #28]
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f000 fb2b 	bl	8002014 <_ZNSt6vectorIsSaIsEE20_M_allocate_and_copyIPKsEEPsjT_S6_>
 80019be:	6178      	str	r0, [r7, #20]
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681c      	ldr	r4, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	685d      	ldr	r5, [r3, #4]
			  _M_get_Tp_allocator());
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fee1 	bl	8001792 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 80019d0:	4603      	mov	r3, r0
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80019d2:	461a      	mov	r2, r3
 80019d4:	4629      	mov	r1, r5
 80019d6:	4620      	mov	r0, r4
 80019d8:	f7ff fee6 	bl	80017a8 <_ZSt8_DestroyIPssEvT_S1_RSaIT0_E>
	    _M_deallocate(this->_M_impl._M_start,
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6819      	ldr	r1, [r3, #0]
			  this->_M_impl._M_end_of_storage
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	689a      	ldr	r2, [r3, #8]
			  - this->_M_impl._M_start);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	105b      	asrs	r3, r3, #1
	    _M_deallocate(this->_M_impl._M_start,
 80019ee:	461a      	mov	r2, r3
 80019f0:	f7ff febc 	bl	800176c <_ZNSt12_Vector_baseIsSaIsEE13_M_deallocateEPsj>
	    this->_M_impl._M_start = __tmp;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	441a      	add	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	605a      	str	r2, [r3, #4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	609a      	str	r2, [r3, #8]
      }
 8001a10:	e042      	b.n	8001a98 <_ZNSt6vectorIsSaIsEE13_M_assign_auxIPKsEEvT_S5_St20forward_iterator_tag+0x12a>
	else if (size() >= __len)
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 fb1a 	bl	800204c <_ZNKSt6vectorIsSaIsEE4sizeEv>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	bf94      	ite	ls
 8001a20:	2301      	movls	r3, #1
 8001a22:	2300      	movhi	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00c      	beq.n	8001a44 <_ZNSt6vectorIsSaIsEE13_M_assign_auxIPKsEEvT_S5_St20forward_iterator_tag+0xd6>
	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	68b8      	ldr	r0, [r7, #8]
 8001a34:	f000 fb3b 	bl	80020ae <_ZSt4copyIPKsPsET0_T_S4_S3_>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 fb15 	bl	800206c <_ZNSt6vectorIsSaIsEE15_M_erase_at_endEPs>
      }
 8001a42:	e029      	b.n	8001a98 <_ZNSt6vectorIsSaIsEE13_M_assign_auxIPKsEEvT_S5_St20forward_iterator_tag+0x12a>
	    _ForwardIterator __mid = __first;
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	613b      	str	r3, [r7, #16]
	    std::advance(__mid, size());
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f000 faff 	bl	800204c <_ZNKSt6vectorIsSaIsEE4sizeEv>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	f107 0310 	add.w	r3, r7, #16
 8001a54:	4611      	mov	r1, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 fb41 	bl	80020de <_ZSt7advanceIPKsjEvRT_T0_>
	    std::copy(__first, __mid, this->_M_impl._M_start);
 8001a5c:	6939      	ldr	r1, [r7, #16]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68b8      	ldr	r0, [r7, #8]
 8001a66:	f000 fb22 	bl	80020ae <_ZSt4copyIPKsPsET0_T_S4_S3_>
	    const size_type __attribute__((__unused__)) __n = __len - size();
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f000 faee 	bl	800204c <_ZNKSt6vectorIsSaIsEE4sizeEv>
 8001a70:	4602      	mov	r2, r0
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	1a9b      	subs	r3, r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
	      std::__uninitialized_copy_a(__mid, __last,
 8001a78:	693c      	ldr	r4, [r7, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	685d      	ldr	r5, [r3, #4]
					  _M_get_Tp_allocator());
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fe86 	bl	8001792 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 8001a86:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__mid, __last,
 8001a88:	462a      	mov	r2, r5
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f000 fb39 	bl	8002104 <_ZSt22__uninitialized_copy_aIPKsPssET0_T_S4_S3_RSaIT1_E>
 8001a92:	4602      	mov	r2, r0
	    this->_M_impl._M_finish =
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	605a      	str	r2, [r3, #4]
      }
 8001a98:	bf00      	nop
 8001a9a:	3720      	adds	r7, #32
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bdb0      	pop	{r4, r5, r7, pc}

08001aa0 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6839      	ldr	r1, [r7, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f000 fb2e 	bl	8002126 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag>:
	}

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8001ad4:	b590      	push	{r4, r7, lr}
 8001ad6:	b087      	sub	sp, #28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
 8001ae0:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	68b8      	ldr	r0, [r7, #8]
 8001ae6:	f000 f967 	bl	8001db8 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8001aea:	4603      	mov	r3, r0
 8001aec:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8001aee:	68fc      	ldr	r4, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fdf6 	bl	80016e4 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4619      	mov	r1, r3
 8001afc:	6978      	ldr	r0, [r7, #20]
 8001afe:	f000 f97f 	bl	8001e00 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4619      	mov	r1, r3
 8001b06:	4620      	mov	r0, r4
 8001b08:	f000 fb1f 	bl	800214a <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8001b0c:	4602      	mov	r2, r0
	  this->_M_impl._M_start
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	441a      	add	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fddc 	bl	80016e4 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8001b2c:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8001b2e:	4622      	mov	r2, r4
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	68b8      	ldr	r0, [r7, #8]
 8001b34:	f000 fa04 	bl	8001f40 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>
 8001b38:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	605a      	str	r2, [r3, #4]
	}
 8001b3e:	bf00      	nop
 8001b40:	371c      	adds	r7, #28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd90      	pop	{r4, r7, pc}

08001b46 <_ZNKSt16initializer_listISt6vectorIfSaIfEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <_ZNKSt16initializer_listISt6vectorIfSaIfEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8001b5e:	b590      	push	{r4, r7, lr}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ffed 	bl	8001b46 <_ZNKSt16initializer_listISt6vectorIfSaIfEEE5beginEv>
 8001b6c:	4604      	mov	r4, r0
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 faff 	bl	8002172 <_ZNKSt16initializer_listISt6vectorIfSaIfEEE4sizeEv>
 8001b74:	4602      	mov	r2, r0
 8001b76:	4613      	mov	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4423      	add	r3, r4
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd90      	pop	{r4, r7, pc}

08001b88 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>:
      vector<_Tp, _Alloc>::
 8001b88:	b5b0      	push	{r4, r5, r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	703b      	strb	r3, [r7, #0]
	const size_type __len = std::distance(__first, __last);
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	68b8      	ldr	r0, [r7, #8]
 8001b9a:	f000 faf6 	bl	800218a <_ZSt8distanceIPKSt6vectorIfSaIfEEENSt15iterator_traitsIT_E15difference_typeES6_S6_>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	61fb      	str	r3, [r7, #28]
	if (__len > capacity())
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 fb06 	bl	80021b4 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE8capacityEv>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	4293      	cmp	r3, r2
 8001bae:	bf8c      	ite	hi
 8001bb0:	2301      	movhi	r3, #1
 8001bb2:	2300      	movls	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d03e      	beq.n	8001c38 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0xb0>
	    _S_check_init_len(__len, _M_get_Tp_allocator());
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fd46 	bl	800164e <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	69f8      	ldr	r0, [r7, #28]
 8001bc8:	f000 fb0a 	bl	80021e0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_S_check_init_lenEjRKS2_>
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	69f9      	ldr	r1, [r7, #28]
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 fb2c 	bl	8002230 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE20_M_allocate_and_copyIPKS1_EEPS1_jT_S8_>
 8001bd8:	6178      	str	r0, [r7, #20]
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681c      	ldr	r4, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	685d      	ldr	r5, [r3, #4]
			  _M_get_Tp_allocator());
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fd32 	bl	800164e <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8001bea:	4603      	mov	r3, r0
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001bec:	461a      	mov	r2, r3
 8001bee:	4629      	mov	r1, r5
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f7ff fd37 	bl	8001664 <_ZSt8_DestroyIPSt6vectorIfSaIfEES2_EvT_S4_RSaIT0_E>
	    _M_deallocate(this->_M_impl._M_start,
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6819      	ldr	r1, [r3, #0]
			  this->_M_impl._M_end_of_storage
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	689a      	ldr	r2, [r3, #8]
			  - this->_M_impl._M_start);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	109b      	asrs	r3, r3, #2
 8001c08:	4a2f      	ldr	r2, [pc, #188]	; (8001cc8 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0x140>)
 8001c0a:	fb02 f303 	mul.w	r3, r2, r3
	    _M_deallocate(this->_M_impl._M_start,
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f7ff fd0a 	bl	8001628 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE13_M_deallocateEPS2_j>
	    this->_M_impl._M_start = __tmp;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6819      	ldr	r1, [r3, #0]
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	4613      	mov	r3, r2
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	4413      	add	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	18ca      	adds	r2, r1, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	605a      	str	r2, [r3, #4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	609a      	str	r2, [r3, #8]
      }
 8001c36:	e042      	b.n	8001cbe <_ZNSt6vectorIS_IfSaIfEESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0x136>
	else if (size() >= __len)
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 fb15 	bl	8002268 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE4sizeEv>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	4293      	cmp	r3, r2
 8001c44:	bf94      	ite	ls
 8001c46:	2301      	movls	r3, #1
 8001c48:	2300      	movhi	r3, #0
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00c      	beq.n	8001c6a <_ZNSt6vectorIS_IfSaIfEESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0xe2>
	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	68b8      	ldr	r0, [r7, #8]
 8001c5a:	f000 fb41 	bl	80022e0 <_ZSt4copyIPKSt6vectorIfSaIfEEPS2_ET0_T_S7_S6_>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4619      	mov	r1, r3
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 fb16 	bl	8002294 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE15_M_erase_at_endEPS1_>
      }
 8001c68:	e029      	b.n	8001cbe <_ZNSt6vectorIS_IfSaIfEESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0x136>
	    _ForwardIterator __mid = __first;
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	613b      	str	r3, [r7, #16]
	    std::advance(__mid, size());
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 fafa 	bl	8002268 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE4sizeEv>
 8001c74:	4602      	mov	r2, r0
 8001c76:	f107 0310 	add.w	r3, r7, #16
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 fb47 	bl	8002310 <_ZSt7advanceIPKSt6vectorIfSaIfEEjEvRT_T0_>
	    std::copy(__first, __mid, this->_M_impl._M_start);
 8001c82:	6939      	ldr	r1, [r7, #16]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	68b8      	ldr	r0, [r7, #8]
 8001c8c:	f000 fb28 	bl	80022e0 <_ZSt4copyIPKSt6vectorIfSaIfEEPS2_ET0_T_S7_S6_>
	    const size_type __attribute__((__unused__)) __n = __len - size();
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f000 fae9 	bl	8002268 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE4sizeEv>
 8001c96:	4602      	mov	r2, r0
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	1a9b      	subs	r3, r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
	      std::__uninitialized_copy_a(__mid, __last,
 8001c9e:	693c      	ldr	r4, [r7, #16]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	685d      	ldr	r5, [r3, #4]
					  _M_get_Tp_allocator());
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fcd1 	bl	800164e <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8001cac:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__mid, __last,
 8001cae:	462a      	mov	r2, r5
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	f000 fb3f 	bl	8002336 <_ZSt22__uninitialized_copy_aIPKSt6vectorIfSaIfEEPS2_S2_ET0_T_S7_S6_RSaIT1_E>
 8001cb8:	4602      	mov	r2, r0
	    this->_M_impl._M_finish =
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	605a      	str	r2, [r3, #4]
      }
 8001cbe:	bf00      	nop
 8001cc0:	3720      	adds	r7, #32
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	aaaaaaab 	.word	0xaaaaaaab

08001ccc <_ZN9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEEC1Ev>:
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <_ZNSt16allocator_traitsISaISt6vectorIfSaIfEEEE10deallocateERS3_PS2_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b084      	sub	sp, #16
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 fb30 	bl	8002358 <_ZN9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEE10deallocateEPS3_j>
 8001cf8:	bf00      	nop
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <_ZSt8_DestroyIPSt6vectorIfSaIfEEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8001d0a:	6839      	ldr	r1, [r7, #0]
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fb30 	bl	8002372 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIfSaIfEEEEvT_S6_>
    }
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	60f8      	str	r0, [r7, #12]
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 fb39 	bl	80023a2 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8001d42:	6839      	ldr	r1, [r7, #0]
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fb39 	bl	80023bc <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <_ZN9__gnu_cxx13new_allocatorIsEC1Ev>:
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <_ZNSt16allocator_traitsISaIsEE10deallocateERS0_Psj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	68b9      	ldr	r1, [r7, #8]
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f000 fb2a 	bl	80023d2 <_ZN9__gnu_cxx13new_allocatorIsE10deallocateEPsj>
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <_ZSt8_DestroyIPsEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8001d90:	6839      	ldr	r1, [r7, #0]
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 fb2a 	bl	80023ec <_ZNSt12_Destroy_auxILb1EE9__destroyIPsEEvT_S3_>
    }
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <_ZNKSt16initializer_listIfE4sizeEv>:
      size() const noexcept { return _M_len; }
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8001db8:	b5b0      	push	{r4, r5, r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8001dc2:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 fb1b 	bl	8002402 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8001dcc:	462a      	mov	r2, r5
 8001dce:	6839      	ldr	r1, [r7, #0]
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	f000 fb20 	bl	8002416 <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8001dd6:	4603      	mov	r3, r0
    }
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bdb0      	pop	{r4, r5, r7, pc}

08001de0 <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	109b      	asrs	r3, r3, #2
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8001e00:	b590      	push	{r4, r7, lr}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	6839      	ldr	r1, [r7, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 fb2a 	bl	800246a <_ZNSaIfEC1ERKS_>
 8001e16:	f107 030c 	add.w	r3, r7, #12
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 fb0b 	bl	8002436 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 8001e20:	4602      	mov	r2, r0
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4293      	cmp	r3, r2
 8001e26:	bf8c      	ite	hi
 8001e28:	2301      	movhi	r3, #1
 8001e2a:	2300      	movls	r3, #0
 8001e2c:	b2dc      	uxtb	r4, r3
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fa87 	bl	8001346 <_ZNSaIfED1Ev>
 8001e38:	2c00      	cmp	r4, #0
 8001e3a:	d002      	beq.n	8001e42 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8001e3c:	4803      	ldr	r0, [pc, #12]	; (8001e4c <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x4c>)
 8001e3e:	f006 fdc3 	bl	80089c8 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 8001e42:	687b      	ldr	r3, [r7, #4]
      }
 8001e44:	4618      	mov	r0, r3
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd90      	pop	{r4, r7, pc}
 8001e4c:	080090f8 	.word	0x080090f8

08001e50 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIPKfEEPfjT_S6_>:
	_M_allocate_and_copy(size_type __n,
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f971 	bl	800214a <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8001e68:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fc39 	bl	80016e4 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8001e72:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	6839      	ldr	r1, [r7, #0]
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f861 	bl	8001f40 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>
	      return __result;
 8001e7e:	697b      	ldr	r3, [r7, #20]
	}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	109b      	asrs	r3, r3, #2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8001ea8:	b590      	push	{r4, r7, lr}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	109b      	asrs	r3, r3, #2
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00e      	beq.n	8001ee2 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fc0a 	bl	80016e4 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8001ed0:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4621      	mov	r1, r4
 8001ed6:	6838      	ldr	r0, [r7, #0]
 8001ed8:	f7ff fc0f 	bl	80016fa <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd90      	pop	{r4, r7, pc}

08001eea <_ZSt4copyIPKfPfET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8001eea:	b590      	push	{r4, r7, lr}
 8001eec:	b085      	sub	sp, #20
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 fac5 	bl	8002486 <_ZSt12__miter_baseIPKfET_S2_>
 8001efc:	4604      	mov	r4, r0
 8001efe:	68b8      	ldr	r0, [r7, #8]
 8001f00:	f000 fac1 	bl	8002486 <_ZSt12__miter_baseIPKfET_S2_>
 8001f04:	4603      	mov	r3, r0
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	f000 fac6 	bl	800249c <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 8001f10:	4603      	mov	r3, r0
    }
 8001f12:	4618      	mov	r0, r3
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd90      	pop	{r4, r7, pc}

08001f1a <_ZSt7advanceIPKfjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8001f1a:	b590      	push	{r4, r7, lr}
 8001f1c:	b085      	sub	sp, #20
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 fa6a 	bl	8002402 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
 8001f2e:	4622      	mov	r2, r4
 8001f30:	68f9      	ldr	r1, [r7, #12]
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 fad5 	bl	80024e2 <_ZSt9__advanceIPKfiEvRT_T0_St26random_access_iterator_tag>
    }
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd90      	pop	{r4, r7, pc}

08001f40 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
 8001f4c:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 fad8 	bl	8002508 <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <_ZNKSt16initializer_listIsE4sizeEv>:
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <_ZSt8distanceIPKsENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
    distance(_InputIterator __first, _InputIterator __last)
 8001f7a:	b5b0      	push	{r4, r5, r7, lr}
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 8001f84:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 facf 	bl	800252c <_ZSt19__iterator_categoryIPKsENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8001f8e:	462a      	mov	r2, r5
 8001f90:	6839      	ldr	r1, [r7, #0]
 8001f92:	4620      	mov	r0, r4
 8001f94:	f000 fad4 	bl	8002540 <_ZSt10__distanceIPKsENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8001f98:	4603      	mov	r3, r0
    }
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bdb0      	pop	{r4, r5, r7, pc}

08001fa2 <_ZNKSt6vectorIsSaIsEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	105b      	asrs	r3, r3, #1
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <_ZNSt6vectorIsSaIsEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8001fce:	f107 030c 	add.w	r3, r7, #12
 8001fd2:	6839      	ldr	r1, [r7, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fadd 	bl	8002594 <_ZNSaIsEC1ERKS_>
 8001fda:	f107 030c 	add.w	r3, r7, #12
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 fabe 	bl	8002560 <_ZNSt6vectorIsSaIsEE11_S_max_sizeERKS0_>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	bf8c      	ite	hi
 8001fec:	2301      	movhi	r3, #1
 8001fee:	2300      	movls	r3, #0
 8001ff0:	b2dc      	uxtb	r4, r3
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff f9f5 	bl	80013e6 <_ZNSaIsED1Ev>
 8001ffc:	2c00      	cmp	r4, #0
 8001ffe:	d002      	beq.n	8002006 <_ZNSt6vectorIsSaIsEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8002000:	4803      	ldr	r0, [pc, #12]	; (8002010 <_ZNSt6vectorIsSaIsEE17_S_check_init_lenEjRKS0_+0x4c>)
 8002002:	f006 fce1 	bl	80089c8 <_ZSt20__throw_length_errorPKc>
	return __n;
 8002006:	687b      	ldr	r3, [r7, #4]
      }
 8002008:	4618      	mov	r0, r3
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	bd90      	pop	{r4, r7, pc}
 8002010:	080090f8 	.word	0x080090f8

08002014 <_ZNSt6vectorIsSaIsEE20_M_allocate_and_copyIPKsEEPsjT_S6_>:
	_M_allocate_and_copy(size_type __n,
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	4618      	mov	r0, r3
 8002028:	f000 fac2 	bl	80025b0 <_ZNSt12_Vector_baseIsSaIsEE11_M_allocateEj>
 800202c:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fbae 	bl	8001792 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 8002036:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	6839      	ldr	r1, [r7, #0]
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f861 	bl	8002104 <_ZSt22__uninitialized_copy_aIPKsPssET0_T_S4_S3_RSaIT1_E>
	      return __result;
 8002042:	697b      	ldr	r3, [r7, #20]
	}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <_ZNKSt6vectorIsSaIsEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	105b      	asrs	r3, r3, #1
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <_ZNSt6vectorIsSaIsEE15_M_erase_at_endEPs>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	105b      	asrs	r3, r3, #1
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00e      	beq.n	80020a6 <_ZNSt6vectorIsSaIsEE15_M_erase_at_endEPs+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fb7f 	bl	8001792 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 8002094:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8002096:	461a      	mov	r2, r3
 8002098:	4621      	mov	r1, r4
 800209a:	6838      	ldr	r0, [r7, #0]
 800209c:	f7ff fb84 	bl	80017a8 <_ZSt8_DestroyIPssEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	605a      	str	r2, [r3, #4]
      }
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd90      	pop	{r4, r7, pc}

080020ae <_ZSt4copyIPKsPsET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 80020ae:	b590      	push	{r4, r7, lr}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 fa8c 	bl	80025d8 <_ZSt12__miter_baseIPKsET_S2_>
 80020c0:	4604      	mov	r4, r0
 80020c2:	68b8      	ldr	r0, [r7, #8]
 80020c4:	f000 fa88 	bl	80025d8 <_ZSt12__miter_baseIPKsET_S2_>
 80020c8:	4603      	mov	r3, r0
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4619      	mov	r1, r3
 80020ce:	4620      	mov	r0, r4
 80020d0:	f000 fa8d 	bl	80025ee <_ZSt14__copy_move_a2ILb0EPKsPsET1_T0_S4_S3_>
 80020d4:	4603      	mov	r3, r0
    }
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd90      	pop	{r4, r7, pc}

080020de <_ZSt7advanceIPKsjEvRT_T0_>:
    advance(_InputIterator& __i, _Distance __n)
 80020de:	b590      	push	{r4, r7, lr}
 80020e0:	b085      	sub	sp, #20
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	6039      	str	r1, [r7, #0]
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 fa1d 	bl	800252c <_ZSt19__iterator_categoryIPKsENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
 80020f2:	4622      	mov	r2, r4
 80020f4:	68f9      	ldr	r1, [r7, #12]
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 fa9c 	bl	8002634 <_ZSt9__advanceIPKsiEvRT_T0_St26random_access_iterator_tag>
    }
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	bd90      	pop	{r4, r7, pc}

08002104 <_ZSt22__uninitialized_copy_aIPKsPssET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fa9f 	bl	800265a <_ZSt18uninitialized_copyIPKsPsET0_T_S4_S3_>
 800211c:	4603      	mov	r3, r0
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8002130:	6839      	ldr	r1, [r7, #0]
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f999 	bl	800246a <_ZNSaIfEC1ERKS_>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff faa0 	bl	8001680 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d006      	beq.n	8002168 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6839      	ldr	r1, [r7, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f000 fa8d 	bl	800267e <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8002164:	4603      	mov	r3, r0
 8002166:	e000      	b.n	800216a <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 8002168:	2300      	movs	r3, #0
      }
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <_ZNKSt16initializer_listISt6vectorIfSaIfEEE4sizeEv>:
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <_ZSt8distanceIPKSt6vectorIfSaIfEEENSt15iterator_traitsIT_E15difference_typeES6_S6_>:
    distance(_InputIterator __first, _InputIterator __last)
 800218a:	b5b0      	push	{r4, r5, r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 8002194:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	4618      	mov	r0, r3
 800219a:	f000 fa7f 	bl	800269c <_ZSt19__iterator_categoryIPKSt6vectorIfSaIfEEENSt15iterator_traitsIT_E17iterator_categoryERKS6_>
      return std::__distance(__first, __last,
 800219e:	462a      	mov	r2, r5
 80021a0:	6839      	ldr	r1, [r7, #0]
 80021a2:	4620      	mov	r0, r4
 80021a4:	f000 fa84 	bl	80026b0 <_ZSt10__distanceIPKSt6vectorIfSaIfEEENSt15iterator_traitsIT_E15difference_typeES6_S6_St26random_access_iterator_tag>
 80021a8:	4603      	mov	r3, r0
    }
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080021b4 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	109b      	asrs	r3, r3, #2
 80021c8:	4a04      	ldr	r2, [pc, #16]	; (80021dc <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE8capacityEv+0x28>)
 80021ca:	fb02 f303 	mul.w	r3, r2, r3
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	aaaaaaab 	.word	0xaaaaaaab

080021e0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_S_check_init_lenEjRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 80021e0:	b590      	push	{r4, r7, lr}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80021ea:	f107 030c 	add.w	r3, r7, #12
 80021ee:	6839      	ldr	r1, [r7, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 fa8f 	bl	8002714 <_ZNSaISt6vectorIfSaIfEEEC1ERKS2_>
 80021f6:	f107 030c 	add.w	r3, r7, #12
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 fa6e 	bl	80026dc <_ZNSt6vectorIS_IfSaIfEESaIS1_EE11_S_max_sizeERKS2_>
 8002200:	4602      	mov	r2, r0
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4293      	cmp	r3, r2
 8002206:	bf8c      	ite	hi
 8002208:	2301      	movhi	r3, #1
 800220a:	2300      	movls	r3, #0
 800220c:	b2dc      	uxtb	r4, r3
 800220e:	f107 030c 	add.w	r3, r7, #12
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff f842 	bl	800129c <_ZNSaISt6vectorIfSaIfEEED1Ev>
 8002218:	2c00      	cmp	r4, #0
 800221a:	d002      	beq.n	8002222 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_S_check_init_lenEjRKS2_+0x42>
	  __throw_length_error(
 800221c:	4803      	ldr	r0, [pc, #12]	; (800222c <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_S_check_init_lenEjRKS2_+0x4c>)
 800221e:	f006 fbd3 	bl	80089c8 <_ZSt20__throw_length_errorPKc>
	return __n;
 8002222:	687b      	ldr	r3, [r7, #4]
      }
 8002224:	4618      	mov	r0, r3
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	bd90      	pop	{r4, r7, pc}
 800222c:	080090f8 	.word	0x080090f8

08002230 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE20_M_allocate_and_copyIPKS1_EEPS1_jT_S8_>:
	_M_allocate_and_copy(size_type __n,
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
 800223c:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	68b9      	ldr	r1, [r7, #8]
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fa74 	bl	8002730 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE11_M_allocateEj>
 8002248:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff f9fe 	bl	800164e <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8002252:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	6839      	ldr	r1, [r7, #0]
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f86c 	bl	8002336 <_ZSt22__uninitialized_copy_aIPKSt6vectorIfSaIfEEPS2_S2_ET0_T_S7_S6_RSaIT1_E>
	      return __result;
 800225e:	697b      	ldr	r3, [r7, #20]
	}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	109b      	asrs	r3, r3, #2
 800227c:	4a04      	ldr	r2, [pc, #16]	; (8002290 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE4sizeEv+0x28>)
 800227e:	fb02 f303 	mul.w	r3, r2, r3
 8002282:	4618      	mov	r0, r3
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	aaaaaaab 	.word	0xaaaaaaab

08002294 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8002294:	b590      	push	{r4, r7, lr}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	109b      	asrs	r3, r3, #2
 80022a8:	4a0c      	ldr	r2, [pc, #48]	; (80022dc <_ZNSt6vectorIS_IfSaIfEESaIS1_EE15_M_erase_at_endEPS1_+0x48>)
 80022aa:	fb02 f303 	mul.w	r3, r2, r3
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00e      	beq.n	80022d4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE15_M_erase_at_endEPS1_+0x40>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff f9c6 	bl	800164e <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 80022c2:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80022c4:	461a      	mov	r2, r3
 80022c6:	4621      	mov	r1, r4
 80022c8:	6838      	ldr	r0, [r7, #0]
 80022ca:	f7ff f9cb 	bl	8001664 <_ZSt8_DestroyIPSt6vectorIfSaIfEES2_EvT_S4_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	605a      	str	r2, [r3, #4]
      }
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd90      	pop	{r4, r7, pc}
 80022dc:	aaaaaaab 	.word	0xaaaaaaab

080022e0 <_ZSt4copyIPKSt6vectorIfSaIfEEPS2_ET0_T_S7_S6_>:
    copy(_II __first, _II __last, _OI __result)
 80022e0:	b590      	push	{r4, r7, lr}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 fa33 	bl	8002758 <_ZSt12__miter_baseIPKSt6vectorIfSaIfEEET_S5_>
 80022f2:	4604      	mov	r4, r0
 80022f4:	68b8      	ldr	r0, [r7, #8]
 80022f6:	f000 fa2f 	bl	8002758 <_ZSt12__miter_baseIPKSt6vectorIfSaIfEEET_S5_>
 80022fa:	4603      	mov	r3, r0
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	4619      	mov	r1, r3
 8002300:	4620      	mov	r0, r4
 8002302:	f000 fa34 	bl	800276e <_ZSt14__copy_move_a2ILb0EPKSt6vectorIfSaIfEEPS2_ET1_T0_S7_S6_>
 8002306:	4603      	mov	r3, r0
    }
 8002308:	4618      	mov	r0, r3
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	bd90      	pop	{r4, r7, pc}

08002310 <_ZSt7advanceIPKSt6vectorIfSaIfEEjEvRT_T0_>:
    advance(_InputIterator& __i, _Distance __n)
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f9bc 	bl	800269c <_ZSt19__iterator_categoryIPKSt6vectorIfSaIfEEENSt15iterator_traitsIT_E17iterator_categoryERKS6_>
 8002324:	4622      	mov	r2, r4
 8002326:	68f9      	ldr	r1, [r7, #12]
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 fa43 	bl	80027b4 <_ZSt9__advanceIPKSt6vectorIfSaIfEEiEvRT_T0_St26random_access_iterator_tag>
    }
 800232e:	bf00      	nop
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	bd90      	pop	{r4, r7, pc}

08002336 <_ZSt22__uninitialized_copy_aIPKSt6vectorIfSaIfEEPS2_S2_ET0_T_S7_S6_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
 8002342:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	68b9      	ldr	r1, [r7, #8]
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 fa49 	bl	80027e0 <_ZSt18uninitialized_copyIPKSt6vectorIfSaIfEEPS2_ET0_T_S7_S6_>
 800234e:	4603      	mov	r3, r0
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <_ZN9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEE10deallocateEPS3_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8002364:	68b8      	ldr	r0, [r7, #8]
 8002366:	f006 fb19 	bl	800899c <_ZdlPv>
      }
 800236a:	bf00      	nop
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIfSaIfEEEEvT_S6_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d00a      	beq.n	800239a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIfSaIfEEEEvT_S6_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 fa3d 	bl	8002804 <_ZSt11__addressofISt6vectorIfSaIfEEEPT_RS3_>
 800238a:	4603      	mov	r3, r0
 800238c:	4618      	mov	r0, r3
 800238e:	f000 fa44 	bl	800281a <_ZSt8_DestroyISt6vectorIfSaIfEEEvPT_>
	  for (; __first != __last; ++__first)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	330c      	adds	r3, #12
 8002396:	607b      	str	r3, [r7, #4]
 8002398:	e7f0      	b.n	800237c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIfSaIfEEEEvT_S6_+0xa>
	}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
      deallocate(pointer __p, size_type)
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	60f8      	str	r0, [r7, #12]
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80023ae:	68b8      	ldr	r0, [r7, #8]
 80023b0:	f006 faf4 	bl	800899c <_ZdlPv>
      }
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <_ZN9__gnu_cxx13new_allocatorIsE10deallocateEPsj>:
      deallocate(pointer __p, size_type)
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b084      	sub	sp, #16
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80023de:	68b8      	ldr	r0, [r7, #8]
 80023e0:	f006 fadc 	bl	800899c <_ZdlPv>
      }
 80023e4:	bf00      	nop
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <_ZNSt12_Destroy_auxILb1EE9__destroyIPsEEvT_S3_>:
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8002416:	b480      	push	{r7}
 8002418:	b085      	sub	sp, #20
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	109b      	asrs	r3, r3, #2
    }
 800242a:	4618      	mov	r0, r3
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800243e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8002442:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f9f3 	bl	8002830 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 800244a:	4603      	mov	r3, r0
 800244c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800244e:	f107 0208 	add.w	r2, r7, #8
 8002452:	f107 030c 	add.w	r3, r7, #12
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f000 f9f5 	bl	8002848 <_ZSt3minIjERKT_S2_S2_>
 800245e:	4603      	mov	r3, r0
 8002460:	681b      	ldr	r3, [r3, #0]
      }
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002474:	6839      	ldr	r1, [r7, #0]
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f9fa 	bl	8002870 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <_ZSt12__miter_baseIPKfET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800249c:	b5b0      	push	{r4, r5, r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f9ed 	bl	8002888 <_ZSt12__niter_baseIPKfET_S2_>
 80024ae:	4604      	mov	r4, r0
 80024b0:	68b8      	ldr	r0, [r7, #8]
 80024b2:	f000 f9e9 	bl	8002888 <_ZSt12__niter_baseIPKfET_S2_>
 80024b6:	4605      	mov	r5, r0
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 f9ef 	bl	800289e <_ZSt12__niter_baseIPfET_S1_>
 80024c0:	4603      	mov	r3, r0
 80024c2:	461a      	mov	r2, r3
 80024c4:	4629      	mov	r1, r5
 80024c6:	4620      	mov	r0, r4
 80024c8:	f000 f9f4 	bl	80028b4 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 80024cc:	4602      	mov	r2, r0
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	4611      	mov	r1, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fa00 	bl	80028d8 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 80024d8:	4603      	mov	r3, r0
    }
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bdb0      	pop	{r4, r5, r7, pc}

080024e2 <_ZSt9__advanceIPKfiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 80024e2:	b480      	push	{r7}
 80024e4:	b085      	sub	sp, #20
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	713a      	strb	r2, [r7, #4]
	__i += __n;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	441a      	add	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	601a      	str	r2, [r3, #0]
    }
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8002514:	2301      	movs	r3, #1
 8002516:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	68b9      	ldr	r1, [r7, #8]
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 f9e7 	bl	80028f0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>
 8002522:	4603      	mov	r3, r0
    }
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <_ZSt19__iterator_categoryIPKsENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8002534:	4618      	mov	r0, r3
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <_ZSt10__distanceIPKsENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	105b      	asrs	r3, r3, #1
    }
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <_ZNSt6vectorIsSaIsEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8002568:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800256c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f9ce 	bl	8002910 <_ZNSt16allocator_traitsISaIsEE8max_sizeERKS0_>
 8002574:	4603      	mov	r3, r0
 8002576:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002578:	f107 0208 	add.w	r2, r7, #8
 800257c:	f107 030c 	add.w	r3, r7, #12
 8002580:	4611      	mov	r1, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f960 	bl	8002848 <_ZSt3minIjERKT_S2_S2_>
 8002588:	4603      	mov	r3, r0
 800258a:	681b      	ldr	r3, [r3, #0]
      }
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <_ZNSaIsEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800259e:	6839      	ldr	r1, [r7, #0]
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f9c1 	bl	8002928 <_ZN9__gnu_cxx13new_allocatorIsEC1ERKS1_>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <_ZNSt12_Vector_baseIsSaIsEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d006      	beq.n	80025ce <_ZNSt12_Vector_baseIsSaIsEE11_M_allocateEj+0x1e>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6839      	ldr	r1, [r7, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 f9bb 	bl	8002940 <_ZNSt16allocator_traitsISaIsEE8allocateERS0_j>
 80025ca:	4603      	mov	r3, r0
 80025cc:	e000      	b.n	80025d0 <_ZNSt12_Vector_baseIsSaIsEE11_M_allocateEj+0x20>
 80025ce:	2300      	movs	r3, #0
      }
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <_ZSt12__miter_baseIPKsET_S2_>:
    __miter_base(_Iterator __it)
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
    { return __it; }
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <_ZSt14__copy_move_a2ILb0EPKsPsET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80025ee:	b5b0      	push	{r4, r5, r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f9af 	bl	800295e <_ZSt12__niter_baseIPKsET_S2_>
 8002600:	4604      	mov	r4, r0
 8002602:	68b8      	ldr	r0, [r7, #8]
 8002604:	f000 f9ab 	bl	800295e <_ZSt12__niter_baseIPKsET_S2_>
 8002608:	4605      	mov	r5, r0
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4618      	mov	r0, r3
 800260e:	f000 f9b1 	bl	8002974 <_ZSt12__niter_baseIPsET_S1_>
 8002612:	4603      	mov	r3, r0
 8002614:	461a      	mov	r2, r3
 8002616:	4629      	mov	r1, r5
 8002618:	4620      	mov	r0, r4
 800261a:	f000 f9b6 	bl	800298a <_ZSt13__copy_move_aILb0EPKsPsET1_T0_S4_S3_>
 800261e:	4602      	mov	r2, r0
 8002620:	1d3b      	adds	r3, r7, #4
 8002622:	4611      	mov	r1, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f000 f9c2 	bl	80029ae <_ZSt12__niter_wrapIPsET_RKS1_S1_>
 800262a:	4603      	mov	r3, r0
    }
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bdb0      	pop	{r4, r5, r7, pc}

08002634 <_ZSt9__advanceIPKsiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	713a      	strb	r2, [r7, #4]
	__i += __n;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	441a      	add	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	601a      	str	r2, [r3, #0]
    }
 800264e:	bf00      	nop
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <_ZSt18uninitialized_copyIPKsPsET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8002666:	2301      	movs	r3, #1
 8002668:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 f9a9 	bl	80029c6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKsPsEET0_T_S6_S5_>
 8002674:	4603      	mov	r3, r0
    }
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002688:	2200      	movs	r2, #0
 800268a:	6839      	ldr	r1, [r7, #0]
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f9aa 	bl	80029e6 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8002692:	4603      	mov	r3, r0
 8002694:	4618      	mov	r0, r3
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <_ZSt19__iterator_categoryIPKSt6vectorIfSaIfEEENSt15iterator_traitsIT_E17iterator_categoryERKS6_>:
    __iterator_category(const _Iter&)
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <_ZSt10__distanceIPKSt6vectorIfSaIfEEENSt15iterator_traitsIT_E15difference_typeES6_S6_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	109b      	asrs	r3, r3, #2
 80026c4:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <_ZSt10__distanceIPKSt6vectorIfSaIfEEENSt15iterator_traitsIT_E15difference_typeES6_S6_St26random_access_iterator_tag+0x28>)
 80026c6:	fb02 f303 	mul.w	r3, r2, r3
    }
 80026ca:	4618      	mov	r0, r3
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	aaaaaaab 	.word	0xaaaaaaab

080026dc <_ZNSt6vectorIS_IfSaIfEESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80026e4:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 80026e6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f99a 	bl	8002a22 <_ZNSt16allocator_traitsISaISt6vectorIfSaIfEEEE8max_sizeERKS3_>
 80026ee:	4603      	mov	r3, r0
 80026f0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80026f2:	f107 0208 	add.w	r2, r7, #8
 80026f6:	f107 030c 	add.w	r3, r7, #12
 80026fa:	4611      	mov	r1, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 f8a3 	bl	8002848 <_ZSt3minIjERKT_S2_S2_>
 8002702:	4603      	mov	r3, r0
 8002704:	681b      	ldr	r3, [r3, #0]
      }
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	0aaaaaaa 	.word	0x0aaaaaaa

08002714 <_ZNSaISt6vectorIfSaIfEEEC1ERKS2_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800271e:	6839      	ldr	r1, [r7, #0]
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f98a 	bl	8002a3a <_ZN9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEEC1ERKS4_>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d006      	beq.n	800274e <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE11_M_allocateEj+0x1e>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6839      	ldr	r1, [r7, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f000 f984 	bl	8002a52 <_ZNSt16allocator_traitsISaISt6vectorIfSaIfEEEE8allocateERS3_j>
 800274a:	4603      	mov	r3, r0
 800274c:	e000      	b.n	8002750 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE11_M_allocateEj+0x20>
 800274e:	2300      	movs	r3, #0
      }
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <_ZSt12__miter_baseIPKSt6vectorIfSaIfEEET_S5_>:
    __miter_base(_Iterator __it)
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <_ZSt14__copy_move_a2ILb0EPKSt6vectorIfSaIfEEPS2_ET1_T0_S7_S6_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800276e:	b5b0      	push	{r4, r5, r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	60f8      	str	r0, [r7, #12]
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f978 	bl	8002a70 <_ZSt12__niter_baseIPKSt6vectorIfSaIfEEET_S5_>
 8002780:	4604      	mov	r4, r0
 8002782:	68b8      	ldr	r0, [r7, #8]
 8002784:	f000 f974 	bl	8002a70 <_ZSt12__niter_baseIPKSt6vectorIfSaIfEEET_S5_>
 8002788:	4605      	mov	r5, r0
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4618      	mov	r0, r3
 800278e:	f000 f97a 	bl	8002a86 <_ZSt12__niter_baseIPSt6vectorIfSaIfEEET_S4_>
 8002792:	4603      	mov	r3, r0
 8002794:	461a      	mov	r2, r3
 8002796:	4629      	mov	r1, r5
 8002798:	4620      	mov	r0, r4
 800279a:	f000 f97f 	bl	8002a9c <_ZSt13__copy_move_aILb0EPKSt6vectorIfSaIfEEPS2_ET1_T0_S7_S6_>
 800279e:	4602      	mov	r2, r0
 80027a0:	1d3b      	adds	r3, r7, #4
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 f98b 	bl	8002ac0 <_ZSt12__niter_wrapIPSt6vectorIfSaIfEEET_RKS4_S4_>
 80027aa:	4603      	mov	r3, r0
    }
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bdb0      	pop	{r4, r5, r7, pc}

080027b4 <_ZSt9__advanceIPKSt6vectorIfSaIfEEiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	713a      	strb	r2, [r7, #4]
	__i += __n;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6819      	ldr	r1, [r3, #0]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	4613      	mov	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4413      	add	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	18ca      	adds	r2, r1, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	601a      	str	r2, [r3, #0]
    }
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <_ZSt18uninitialized_copyIPKSt6vectorIfSaIfEEPS2_ET0_T_S7_S6_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80027ec:	2301      	movs	r3, #1
 80027ee:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	68b9      	ldr	r1, [r7, #8]
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 f96f 	bl	8002ad8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt6vectorIfSaIfEEPS4_EET0_T_S9_S8_>
 80027fa:	4603      	mov	r3, r0
    }
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <_ZSt11__addressofISt6vectorIfSaIfEEEPT_RS3_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <_ZSt8_DestroyISt6vectorIfSaIfEEEvPT_>:
    _Destroy(_Tp* __pointer)
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7fe fdb4 	bl	8001390 <_ZNSt6vectorIfSaIfEED1Ev>
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f96d 	bl	8002b18 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 800283e:	4603      	mov	r3, r0
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d201      	bcs.n	8002862 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	e000      	b.n	8002864 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002862:	687b      	ldr	r3, [r7, #4]
    }
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <_ZSt12__niter_baseIPKfET_S2_>:
    __niter_base(_Iterator __it)
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
    { return __it; }
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 80028c0:	2301      	movs	r3, #1
 80028c2:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	68b9      	ldr	r1, [r7, #8]
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 f931 	bl	8002b30 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 80028ce:	4603      	mov	r3, r0
    }
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
    { return __res; }
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f7ff faf2 	bl	8001eea <_ZSt4copyIPKfPfET0_T_S4_S3_>
 8002906:	4603      	mov	r3, r0
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <_ZNSt16allocator_traitsISaIsEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f926 	bl	8002b6a <_ZNK9__gnu_cxx13new_allocatorIsE8max_sizeEv>
 800291e:	4603      	mov	r3, r0
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <_ZN9__gnu_cxx13new_allocatorIsEC1ERKS1_>:
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4618      	mov	r0, r3
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <_ZNSt16allocator_traitsISaIsEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800294a:	2200      	movs	r2, #0
 800294c:	6839      	ldr	r1, [r7, #0]
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f917 	bl	8002b82 <_ZN9__gnu_cxx13new_allocatorIsE8allocateEjPKv>
 8002954:	4603      	mov	r3, r0
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <_ZSt12__niter_baseIPKsET_S2_>:
    __niter_base(_Iterator __it)
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4618      	mov	r0, r3
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <_ZSt12__niter_baseIPsET_S1_>:
    __niter_base(_Iterator __it)
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <_ZSt13__copy_move_aILb0EPKsPsET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800298a:	b580      	push	{r7, lr}
 800298c:	b086      	sub	sp, #24
 800298e:	af00      	add	r7, sp, #0
 8002990:	60f8      	str	r0, [r7, #12]
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8002996:	2301      	movs	r3, #1
 8002998:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68b9      	ldr	r1, [r7, #8]
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f90d 	bl	8002bbe <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIsEEPT_PKS3_S6_S4_>
 80029a4:	4603      	mov	r3, r0
    }
 80029a6:	4618      	mov	r0, r3
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <_ZSt12__niter_wrapIPsET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	6039      	str	r1, [r7, #0]
    { return __res; }
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKsPsEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b084      	sub	sp, #16
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	68b9      	ldr	r1, [r7, #8]
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f7ff fb69 	bl	80020ae <_ZSt4copyIPKsPsET0_T_S4_S3_>
 80029dc:	4603      	mov	r3, r0
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	60f8      	str	r0, [r7, #12]
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f890 	bl	8002b18 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	4293      	cmp	r3, r2
 80029fe:	bf8c      	ite	hi
 8002a00:	2301      	movhi	r3, #1
 8002a02:	2300      	movls	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002a0a:	f005 ffda 	bl	80089c2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f005 ffc4 	bl	80089a0 <_Znwj>
 8002a18:	4603      	mov	r3, r0
      }
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <_ZNSt16allocator_traitsISaISt6vectorIfSaIfEEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a) noexcept
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f8e4 	bl	8002bf8 <_ZNK9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEE8max_sizeEv>
 8002a30:	4603      	mov	r3, r0
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <_ZN9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEEC1ERKS4_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	6039      	str	r1, [r7, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <_ZNSt16allocator_traitsISaISt6vectorIfSaIfEEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
 8002a5a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	6839      	ldr	r1, [r7, #0]
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f8d7 	bl	8002c14 <_ZN9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEE8allocateEjPKv>
 8002a66:	4603      	mov	r3, r0
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <_ZSt12__niter_baseIPKSt6vectorIfSaIfEEET_S5_>:
    __niter_base(_Iterator __it)
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <_ZSt12__niter_baseIPSt6vectorIfSaIfEEET_S4_>:
    __niter_base(_Iterator __it)
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <_ZSt13__copy_move_aILb0EPKSt6vectorIfSaIfEEPS2_ET1_T0_S7_S6_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 f8d1 	bl	8002c58 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIfSaIfEEPS5_EET0_T_SA_S9_>
 8002ab6:	4603      	mov	r3, r0
    }
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <_ZSt12__niter_wrapIPSt6vectorIfSaIfEEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
    { return __res; }
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt6vectorIfSaIfEEPS4_EET0_T_S9_S8_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d00e      	beq.n	8002b0e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt6vectorIfSaIfEEPS4_EET0_T_S9_S8_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 8002af0:	6978      	ldr	r0, [r7, #20]
 8002af2:	f7ff fe87 	bl	8002804 <_ZSt11__addressofISt6vectorIfSaIfEEEPT_RS3_>
 8002af6:	4603      	mov	r3, r0
 8002af8:	68f9      	ldr	r1, [r7, #12]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 f8d2 	bl	8002ca4 <_ZSt10_ConstructISt6vectorIfSaIfEEJRKS2_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	330c      	adds	r3, #12
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	330c      	adds	r3, #12
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	e7ec      	b.n	8002ae8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt6vectorIfSaIfEEPS4_EET0_T_S9_S8_+0x10>
	      return __cur;
 8002b0e:	697b      	ldr	r3, [r7, #20]
	}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002b20:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return size_t(-1) / sizeof(_Tp);
#endif
      }
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	109b      	asrs	r3, r3, #2
 8002b44:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d006      	beq.n	8002b5a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	461a      	mov	r2, r3
 8002b52:	68f9      	ldr	r1, [r7, #12]
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f006 f995 	bl	8008e84 <memmove>
	  return __result + _Num;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	4413      	add	r3, r2
	}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <_ZNK9__gnu_cxx13new_allocatorIsE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002b72:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <_ZN9__gnu_cxx13new_allocatorIsE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b084      	sub	sp, #16
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f7ff ffeb 	bl	8002b6a <_ZNK9__gnu_cxx13new_allocatorIsE8max_sizeEv>
 8002b94:	4602      	mov	r2, r0
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	bf8c      	ite	hi
 8002b9c:	2301      	movhi	r3, #1
 8002b9e:	2300      	movls	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <_ZN9__gnu_cxx13new_allocatorIsE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002ba6:	f005 ff0c 	bl	80089c2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f005 fef6 	bl	80089a0 <_Znwj>
 8002bb4:	4603      	mov	r3, r0
      }
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIsEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b086      	sub	sp, #24
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	105b      	asrs	r3, r3, #1
 8002bd2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d006      	beq.n	8002be8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIsEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	461a      	mov	r2, r3
 8002be0:	68f9      	ldr	r1, [r7, #12]
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f006 f94e 	bl	8008e84 <memmove>
	  return __result + _Num;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	4413      	add	r3, r2
	}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <_ZNK9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002c00:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <_ZNK9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEE8max_sizeEv+0x18>)
      }
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	0aaaaaaa 	.word	0x0aaaaaaa

08002c14 <_ZN9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f7ff ffe9 	bl	8002bf8 <_ZNK9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEE8max_sizeEv>
 8002c26:	4602      	mov	r2, r0
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	bf8c      	ite	hi
 8002c2e:	2301      	movhi	r3, #1
 8002c30:	2300      	movls	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <_ZN9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002c38:	f005 fec3 	bl	80089c2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	4413      	add	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f005 feaa 	bl	80089a0 <_Znwj>
 8002c4c:	4603      	mov	r3, r0
      }
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIfSaIfEEPS5_EET0_T_SA_S9_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	109b      	asrs	r3, r3, #2
 8002c6c:	4a0c      	ldr	r2, [pc, #48]	; (8002ca0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIfSaIfEEPS5_EET0_T_SA_S9_+0x48>)
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	dd0d      	ble.n	8002c96 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIfSaIfEEPS5_EET0_T_SA_S9_+0x3e>
	      *__result = *__first;
 8002c7a:	68f9      	ldr	r1, [r7, #12]
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f838 	bl	8002cf2 <_ZNSt6vectorIfSaIfEEaSERKS1_>
	      ++__first;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	330c      	adds	r3, #12
 8002c86:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	330c      	adds	r3, #12
 8002c8c:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	3b01      	subs	r3, #1
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	e7ee      	b.n	8002c74 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIfSaIfEEPS5_EET0_T_SA_S9_+0x1c>
	  return __result;
 8002c96:	687b      	ldr	r3, [r7, #4]
	}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	aaaaaaab 	.word	0xaaaaaaab

08002ca4 <_ZSt10_ConstructISt6vectorIfSaIfEEJRKS2_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8002ca4:	b590      	push	{r4, r7, lr}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8002cae:	6838      	ldr	r0, [r7, #0]
 8002cb0:	f000 f914 	bl	8002edc <_ZSt7forwardIRKSt6vectorIfSaIfEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8002cb4:	4604      	mov	r4, r0
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4619      	mov	r1, r3
 8002cba:	200c      	movs	r0, #12
 8002cbc:	f7fd ff68 	bl	8000b90 <_ZnwjPv>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	4621      	mov	r1, r4
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 f914 	bl	8002ef2 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd90      	pop	{r4, r7, pc}

08002cd2 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE27_S_propagate_on_copy_assignEv>:
    { return _Base_type::select_on_container_copy_construction(__a); }

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 8002cd2:	b480      	push	{r7}
 8002cd4:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	4618      	mov	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	4618      	mov	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <_ZNSt6vectorIfSaIfEEaSERKS1_>:
    vector<_Tp, _Alloc>::
 8002cf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cf4:	b085      	sub	sp, #20
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	f000 80e6 	beq.w	8002ed2 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1e0>
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 8002d06:	f7ff ffe4 	bl	8002cd2 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE27_S_propagate_on_copy_assignEv>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d043      	beq.n	8002d98 <_ZNSt6vectorIfSaIfEEaSERKS1_+0xa6>
	      if (!_Alloc_traits::_S_always_equal()
 8002d10:	f7ff ffe7 	bl	8002ce2 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE15_S_always_equalEv>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f083 0301 	eor.w	r3, r3, #1
 8002d1a:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d012      	beq.n	8002d46 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x54>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe fcde 	bl	80016e4 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002d28:	4604      	mov	r4, r0
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 f91d 	bl	8002f6c <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002d32:	4603      	mov	r3, r0
 8002d34:	4619      	mov	r1, r3
 8002d36:	4620      	mov	r0, r4
 8002d38:	f000 f923 	bl	8002f82 <_ZStneRKSaIfES1_>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x54>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x56>
 8002d46:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d017      	beq.n	8002d7c <_ZNSt6vectorIfSaIfEEaSERKS1_+0x8a>
		  this->clear();
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f924 	bl	8002f9a <_ZNSt6vectorIfSaIfEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 8002d64:	461a      	mov	r2, r3
 8002d66:	f7fe fcaa 	bl	80016be <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		  this->_M_impl._M_start = nullptr;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	609a      	str	r2, [r3, #8]
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fe fcb0 	bl	80016e4 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002d84:	4604      	mov	r4, r0
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 f8ef 	bl	8002f6c <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	4619      	mov	r1, r3
 8002d92:	4620      	mov	r0, r4
 8002d94:	f000 f90f 	bl	8002fb6 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>
	  const size_type __xlen = __x.size();
 8002d98:	6838      	ldr	r0, [r7, #0]
 8002d9a:	f7ff f875 	bl	8001e88 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8002d9e:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff f81d 	bl	8001de0 <_ZNKSt6vectorIfSaIfEE8capacityEv>
 8002da6:	4602      	mov	r2, r0
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4293      	cmp	r3, r2
 8002dac:	bf8c      	ite	hi
 8002dae:	2301      	movhi	r3, #1
 8002db0:	2300      	movls	r3, #0
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d032      	beq.n	8002e1e <_ZNSt6vectorIfSaIfEEaSERKS1_+0x12c>
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 8002db8:	6838      	ldr	r0, [r7, #0]
 8002dba:	f000 f90a 	bl	8002fd2 <_ZNKSt6vectorIfSaIfEE5beginEv>
 8002dbe:	4604      	mov	r4, r0
 8002dc0:	6838      	ldr	r0, [r7, #0]
 8002dc2:	f000 f91a 	bl	8002ffa <_ZNKSt6vectorIfSaIfEE3endEv>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	4622      	mov	r2, r4
 8002dca:	68f9      	ldr	r1, [r7, #12]
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f928 	bl	8003022 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>
 8002dd2:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681c      	ldr	r4, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe fc80 	bl	80016e4 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002de4:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002de6:	461a      	mov	r2, r3
 8002de8:	4629      	mov	r1, r5
 8002dea:	4620      	mov	r0, r4
 8002dec:	f7fe fc85 	bl	80016fa <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 8002e02:	461a      	mov	r2, r3
 8002e04:	f7fe fc5b 	bl	80016be <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __tmp;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	441a      	add	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	e052      	b.n	8002ec4 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d2>
	  else if (size() >= __xlen)
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff f832 	bl	8001e88 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	bf94      	ite	ls
 8002e2c:	2301      	movls	r3, #1
 8002e2e:	2300      	movhi	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d020      	beq.n	8002e78 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x186>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8002e36:	6838      	ldr	r0, [r7, #0]
 8002e38:	f000 f8cb 	bl	8002fd2 <_ZNKSt6vectorIfSaIfEE5beginEv>
 8002e3c:	4604      	mov	r4, r0
 8002e3e:	6838      	ldr	r0, [r7, #0]
 8002e40:	f000 f8db 	bl	8002ffa <_ZNKSt6vectorIfSaIfEE3endEv>
 8002e44:	4605      	mov	r5, r0
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f907 	bl	800305a <_ZNSt6vectorIfSaIfEE5beginEv>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	461a      	mov	r2, r3
 8002e50:	4629      	mov	r1, r5
 8002e52:	4620      	mov	r0, r4
 8002e54:	f000 f911 	bl	800307a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>
 8002e58:	4604      	mov	r4, r0
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f925 	bl	80030aa <_ZNSt6vectorIfSaIfEE3endEv>
 8002e60:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fe fc3d 	bl	80016e4 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002e6a:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4629      	mov	r1, r5
 8002e70:	4620      	mov	r0, r4
 8002e72:	f000 f92b 	bl	80030cc <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>
 8002e76:	e025      	b.n	8002ec4 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d2>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681d      	ldr	r5, [r3, #0]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681c      	ldr	r4, [r3, #0]
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff f801 	bl	8001e88 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8002e86:	4603      	mov	r3, r0
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	18e1      	adds	r1, r4, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	4628      	mov	r0, r5
 8002e94:	f000 f928 	bl	80030e8 <_ZSt4copyIPfS0_ET0_T_S2_S1_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681c      	ldr	r4, [r3, #0]
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7fe fff3 	bl	8001e88 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe fc16 	bl	80016e4 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002eb8:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8002eba:	4632      	mov	r2, r6
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	f000 f92a 	bl	8003118 <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	441a      	add	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	605a      	str	r2, [r3, #4]
      return *this;
 8002ed2:	687b      	ldr	r3, [r7, #4]
    }
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002edc <_ZSt7forwardIRKSt6vectorIfSaIfEEEOT_RNSt16remove_referenceIS5_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 8002ef2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ef4:	b085      	sub	sp, #20
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8002efc:	687c      	ldr	r4, [r7, #4]
 8002efe:	6838      	ldr	r0, [r7, #0]
 8002f00:	f7fe ffc2 	bl	8001e88 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8002f04:	4605      	mov	r5, r0
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 f82f 	bl	8002f6c <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	f107 030c 	add.w	r3, r7, #12
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 f90f 	bl	800313a <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>
 8002f1c:	f107 030c 	add.w	r3, r7, #12
 8002f20:	461a      	mov	r2, r3
 8002f22:	4629      	mov	r1, r5
 8002f24:	4620      	mov	r0, r4
 8002f26:	f000 f916 	bl	8003156 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 8002f2a:	f107 030c 	add.w	r3, r7, #12
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe fa09 	bl	8001346 <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8002f34:	6838      	ldr	r0, [r7, #0]
 8002f36:	f000 f84c 	bl	8002fd2 <_ZNKSt6vectorIfSaIfEE5beginEv>
 8002f3a:	4605      	mov	r5, r0
 8002f3c:	6838      	ldr	r0, [r7, #0]
 8002f3e:	f000 f85c 	bl	8002ffa <_ZNKSt6vectorIfSaIfEE3endEv>
 8002f42:	4606      	mov	r6, r0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe fbca 	bl	80016e4 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002f50:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8002f52:	4622      	mov	r2, r4
 8002f54:	4631      	mov	r1, r6
 8002f56:	4628      	mov	r0, r5
 8002f58:	f000 f911 	bl	800317e <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 8002f5c:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	605a      	str	r2, [r3, #4]
      }
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4618      	mov	r0, r3
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f6c <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4618      	mov	r0, r3
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <_ZStneRKSaIfES1_>:
      friend bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
      { return true; }

      friend bool
      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
      { return false; }
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	4618      	mov	r0, r3
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <_ZNSt6vectorIfSaIfEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7fe ff7d 	bl	8001ea8 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>:
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b084      	sub	sp, #16
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
 8002fbe:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	6839      	ldr	r1, [r7, #0]
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f8eb 	bl	80031a0 <_ZSt18__do_alloc_on_copyISaIfEEvRT_RKS1_St17integral_constantIbLb0EE>
    }
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	f107 020c 	add.w	r2, r7, #12
 8002fe4:	f107 0308 	add.w	r3, r7, #8
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 f8e4 	bl	80031b8 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	f107 020c 	add.w	r2, r7, #12
 800300c:	f107 0308 	add.w	r3, r7, #8
 8003010:	4611      	mov	r1, r2
 8003012:	4618      	mov	r0, r3
 8003014:	f000 f8d0 	bl	80031b8 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 8003022:	b580      	push	{r7, lr}
 8003024:	b086      	sub	sp, #24
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	68b9      	ldr	r1, [r7, #8]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff f888 	bl	800214a <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 800303a:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe fb50 	bl	80016e4 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003044:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	6839      	ldr	r1, [r7, #0]
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f897 	bl	800317e <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
	      return __result;
 8003050:	697b      	ldr	r3, [r7, #20]
	}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	f107 030c 	add.w	r3, r7, #12
 8003068:	4611      	mov	r1, r2
 800306a:	4618      	mov	r0, r3
 800306c:	f000 f8b4 	bl	80031d8 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 800307a:	b590      	push	{r4, r7, lr}
 800307c:	b085      	sub	sp, #20
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 f8b6 	bl	80031f8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800308c:	4604      	mov	r4, r0
 800308e:	68b8      	ldr	r0, [r7, #8]
 8003090:	f000 f8b2 	bl	80031f8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8003094:	4603      	mov	r3, r0
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	4619      	mov	r1, r3
 800309a:	4620      	mov	r0, r4
 800309c:	f000 f8b7 	bl	800320e <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>
 80030a0:	4603      	mov	r3, r0
    }
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd90      	pop	{r4, r7, pc}

080030aa <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	1d1a      	adds	r2, r3, #4
 80030b6:	f107 030c 	add.w	r3, r7, #12
 80030ba:	4611      	mov	r1, r2
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 f88b 	bl	80031d8 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f8b8 	bl	8003250 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>
    }
 80030e0:	bf00      	nop
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <_ZSt4copyIPfS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 80030e8:	b590      	push	{r4, r7, lr}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f8b8 	bl	800326a <_ZSt12__miter_baseIPfET_S1_>
 80030fa:	4604      	mov	r4, r0
 80030fc:	68b8      	ldr	r0, [r7, #8]
 80030fe:	f000 f8b4 	bl	800326a <_ZSt12__miter_baseIPfET_S1_>
 8003102:	4603      	mov	r3, r0
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	4619      	mov	r1, r3
 8003108:	4620      	mov	r0, r4
 800310a:	f000 f8b9 	bl	8003280 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>
 800310e:	4603      	mov	r3, r0
    }
 8003110:	4618      	mov	r0, r3
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	bd90      	pop	{r4, r7, pc}

08003118 <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f8cb 	bl	80032c6 <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>
 8003130:	4603      	mov	r3, r0
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>:
    static _Alloc _S_select_on_copy(const _Alloc& __a)
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6839      	ldr	r1, [r7, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f000 f8ce 	bl	80032ea <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4618      	mov	r0, r3
 8003168:	f7fe ffdd 	bl	8002126 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 800316c:	68b9      	ldr	r1, [r7, #8]
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f8c8 	bl	8003304 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800317e:	b580      	push	{r7, lr}
 8003180:	b084      	sub	sp, #16
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	68b9      	ldr	r1, [r7, #8]
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f8d2 	bl	800333a <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8003196:	4603      	mov	r3, r0
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <_ZSt18__do_alloc_on_copyISaIfEEvRT_RKS1_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	713a      	strb	r2, [r7, #4]
    { }
 80031ac:	bf00      	nop
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4618      	mov	r0, r3
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:
    __miter_base(_Iterator __it)
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800320e:	b5b0      	push	{r4, r5, r7, lr}
 8003210:	b084      	sub	sp, #16
 8003212:	af00      	add	r7, sp, #0
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f89f 	bl	800335e <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003220:	4604      	mov	r4, r0
 8003222:	68b8      	ldr	r0, [r7, #8]
 8003224:	f000 f89b 	bl	800335e <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003228:	4605      	mov	r5, r0
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f8a5 	bl	800337a <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8003230:	4603      	mov	r3, r0
 8003232:	461a      	mov	r2, r3
 8003234:	4629      	mov	r1, r5
 8003236:	4620      	mov	r0, r4
 8003238:	f7ff fb3c 	bl	80028b4 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 800323c:	4603      	mov	r3, r0
 800323e:	4619      	mov	r1, r3
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f8a8 	bl	8003396 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 8003246:	4603      	mov	r3, r0
    }
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bdb0      	pop	{r4, r5, r7, pc}

08003250 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800325a:	6839      	ldr	r1, [r7, #0]
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f8b1 	bl	80033c4 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
    }
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <_ZSt12__miter_baseIPfET_S1_>:
    __miter_base(_Iterator __it)
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4618      	mov	r0, r3
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003280:	b5b0      	push	{r4, r5, r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f7ff fb06 	bl	800289e <_ZSt12__niter_baseIPfET_S1_>
 8003292:	4604      	mov	r4, r0
 8003294:	68b8      	ldr	r0, [r7, #8]
 8003296:	f7ff fb02 	bl	800289e <_ZSt12__niter_baseIPfET_S1_>
 800329a:	4605      	mov	r5, r0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff fafd 	bl	800289e <_ZSt12__niter_baseIPfET_S1_>
 80032a4:	4603      	mov	r3, r0
 80032a6:	461a      	mov	r2, r3
 80032a8:	4629      	mov	r1, r5
 80032aa:	4620      	mov	r0, r4
 80032ac:	f000 f895 	bl	80033da <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>
 80032b0:	4602      	mov	r2, r0
 80032b2:	1d3b      	adds	r3, r7, #4
 80032b4:	4611      	mov	r1, r2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fb0e 	bl	80028d8 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 80032bc:	4603      	mov	r3, r0
    }
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bdb0      	pop	{r4, r5, r7, pc}

080032c6 <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b086      	sub	sp, #24
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80032d2:	2301      	movs	r3, #1
 80032d4:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f88f 	bl	80033fe <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>
 80032e0:	4603      	mov	r3, r0
    }
 80032e2:	4618      	mov	r0, r3
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 80032f4:	6839      	ldr	r1, [r7, #0]
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff f8b7 	bl	800246a <_ZNSaIfEC1ERKS_>
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800330e:	6839      	ldr	r1, [r7, #0]
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7fe ff1a 	bl	800214a <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8003316:	4602      	mov	r2, r0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	441a      	add	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	609a      	str	r2, [r3, #8]
      }
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800333a:	b580      	push	{r7, lr}
 800333c:	b086      	sub	sp, #24
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003346:	2301      	movs	r3, #1
 8003348:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f865 	bl	800341e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 8003354:	4603      	mov	r3, r0
    }
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 8003366:	1d3b      	adds	r3, r7, #4
 8003368:	4618      	mov	r0, r3
 800336a:	f000 f868 	bl	800343e <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 800336e:	4603      	mov	r3, r0
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8003382:	1d3b      	adds	r3, r7, #4
 8003384:	4618      	mov	r0, r3
 8003386:	f000 f865 	bl	8003454 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800338a:	4603      	mov	r3, r0
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7ff ffea 	bl	800337a <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80033a6:	4602      	mov	r2, r0
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	109b      	asrs	r3, r3, #2
 80033ae:	461a      	mov	r2, r3
 80033b0:	1d3b      	adds	r3, r7, #4
 80033b2:	4611      	mov	r1, r2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 f858 	bl	800346a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 80033ba:	4603      	mov	r3, r0
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80033da:	b580      	push	{r7, lr}
 80033dc:	b086      	sub	sp, #24
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 80033e6:	2301      	movs	r3, #1
 80033e8:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	68b9      	ldr	r1, [r7, #8]
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f7ff fb9e 	bl	8002b30 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 80033f4:	4603      	mov	r3, r0
    }
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80033fe:	b580      	push	{r7, lr}
 8003400:	b084      	sub	sp, #16
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	68b9      	ldr	r1, [r7, #8]
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f7ff fe6a 	bl	80030e8 <_ZSt4copyIPfS0_ET0_T_S2_S1_>
 8003414:	4603      	mov	r3, r0
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800341e:	b580      	push	{r7, lr}
 8003420:	b084      	sub	sp, #16
 8003422:	af00      	add	r7, sp, #0
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	68b9      	ldr	r1, [r7, #8]
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f833 	bl	800349a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8003434:	4603      	mov	r3, r0
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4618      	mov	r0, r3
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800346a:	b580      	push	{r7, lr}
 800346c:	b084      	sub	sp, #16
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	f107 020c 	add.w	r2, r7, #12
 8003484:	f107 0308 	add.w	r3, r7, #8
 8003488:	4611      	mov	r1, r2
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff fea4 	bl	80031d8 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 800349a:	b590      	push	{r4, r7, lr}
 800349c:	b085      	sub	sp, #20
 800349e:	af00      	add	r7, sp, #0
 80034a0:	60f8      	str	r0, [r7, #12]
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f7ff fea6 	bl	80031f8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 80034ac:	4604      	mov	r4, r0
 80034ae:	68b8      	ldr	r0, [r7, #8]
 80034b0:	f7ff fea2 	bl	80031f8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 80034b4:	4603      	mov	r3, r0
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	4619      	mov	r1, r3
 80034ba:	4620      	mov	r0, r4
 80034bc:	f000 f805 	bl	80034ca <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 80034c0:	4603      	mov	r3, r0
    }
 80034c2:	4618      	mov	r0, r3
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd90      	pop	{r4, r7, pc}

080034ca <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80034ca:	b5b0      	push	{r4, r5, r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f7ff ff41 	bl	800335e <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80034dc:	4604      	mov	r4, r0
 80034de:	68b8      	ldr	r0, [r7, #8]
 80034e0:	f7ff ff3d 	bl	800335e <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80034e4:	4605      	mov	r5, r0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff f9d8 	bl	800289e <_ZSt12__niter_baseIPfET_S1_>
 80034ee:	4603      	mov	r3, r0
 80034f0:	461a      	mov	r2, r3
 80034f2:	4629      	mov	r1, r5
 80034f4:	4620      	mov	r0, r4
 80034f6:	f7ff f9dd 	bl	80028b4 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 80034fa:	4602      	mov	r2, r0
 80034fc:	1d3b      	adds	r3, r7, #4
 80034fe:	4611      	mov	r1, r2
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff f9e9 	bl	80028d8 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8003506:	4603      	mov	r3, r0
    }
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bdb0      	pop	{r4, r5, r7, pc}

08003510 <_ZN6KalmanC1ESt6vectorIS0_IfSaIfEESaIS2_EES4_S4_S4_S4_S4_S4_>:

#include "kalman.h"
#include "assert.h"
#include "math.h"

Kalman::Kalman(matrix Q, matrix A, matrix B, matrix x_e, matrix p_e, matrix I, matrix H)
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	603b      	str	r3, [r7, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4618      	mov	r0, r3
 8003522:	f7fd fb6a 	bl	8000bfa <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	330c      	adds	r3, #12
 800352a:	4618      	mov	r0, r3
 800352c:	f7fd fb65 	bl	8000bfa <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	3318      	adds	r3, #24
 8003534:	4618      	mov	r0, r3
 8003536:	f7fd fb60 	bl	8000bfa <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	3324      	adds	r3, #36	; 0x24
 800353e:	4618      	mov	r0, r3
 8003540:	f7fd fb5b 	bl	8000bfa <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	3330      	adds	r3, #48	; 0x30
 8003548:	4618      	mov	r0, r3
 800354a:	f7fd fb56 	bl	8000bfa <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	333c      	adds	r3, #60	; 0x3c
 8003552:	4618      	mov	r0, r3
 8003554:	f7fd fb51 	bl	8000bfa <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	3348      	adds	r3, #72	; 0x48
 800355c:	4618      	mov	r0, r3
 800355e:	f7fd fb4c 	bl	8000bfa <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	3354      	adds	r3, #84	; 0x54
 8003566:	4618      	mov	r0, r3
 8003568:	f7fd fb47 	bl	8000bfa <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	3360      	adds	r3, #96	; 0x60
 8003570:	4618      	mov	r0, r3
 8003572:	f7fd fb42 	bl	8000bfa <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	336c      	adds	r3, #108	; 0x6c
 800357a:	4618      	mov	r0, r3
 800357c:	f7fd fb3d 	bl	8000bfa <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	3378      	adds	r3, #120	; 0x78
 8003584:	4618      	mov	r0, r3
 8003586:	f7fd fb38 	bl	8000bfa <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3384      	adds	r3, #132	; 0x84
 800358e:	4618      	mov	r0, r3
 8003590:	f7fd fb33 	bl	8000bfa <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
{

	Q_ = Q;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	333c      	adds	r3, #60	; 0x3c
 8003598:	68b9      	ldr	r1, [r7, #8]
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fbd8 	bl	8003d50 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_>
	A_ = A;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	330c      	adds	r3, #12
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fbd2 	bl	8003d50 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_>
	B_ = B;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	3318      	adds	r3, #24
 80035b0:	6839      	ldr	r1, [r7, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fbcc 	bl	8003d50 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_>
	x_e_ = x_e;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	69b9      	ldr	r1, [r7, #24]
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fbc7 	bl	8003d50 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_>
	p_e_ = p_e;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	3354      	adds	r3, #84	; 0x54
 80035c6:	69f9      	ldr	r1, [r7, #28]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 fbc1 	bl	8003d50 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_>
	I_ = I;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	3348      	adds	r3, #72	; 0x48
 80035d2:	6a39      	ldr	r1, [r7, #32]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 fbbb 	bl	8003d50 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_>
	H_ = H;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	3384      	adds	r3, #132	; 0x84
 80035de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fbb5 	bl	8003d50 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_>
};
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <_ZN6KalmanD1Ev>:

Kalman::~Kalman(){};
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3384      	adds	r3, #132	; 0x84
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fd fe77 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3378      	adds	r3, #120	; 0x78
 8003606:	4618      	mov	r0, r3
 8003608:	f7fd fe72 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	336c      	adds	r3, #108	; 0x6c
 8003610:	4618      	mov	r0, r3
 8003612:	f7fd fe6d 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3360      	adds	r3, #96	; 0x60
 800361a:	4618      	mov	r0, r3
 800361c:	f7fd fe68 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3354      	adds	r3, #84	; 0x54
 8003624:	4618      	mov	r0, r3
 8003626:	f7fd fe63 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3348      	adds	r3, #72	; 0x48
 800362e:	4618      	mov	r0, r3
 8003630:	f7fd fe5e 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	333c      	adds	r3, #60	; 0x3c
 8003638:	4618      	mov	r0, r3
 800363a:	f7fd fe59 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3330      	adds	r3, #48	; 0x30
 8003642:	4618      	mov	r0, r3
 8003644:	f7fd fe54 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3324      	adds	r3, #36	; 0x24
 800364c:	4618      	mov	r0, r3
 800364e:	f7fd fe4f 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3318      	adds	r3, #24
 8003656:	4618      	mov	r0, r3
 8003658:	f7fd fe4a 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	330c      	adds	r3, #12
 8003660:	4618      	mov	r0, r3
 8003662:	f7fd fe45 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4618      	mov	r0, r3
 800366a:	f7fd fe41 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIfSaIfEEES3_E15_S_always_equalEv>:
    static constexpr bool _S_always_equal()
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 800367c:	2301      	movs	r3, #1
 800367e:	4618      	mov	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <_ZN6Kalman10PredictionESt6vectorIS0_IfSaIfEESaIS2_EE>:

void Kalman::Prediction(matrix U)
{
 8003688:	b590      	push	{r4, r7, lr}
 800368a:	b0b1      	sub	sp, #196	; 0xc4
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
    x_p_ = A_ * x_e_ + (B_ * U);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f103 020c 	add.w	r2, r3, #12
 800369e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036a2:	4611      	mov	r1, r2
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fc5d 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036b0:	4611      	mov	r1, r2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fc56 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 80036b8:	f107 0318 	add.w	r3, r7, #24
 80036bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80036c0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80036c4:	4618      	mov	r0, r3
 80036c6:	f002 fa6b 	bl	8005ba0 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f103 0218 	add.w	r2, r3, #24
 80036d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80036d4:	4611      	mov	r1, r2
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fc44 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 80036dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80036e0:	6839      	ldr	r1, [r7, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fc3e 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 80036e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80036ec:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80036f0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80036f4:	4618      	mov	r0, r3
 80036f6:	f002 fa53 	bl	8005ba0 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_>
 80036fa:	f107 030c 	add.w	r3, r7, #12
 80036fe:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003702:	f107 0118 	add.w	r1, r7, #24
 8003706:	4618      	mov	r0, r3
 8003708:	f002 f93e 	bl	8005988 <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_>
 800370c:	f107 030c 	add.w	r3, r7, #12
 8003710:	4619      	mov	r1, r3
 8003712:	4620      	mov	r0, r4
 8003714:	f000 fc63 	bl	8003fde <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSEOS3_>
 8003718:	f107 030c 	add.w	r3, r7, #12
 800371c:	4618      	mov	r0, r3
 800371e:	f7fd fde7 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003722:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003726:	4618      	mov	r0, r3
 8003728:	f7fd fde2 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 800372c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003730:	4618      	mov	r0, r3
 8003732:	f7fd fddd 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003736:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800373a:	4618      	mov	r0, r3
 800373c:	f7fd fdd8 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003740:	f107 0318 	add.w	r3, r7, #24
 8003744:	4618      	mov	r0, r3
 8003746:	f7fd fdd3 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 800374a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800374e:	4618      	mov	r0, r3
 8003750:	f7fd fdce 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003758:	4618      	mov	r0, r3
 800375a:	f7fd fdc9 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
    p_p_ = A_ * p_e_ * transpose(A_) + Q_;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f103 020c 	add.w	r2, r3, #12
 800376a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800376e:	4611      	mov	r1, r2
 8003770:	4618      	mov	r0, r3
 8003772:	f000 fbf7 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800377c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003780:	4611      	mov	r1, r2
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fbee 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8003788:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800378c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003790:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8003794:	4618      	mov	r0, r3
 8003796:	f002 fa03 	bl	8005ba0 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f103 020c 	add.w	r2, r3, #12
 80037a0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80037a4:	4611      	mov	r1, r2
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fbdc 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 80037ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80037b0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80037b4:	4611      	mov	r1, r2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f002 fb32 	bl	8005e20 <_Z9transposeSt6vectorIS_IfSaIfEESaIS1_EE>
 80037bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80037c0:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80037c4:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80037c8:	4618      	mov	r0, r3
 80037ca:	f002 f9e9 	bl	8005ba0 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80037d4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80037d8:	4611      	mov	r1, r2
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 fbc2 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 80037e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80037e4:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80037e8:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80037ec:	4618      	mov	r0, r3
 80037ee:	f002 f8cb 	bl	8005988 <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_>
 80037f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80037f6:	4619      	mov	r1, r3
 80037f8:	4620      	mov	r0, r4
 80037fa:	f000 fbf0 	bl	8003fde <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSEOS3_>
 80037fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003802:	4618      	mov	r0, r3
 8003804:	f7fd fd74 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003808:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800380c:	4618      	mov	r0, r3
 800380e:	f7fd fd6f 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003812:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003816:	4618      	mov	r0, r3
 8003818:	f7fd fd6a 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 800381c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003820:	4618      	mov	r0, r3
 8003822:	f7fd fd65 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003826:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800382a:	4618      	mov	r0, r3
 800382c:	f7fd fd60 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003830:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003834:	4618      	mov	r0, r3
 8003836:	f7fd fd5b 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 800383a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800383e:	4618      	mov	r0, r3
 8003840:	f7fd fd56 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003844:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003848:	4618      	mov	r0, r3
 800384a:	f7fd fd51 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
}
 800384e:	bf00      	nop
 8003850:	37c4      	adds	r7, #196	; 0xc4
 8003852:	46bd      	mov	sp, r7
 8003854:	bd90      	pop	{r4, r7, pc}

08003856 <_ZN6Kalman10KalmanGainESt6vectorIS0_IfSaIfEESaIS2_EE>:

void Kalman::KalmanGain(matrix R)
{
 8003856:	b590      	push	{r4, r7, lr}
 8003858:	b0b1      	sub	sp, #196	; 0xc4
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	6039      	str	r1, [r7, #0]
  S_ = H_ * p_p_ * transpose(H_) + R;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f103 0284 	add.w	r2, r3, #132	; 0x84
 800386c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003870:	4611      	mov	r1, r2
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fb76 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800387e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003882:	4611      	mov	r1, r2
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fb6d 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 800388a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800388e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003892:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003896:	4618      	mov	r0, r3
 8003898:	f002 f982 	bl	8005ba0 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80038a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038a6:	4611      	mov	r1, r2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fb5b 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 80038ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038b2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80038b6:	4611      	mov	r1, r2
 80038b8:	4618      	mov	r0, r3
 80038ba:	f002 fab1 	bl	8005e20 <_Z9transposeSt6vectorIS_IfSaIfEESaIS1_EE>
 80038be:	f107 0318 	add.w	r3, r7, #24
 80038c2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80038c6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80038ca:	4618      	mov	r0, r3
 80038cc:	f002 f968 	bl	8005ba0 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_>
 80038d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80038d4:	6839      	ldr	r1, [r7, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fb44 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 80038dc:	f107 030c 	add.w	r3, r7, #12
 80038e0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80038e4:	f107 0118 	add.w	r1, r7, #24
 80038e8:	4618      	mov	r0, r3
 80038ea:	f002 f84d 	bl	8005988 <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_>
 80038ee:	f107 030c 	add.w	r3, r7, #12
 80038f2:	4619      	mov	r1, r3
 80038f4:	4620      	mov	r0, r4
 80038f6:	f000 fb72 	bl	8003fde <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSEOS3_>
 80038fa:	f107 030c 	add.w	r3, r7, #12
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fd fcf6 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003904:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003908:	4618      	mov	r0, r3
 800390a:	f7fd fcf1 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 800390e:	f107 0318 	add.w	r3, r7, #24
 8003912:	4618      	mov	r0, r3
 8003914:	f7fd fcec 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003918:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800391c:	4618      	mov	r0, r3
 800391e:	f7fd fce7 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003922:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003926:	4618      	mov	r0, r3
 8003928:	f7fd fce2 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 800392c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003930:	4618      	mov	r0, r3
 8003932:	f7fd fcdd 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003936:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800393a:	4618      	mov	r0, r3
 800393c:	f7fd fcd8 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003940:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003944:	4618      	mov	r0, r3
 8003946:	f7fd fcd3 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
  K_G_ = p_p_ * transpose(H_) *  inverse(S_);		//S is a diagonal matrix
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8003956:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800395a:	4611      	mov	r1, r2
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fb01 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8003968:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800396c:	4611      	mov	r1, r2
 800396e:	4618      	mov	r0, r3
 8003970:	f000 faf8 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8003974:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003978:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800397c:	4611      	mov	r1, r2
 800397e:	4618      	mov	r0, r3
 8003980:	f002 fa4e 	bl	8005e20 <_Z9transposeSt6vectorIS_IfSaIfEESaIS1_EE>
 8003984:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003988:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800398c:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8003990:	4618      	mov	r0, r3
 8003992:	f002 f905 	bl	8005ba0 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800399c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80039a0:	4611      	mov	r1, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fade 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 80039a8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80039ac:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80039b0:	4611      	mov	r1, r2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f002 f998 	bl	8005ce8 <_Z7inverseSt6vectorIS_IfSaIfEESaIS1_EE>
 80039b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80039bc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80039c0:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80039c4:	4618      	mov	r0, r3
 80039c6:	f002 f8eb 	bl	8005ba0 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_>
 80039ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80039ce:	4619      	mov	r1, r3
 80039d0:	4620      	mov	r0, r4
 80039d2:	f000 fb04 	bl	8003fde <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSEOS3_>
 80039d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fd fc88 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80039e0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fd fc83 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80039ea:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fd fc7e 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80039f4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fd fc79 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80039fe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fd fc74 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003a08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fd fc6f 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003a12:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fd fc6a 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
}
 8003a1c:	bf00      	nop
 8003a1e:	37c4      	adds	r7, #196	; 0xc4
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd90      	pop	{r4, r7, pc}

08003a24 <_ZN6Kalman6UpdateESt6vectorIS0_IfSaIfEESaIS2_EE>:

void Kalman::Update(matrix P)
{
 8003a24:	b590      	push	{r4, r7, lr}
 8003a26:	b0ad      	sub	sp, #180	; 0xb4
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  x_e_ = x_p_ + K_G_ * (P - x_p_);
 8003a2e:	687c      	ldr	r4, [r7, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8003a36:	f107 0314 	add.w	r3, r7, #20
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 fa91 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8003a48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fa88 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8003a54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a58:	6839      	ldr	r1, [r7, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fa82 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8003a66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 fa79 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8003a72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003a76:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003a7a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f002 f808 	bl	8005a94 <_ZmiSt6vectorIS_IfSaIfEESaIS1_EES3_>
 8003a84:	f107 0320 	add.w	r3, r7, #32
 8003a88:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003a8c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003a90:	4618      	mov	r0, r3
 8003a92:	f002 f885 	bl	8005ba0 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_>
 8003a96:	f107 0308 	add.w	r3, r7, #8
 8003a9a:	f107 0220 	add.w	r2, r7, #32
 8003a9e:	f107 0114 	add.w	r1, r7, #20
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f001 ff70 	bl	8005988 <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_>
 8003aa8:	f107 0308 	add.w	r3, r7, #8
 8003aac:	4619      	mov	r1, r3
 8003aae:	4620      	mov	r0, r4
 8003ab0:	f000 fa95 	bl	8003fde <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSEOS3_>
 8003ab4:	f107 0308 	add.w	r3, r7, #8
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fd fc19 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003abe:	f107 0320 	add.w	r3, r7, #32
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fd fc14 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003ac8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fd fc0f 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003ad2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fd fc0a 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003adc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fd fc05 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003ae6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fd fc00 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003af0:	f107 0314 	add.w	r3, r7, #20
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fd fbfb 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
  p_e_ = (I_ - (K_G_ * H_)) * p_p_;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003b06:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fa29 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8003b18:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003b1c:	4611      	mov	r1, r2
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fa20 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8003b2a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003b2e:	4611      	mov	r1, r2
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 fa17 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8003b36:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003b3a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8003b3e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8003b42:	4618      	mov	r0, r3
 8003b44:	f002 f82c 	bl	8005ba0 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_>
 8003b48:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003b4c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003b50:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8003b54:	4618      	mov	r0, r3
 8003b56:	f001 ff9d 	bl	8005a94 <_ZmiSt6vectorIS_IfSaIfEESaIS1_EES3_>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8003b60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 f9fc 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8003b6c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003b70:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003b74:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f002 f811 	bl	8005ba0 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_>
 8003b7e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003b82:	4619      	mov	r1, r3
 8003b84:	4620      	mov	r0, r4
 8003b86:	f000 fa2a 	bl	8003fde <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSEOS3_>
 8003b8a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fd fbae 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003b94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fd fba9 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003b9e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fd fba4 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003ba8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fd fb9f 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003bb2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fd fb9a 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003bbc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fd fb95 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8003bc6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fd fb90 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
}
 8003bd0:	bf00      	nop
 8003bd2:	37b4      	adds	r7, #180	; 0xb4
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd90      	pop	{r4, r7, pc}

08003bd8 <_ZN7kf_mathC1Ev>:

kf_math::kf_math()
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
{
	i_ = 0;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
	sum_ = 0;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	609a      	str	r2, [r3, #8]
	window_ = 0;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	611a      	str	r2, [r3, #16]
	readings_[100] = {0};
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	mean_ = 0;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	605a      	str	r2, [r3, #4]
}
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <_ZN7kf_mathD1Ev>:

kf_math::~kf_math(){};
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <_ZN7kf_math8varianceEfi>:

float kf_math::variance(float data_, int window_)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b087      	sub	sp, #28
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c36:	6079      	str	r1, [r7, #4]
  sqDiff_ = 0;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	60da      	str	r2, [r3, #12]
  sum_ = sum_ - readings_[i_];
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	3304      	adds	r3, #4
 8003c54:	edd3 7a00 	vldr	s15, [r3]
 8003c58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	edc3 7a02 	vstr	s15, [r3, #8]
  readings_[i_] = data_;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	3304      	adds	r3, #4
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	601a      	str	r2, [r3, #0]
  sum_ = sum_ + data_;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	edc3 7a02 	vstr	s15, [r3, #8]
  mean_ = (float)sum_ / (float)window_;		//Mean
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	edd3 6a02 	vldr	s13, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	ee07 3a90 	vmov	s15, r3
 8003c94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	edc3 7a01 	vstr	s15, [r3, #4]


  i_++;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	601a      	str	r2, [r3, #0]
  if (i_ == window_ - 1)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d102      	bne.n	8003cbe <_ZN7kf_math8varianceEfi+0x94>
 	  i_ = 0;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]

  for (int j = 0; j<window_; j++)
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	da27      	bge.n	8003d1a <_ZN7kf_math8varianceEfi+0xf0>
	  sqDiff_ += (readings_[j] - mean_) * (readings_[j] - mean_);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	ed93 7a03 	vldr	s14, [r3, #12]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	3304      	adds	r3, #4
 8003cdc:	edd3 6a00 	vldr	s13, [r3]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ce6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	ed93 6a00 	vldr	s12, [r3]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d00:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003d04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	edc3 7a03 	vstr	s15, [r3, #12]
  for (int j = 0; j<window_; j++)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	3301      	adds	r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e7d3      	b.n	8003cc2 <_ZN7kf_math8varianceEfi+0x98>


  return sqDiff_/window_;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	ee07 3a90 	vmov	s15, r3
 8003d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d2a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d2e:	eef0 7a66 	vmov.f32	s15, s13
}
 8003d32:	eeb0 0a67 	vmov.f32	s0, s15
 8003d36:	371c      	adds	r7, #28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIfSaIfEEES3_E27_S_propagate_on_copy_assignEv>:
    static constexpr bool _S_propagate_on_copy_assign()
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 8003d44:	2300      	movs	r3, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_>:
    vector<_Tp, _Alloc>::
 8003d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	f000 80f8 	beq.w	8003f54 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_+0x204>
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 8003d64:	f7ff ffec 	bl	8003d40 <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIfSaIfEEES3_E27_S_propagate_on_copy_assignEv>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d046      	beq.n	8003dfc <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_+0xac>
	      if (!_Alloc_traits::_S_always_equal()
 8003d6e:	f7ff fc83 	bl	8003678 <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIfSaIfEEES3_E15_S_always_equalEv>
 8003d72:	4603      	mov	r3, r0
 8003d74:	f083 0301 	eor.w	r3, r3, #1
 8003d78:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d012      	beq.n	8003da4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_+0x54>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fd fc64 	bl	800164e <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8003d86:	4604      	mov	r4, r0
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 f93c 	bl	8004008 <_ZNKSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8003d90:	4603      	mov	r3, r0
 8003d92:	4619      	mov	r1, r3
 8003d94:	4620      	mov	r0, r4
 8003d96:	f000 f942 	bl	800401e <_ZStneRKSaISt6vectorIfSaIfEEES4_>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_+0x54>
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_+0x56>
 8003da4:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d01a      	beq.n	8003de0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_+0x90>
		  this->clear();
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f943 	bl	8004036 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	109b      	asrs	r3, r3, #2
 8003dc2:	4a67      	ldr	r2, [pc, #412]	; (8003f60 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_+0x210>)
 8003dc4:	fb02 f303 	mul.w	r3, r2, r3
		  _M_deallocate(this->_M_impl._M_start,
 8003dc8:	461a      	mov	r2, r3
 8003dca:	f7fd fc2d 	bl	8001628 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE13_M_deallocateEPS2_j>
		  this->_M_impl._M_start = nullptr;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	609a      	str	r2, [r3, #8]
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fd fc33 	bl	800164e <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8003de8:	4604      	mov	r4, r0
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 f90b 	bl	8004008 <_ZNKSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8003df2:	4603      	mov	r3, r0
 8003df4:	4619      	mov	r1, r3
 8003df6:	4620      	mov	r0, r4
 8003df8:	f000 f92b 	bl	8004052 <_ZSt15__alloc_on_copyISaISt6vectorIfSaIfEEEEvRT_RKS4_>
	  const size_type __xlen = __x.size();
 8003dfc:	6838      	ldr	r0, [r7, #0]
 8003dfe:	f7fe fa33 	bl	8002268 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE4sizeEv>
 8003e02:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7fe f9d5 	bl	80021b4 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE8capacityEv>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	bf8c      	ite	hi
 8003e12:	2301      	movhi	r3, #1
 8003e14:	2300      	movls	r3, #0
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d038      	beq.n	8003e8e <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_+0x13e>
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 8003e1c:	6838      	ldr	r0, [r7, #0]
 8003e1e:	f000 f926 	bl	800406e <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE5beginEv>
 8003e22:	4604      	mov	r4, r0
 8003e24:	6838      	ldr	r0, [r7, #0]
 8003e26:	f000 f936 	bl	8004096 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE3endEv>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4622      	mov	r2, r4
 8003e2e:	68f9      	ldr	r1, [r7, #12]
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f944 	bl	80040be <_ZNSt6vectorIS_IfSaIfEESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_jT_SB_>
 8003e36:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681c      	ldr	r4, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fd fc03 	bl	800164e <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8003e48:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f7fd fc08 	bl	8001664 <_ZSt8_DestroyIPSt6vectorIfSaIfEES2_EvT_S4_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	109b      	asrs	r3, r3, #2
 8003e66:	4a3e      	ldr	r2, [pc, #248]	; (8003f60 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_+0x210>)
 8003e68:	fb02 f303 	mul.w	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	f7fd fbdb 	bl	8001628 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE13_M_deallocateEPS2_j>
	      this->_M_impl._M_start = __tmp;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6819      	ldr	r1, [r3, #0]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	18ca      	adds	r2, r1, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	609a      	str	r2, [r3, #8]
 8003e8c:	e058      	b.n	8003f40 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_+0x1f0>
	  else if (size() >= __xlen)
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7fe f9ea 	bl	8002268 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE4sizeEv>
 8003e94:	4602      	mov	r2, r0
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	bf94      	ite	ls
 8003e9c:	2301      	movls	r3, #1
 8003e9e:	2300      	movhi	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d020      	beq.n	8003ee8 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_+0x198>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8003ea6:	6838      	ldr	r0, [r7, #0]
 8003ea8:	f000 f8e1 	bl	800406e <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE5beginEv>
 8003eac:	4604      	mov	r4, r0
 8003eae:	6838      	ldr	r0, [r7, #0]
 8003eb0:	f000 f8f1 	bl	8004096 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE3endEv>
 8003eb4:	4605      	mov	r5, r0
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f91d 	bl	80040f6 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE5beginEv>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	4629      	mov	r1, r5
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	f000 f927 	bl	8004116 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES2_IS4_SaIS4_EEEENS1_IPS4_S8_EEET0_T_SD_SC_>
 8003ec8:	4604      	mov	r4, r0
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f93b 	bl	8004146 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE3endEv>
 8003ed0:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fd fbba 	bl	800164e <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8003eda:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8003edc:	461a      	mov	r2, r3
 8003ede:	4629      	mov	r1, r5
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	f000 f941 	bl	8004168 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES2_IS4_SaIS4_EEEES4_EvT_S9_RSaIT0_E>
 8003ee6:	e02b      	b.n	8003f40 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_+0x1f0>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681d      	ldr	r5, [r3, #0]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681c      	ldr	r4, [r3, #0]
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7fe f9b9 	bl	8002268 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE4sizeEv>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	4613      	mov	r3, r2
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	18e1      	adds	r1, r4, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	4628      	mov	r0, r5
 8003f0a:	f000 f93b 	bl	8004184 <_ZSt4copyIPSt6vectorIfSaIfEES3_ET0_T_S5_S4_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681c      	ldr	r4, [r3, #0]
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fe f9a8 	bl	8002268 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE4sizeEv>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fd fb8d 	bl	800164e <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8003f34:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8003f36:	4632      	mov	r2, r6
 8003f38:	4629      	mov	r1, r5
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	f000 f93a 	bl	80041b4 <_ZSt22__uninitialized_copy_aIPSt6vectorIfSaIfEES3_S2_ET0_T_S5_S4_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6819      	ldr	r1, [r3, #0]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4613      	mov	r3, r2
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	18ca      	adds	r2, r1, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	605a      	str	r2, [r3, #4]
      return *this;
 8003f54:	687b      	ldr	r3, [r7, #4]
    }
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	aaaaaaab 	.word	0xaaaaaaab

08003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 8003f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8003f6e:	687c      	ldr	r4, [r7, #4]
 8003f70:	6838      	ldr	r0, [r7, #0]
 8003f72:	f7fe f979 	bl	8002268 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE4sizeEv>
 8003f76:	4605      	mov	r5, r0
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 f844 	bl	8004008 <_ZNKSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8003f80:	4602      	mov	r2, r0
 8003f82:	f107 030c 	add.w	r3, r7, #12
 8003f86:	4611      	mov	r1, r2
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 f924 	bl	80041d6 <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIfSaIfEEES3_E17_S_select_on_copyERKS4_>
 8003f8e:	f107 030c 	add.w	r3, r7, #12
 8003f92:	461a      	mov	r2, r3
 8003f94:	4629      	mov	r1, r5
 8003f96:	4620      	mov	r0, r4
 8003f98:	f000 f92b 	bl	80041f2 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EEC1EjRKS3_>
 8003f9c:	f107 030c 	add.w	r3, r7, #12
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fd f97b 	bl	800129c <_ZNSaISt6vectorIfSaIfEEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8003fa6:	6838      	ldr	r0, [r7, #0]
 8003fa8:	f000 f861 	bl	800406e <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE5beginEv>
 8003fac:	4605      	mov	r5, r0
 8003fae:	6838      	ldr	r0, [r7, #0]
 8003fb0:	f000 f871 	bl	8004096 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE3endEv>
 8003fb4:	4606      	mov	r6, r0
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fd fb46 	bl	800164e <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8003fc2:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8003fc4:	4622      	mov	r2, r4
 8003fc6:	4631      	mov	r1, r6
 8003fc8:	4628      	mov	r0, r5
 8003fca:	f000 f926 	bl	800421a <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES2_IS4_SaIS4_EEEEPS4_S4_ET0_T_SC_SB_RSaIT1_E>
 8003fce:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	605a      	str	r2, [r3, #4]
      }
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fde <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSEOS3_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8003fde:	b590      	push	{r4, r7, lr}
 8003fe0:	b085      	sub	sp, #20
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	6039      	str	r1, [r7, #0]
	constexpr bool __move_storage =
 8003fe8:	2301      	movs	r3, #1
 8003fea:	73fb      	strb	r3, [r7, #15]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8003fec:	6838      	ldr	r0, [r7, #0]
 8003fee:	f000 f925 	bl	800423c <_ZSt4moveIRSt6vectorIS0_IfSaIfEESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	4622      	mov	r2, r4
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f92a 	bl	8004252 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE14_M_move_assignEOS3_St17integral_constantIbLb1EE>
	return *this;
 8003ffe:	687b      	ldr	r3, [r7, #4]
      }
 8004000:	4618      	mov	r0, r3
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	bd90      	pop	{r4, r7, pc}

08004008 <_ZNKSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4618      	mov	r0, r3
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <_ZStneRKSaISt6vectorIfSaIfEEES4_>:
      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	6039      	str	r1, [r7, #0]
      { return false; }
 8004028:	2300      	movs	r3, #0
 800402a:	4618      	mov	r0, r3
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4619      	mov	r1, r3
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7fe f925 	bl	8002294 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE15_M_erase_at_endEPS1_>
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <_ZSt15__alloc_on_copyISaISt6vectorIfSaIfEEEEvRT_RKS4_>:
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 8004052:	b580      	push	{r7, lr}
 8004054:	b084      	sub	sp, #16
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	6039      	str	r1, [r7, #0]
      __do_alloc_on_copy(__one, __two, __pocca());
 800405c:	461a      	mov	r2, r3
 800405e:	6839      	ldr	r1, [r7, #0]
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f934 	bl	80042ce <_ZSt18__do_alloc_on_copyISaISt6vectorIfSaIfEEEEvRT_RKS4_St17integral_constantIbLb0EE>
    }
 8004066:	bf00      	nop
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800406e:	b580      	push	{r7, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	f107 020c 	add.w	r2, r7, #12
 8004080:	f107 0308 	add.w	r3, r7, #8
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f92d 	bl	80042e6 <_ZN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEEC1ERKS5_>
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8004096:	b580      	push	{r7, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	f107 020c 	add.w	r2, r7, #12
 80040a8:	f107 0308 	add.w	r3, r7, #8
 80040ac:	4611      	mov	r1, r2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 f919 	bl	80042e6 <_ZN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEEC1ERKS5_>
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <_ZNSt6vectorIS_IfSaIfEESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_jT_SB_>:
	_M_allocate_and_copy(size_type __n,
 80040be:	b580      	push	{r7, lr}
 80040c0:	b086      	sub	sp, #24
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
 80040ca:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	68b9      	ldr	r1, [r7, #8]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fe fb2d 	bl	8002730 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE11_M_allocateEj>
 80040d6:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fd fab7 	bl	800164e <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 80040e0:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	6839      	ldr	r1, [r7, #0]
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f897 	bl	800421a <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES2_IS4_SaIS4_EEEEPS4_S4_ET0_T_SC_SB_RSaIT1_E>
	      return __result;
 80040ec:	697b      	ldr	r3, [r7, #20]
	}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b084      	sub	sp, #16
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	f107 030c 	add.w	r3, r7, #12
 8004104:	4611      	mov	r1, r2
 8004106:	4618      	mov	r0, r3
 8004108:	f000 f8fd 	bl	8004306 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEEC1ERKS4_>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES2_IS4_SaIS4_EEEENS1_IPS4_S8_EEET0_T_SD_SC_>:
    copy(_II __first, _II __last, _OI __result)
 8004116:	b590      	push	{r4, r7, lr}
 8004118:	b085      	sub	sp, #20
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f8ff 	bl	8004326 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES2_IS4_SaIS4_EEEEET_SA_>
 8004128:	4604      	mov	r4, r0
 800412a:	68b8      	ldr	r0, [r7, #8]
 800412c:	f000 f8fb 	bl	8004326 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES2_IS4_SaIS4_EEEEET_SA_>
 8004130:	4603      	mov	r3, r0
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	4619      	mov	r1, r3
 8004136:	4620      	mov	r0, r4
 8004138:	f000 f900 	bl	800433c <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES2_IS4_SaIS4_EEEENS1_IPS4_S8_EEET1_T0_SD_SC_>
 800413c:	4603      	mov	r3, r0
    }
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	bd90      	pop	{r4, r7, pc}

08004146 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	1d1a      	adds	r2, r3, #4
 8004152:	f107 030c 	add.w	r3, r7, #12
 8004156:	4611      	mov	r1, r2
 8004158:	4618      	mov	r0, r3
 800415a:	f000 f8d4 	bl	8004306 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEEC1ERKS4_>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES2_IS4_SaIS4_EEEES4_EvT_S9_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8004174:	68b9      	ldr	r1, [r7, #8]
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 f901 	bl	800437e <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES2_IS4_SaIS4_EEEEEvT_S9_>
    }
 800417c:	bf00      	nop
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <_ZSt4copyIPSt6vectorIfSaIfEES3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8004184:	b590      	push	{r4, r7, lr}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 f901 	bl	8004398 <_ZSt12__miter_baseIPSt6vectorIfSaIfEEET_S4_>
 8004196:	4604      	mov	r4, r0
 8004198:	68b8      	ldr	r0, [r7, #8]
 800419a:	f000 f8fd 	bl	8004398 <_ZSt12__miter_baseIPSt6vectorIfSaIfEEET_S4_>
 800419e:	4603      	mov	r3, r0
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	4619      	mov	r1, r3
 80041a4:	4620      	mov	r0, r4
 80041a6:	f000 f902 	bl	80043ae <_ZSt14__copy_move_a2ILb0EPSt6vectorIfSaIfEES3_ET1_T0_S5_S4_>
 80041aa:	4603      	mov	r3, r0
    }
 80041ac:	4618      	mov	r0, r3
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd90      	pop	{r4, r7, pc}

080041b4 <_ZSt22__uninitialized_copy_aIPSt6vectorIfSaIfEES3_S2_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	68b9      	ldr	r1, [r7, #8]
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f914 	bl	80043f4 <_ZSt18uninitialized_copyIPSt6vectorIfSaIfEES3_ET0_T_S5_S4_>
 80041cc:	4603      	mov	r3, r0
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIfSaIfEEES3_E17_S_select_on_copyERKS4_>:
    static _Alloc _S_select_on_copy(const _Alloc& __a)
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b082      	sub	sp, #8
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6839      	ldr	r1, [r7, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 f917 	bl	8004418 <_ZNSt16allocator_traitsISaISt6vectorIfSaIfEEEE37select_on_container_copy_constructionERKS3_>
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EEC1EjRKS3_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	4618      	mov	r0, r3
 8004204:	f000 f915 	bl	8004432 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE12_Vector_implC1ERKS3_>
      { _M_create_storage(__n); }
 8004208:	68b9      	ldr	r1, [r7, #8]
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 f923 	bl	8004456 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_M_create_storageEj>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES2_IS4_SaIS4_EEEEPS4_S4_ET0_T_SC_SB_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	607a      	str	r2, [r7, #4]
 8004226:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	68b9      	ldr	r1, [r7, #8]
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 f930 	bl	8004492 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES2_IS4_SaIS4_EEEEPS4_ET0_T_SC_SB_>
 8004232:	4603      	mov	r3, r0
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <_ZSt4moveIRSt6vectorIS0_IfSaIfEESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4618      	mov	r0, r3
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE14_M_move_assignEOS3_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 8004252:	b590      	push	{r4, r7, lr}
 8004254:	b089      	sub	sp, #36	; 0x24
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	f107 031c 	add.w	r3, r7, #28
 8004264:	4611      	mov	r1, r2
 8004266:	4618      	mov	r0, r3
 8004268:	f000 f925 	bl	80044b6 <_ZNKSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE13get_allocatorEv>
 800426c:	f107 021c 	add.w	r2, r7, #28
 8004270:	f107 0310 	add.w	r3, r7, #16
 8004274:	4611      	mov	r1, r2
 8004276:	4618      	mov	r0, r3
 8004278:	f000 f92e 	bl	80044d8 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS2_>
 800427c:	f107 031c 	add.w	r3, r7, #28
 8004280:	4618      	mov	r0, r3
 8004282:	f7fd f80b 	bl	800129c <_ZNSaISt6vectorIfSaIfEEED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	4611      	mov	r1, r2
 800428c:	4618      	mov	r0, r3
 800428e:	f000 f932 	bl	80044f6 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_Vector_impl_data12_M_swap_dataERS5_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	f107 0310 	add.w	r3, r7, #16
 8004298:	4611      	mov	r1, r2
 800429a:	4618      	mov	r0, r3
 800429c:	f000 f92b 	bl	80044f6 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_Vector_impl_data12_M_swap_dataERS5_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fd f9d3 	bl	800164e <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 80042a8:	4604      	mov	r4, r0
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fd f9ce 	bl	800164e <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 80042b2:	4603      	mov	r3, r0
 80042b4:	4619      	mov	r1, r3
 80042b6:	4620      	mov	r0, r4
 80042b8:	f000 f93b 	bl	8004532 <_ZSt15__alloc_on_moveISaISt6vectorIfSaIfEEEEvRT_S5_>
	vector __tmp(get_allocator());
 80042bc:	f107 0310 	add.w	r3, r7, #16
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fd f815 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
      }
 80042c6:	bf00      	nop
 80042c8:	3724      	adds	r7, #36	; 0x24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd90      	pop	{r4, r7, pc}

080042ce <_ZSt18__do_alloc_on_copyISaISt6vectorIfSaIfEEEEvRT_RKS4_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 80042ce:	b480      	push	{r7}
 80042d0:	b085      	sub	sp, #20
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	60f8      	str	r0, [r7, #12]
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	713a      	strb	r2, [r7, #4]
    { }
 80042da:	bf00      	nop
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <_ZN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEEC1ERKS5_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4618      	mov	r0, r3
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4618      	mov	r0, r3
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES2_IS4_SaIS4_EEEEET_SA_>:
    __miter_base(_Iterator __it)
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES2_IS4_SaIS4_EEEENS1_IPS4_S8_EEET1_T0_SD_SC_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800433c:	b5b0      	push	{r4, r5, r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 f900 	bl	800454e <_ZSt12__niter_baseIPKSt6vectorIfSaIfEES0_IS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 800434e:	4604      	mov	r4, r0
 8004350:	68b8      	ldr	r0, [r7, #8]
 8004352:	f000 f8fc 	bl	800454e <_ZSt12__niter_baseIPKSt6vectorIfSaIfEES0_IS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 8004356:	4605      	mov	r5, r0
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f906 	bl	800456a <_ZSt12__niter_baseIPSt6vectorIfSaIfEES0_IS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800435e:	4603      	mov	r3, r0
 8004360:	461a      	mov	r2, r3
 8004362:	4629      	mov	r1, r5
 8004364:	4620      	mov	r0, r4
 8004366:	f7fe fb99 	bl	8002a9c <_ZSt13__copy_move_aILb0EPKSt6vectorIfSaIfEEPS2_ET1_T0_S7_S6_>
 800436a:	4603      	mov	r3, r0
 800436c:	4619      	mov	r1, r3
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f90a 	bl	8004588 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES2_IS4_SaIS4_EEEES5_ET_S9_T0_>
 8004374:	4603      	mov	r3, r0
    }
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bdb0      	pop	{r4, r5, r7, pc}

0800437e <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES2_IS4_SaIS4_EEEEEvT_S9_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8004388:	6839      	ldr	r1, [r7, #0]
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f918 	bl	80045c0 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEEEvT_SB_>
    }
 8004390:	bf00      	nop
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <_ZSt12__miter_baseIPSt6vectorIfSaIfEEET_S4_>:
    __miter_base(_Iterator __it)
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
    { return __it; }
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4618      	mov	r0, r3
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <_ZSt14__copy_move_a2ILb0EPSt6vectorIfSaIfEES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80043ae:	b5b0      	push	{r4, r5, r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f7fe fb63 	bl	8002a86 <_ZSt12__niter_baseIPSt6vectorIfSaIfEEET_S4_>
 80043c0:	4604      	mov	r4, r0
 80043c2:	68b8      	ldr	r0, [r7, #8]
 80043c4:	f7fe fb5f 	bl	8002a86 <_ZSt12__niter_baseIPSt6vectorIfSaIfEEET_S4_>
 80043c8:	4605      	mov	r5, r0
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fe fb5a 	bl	8002a86 <_ZSt12__niter_baseIPSt6vectorIfSaIfEEET_S4_>
 80043d2:	4603      	mov	r3, r0
 80043d4:	461a      	mov	r2, r3
 80043d6:	4629      	mov	r1, r5
 80043d8:	4620      	mov	r0, r4
 80043da:	f000 f914 	bl	8004606 <_ZSt13__copy_move_aILb0EPSt6vectorIfSaIfEES3_ET1_T0_S5_S4_>
 80043de:	4602      	mov	r2, r0
 80043e0:	1d3b      	adds	r3, r7, #4
 80043e2:	4611      	mov	r1, r2
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fe fb6b 	bl	8002ac0 <_ZSt12__niter_wrapIPSt6vectorIfSaIfEEET_RKS4_S4_>
 80043ea:	4603      	mov	r3, r0
    }
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bdb0      	pop	{r4, r5, r7, pc}

080043f4 <_ZSt18uninitialized_copyIPSt6vectorIfSaIfEES3_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004400:	2301      	movs	r3, #1
 8004402:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	68b9      	ldr	r1, [r7, #8]
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f90e 	bl	800462a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIfSaIfEES5_EET0_T_S7_S6_>
 800440e:	4603      	mov	r3, r0
    }
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <_ZNSt16allocator_traitsISaISt6vectorIfSaIfEEEE37select_on_container_copy_constructionERKS3_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8004422:	6839      	ldr	r1, [r7, #0]
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7fe f975 	bl	8002714 <_ZNSaISt6vectorIfSaIfEEEC1ERKS2_>
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE12_Vector_implC1ERKS3_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8004432:	b580      	push	{r7, lr}
 8004434:	b082      	sub	sp, #8
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800443c:	6839      	ldr	r1, [r7, #0]
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fe f968 	bl	8002714 <_ZNSaISt6vectorIfSaIfEEEC1ERKS2_>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4618      	mov	r0, r3
 8004448:	f7fd f8cf 	bl	80015ea <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8004456:	b580      	push	{r7, lr}
 8004458:	b082      	sub	sp, #8
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8004460:	6839      	ldr	r1, [r7, #0]
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fe f964 	bl	8002730 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE11_M_allocateEj>
 8004468:	4602      	mov	r2, r0
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6819      	ldr	r1, [r3, #0]
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	4613      	mov	r3, r2
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	4413      	add	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	18ca      	adds	r2, r1, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	609a      	str	r2, [r3, #8]
      }
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES2_IS4_SaIS4_EEEEPS4_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004492:	b580      	push	{r7, lr}
 8004494:	b086      	sub	sp, #24
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800449e:	2301      	movs	r3, #1
 80044a0:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 f8df 	bl	800466a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_>
 80044ac:	4603      	mov	r3, r0
    }
 80044ae:	4618      	mov	r0, r3
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <_ZNKSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b082      	sub	sp, #8
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 80044c0:	6838      	ldr	r0, [r7, #0]
 80044c2:	f7ff fda1 	bl	8004008 <_ZNKSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 80044c6:	4603      	mov	r3, r0
 80044c8:	4619      	mov	r1, r3
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fe f922 	bl	8002714 <_ZNSaISt6vectorIfSaIfEEEC1ERKS2_>
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS2_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6839      	ldr	r1, [r7, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 f8ee 	bl	80046c8 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EEC1ERKS3_>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_Vector_impl_data12_M_swap_dataERS5_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b086      	sub	sp, #24
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 8004500:	f107 030c 	add.w	r3, r7, #12
 8004504:	4618      	mov	r0, r3
 8004506:	f7fd f870 	bl	80015ea <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 800450a:	f107 030c 	add.w	r3, r7, #12
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	4618      	mov	r0, r3
 8004512:	f000 f8e8 	bl	80046e6 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_Vector_impl_data12_M_copy_dataERKS5_>
	  _M_copy_data(__x);
 8004516:	6839      	ldr	r1, [r7, #0]
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f8e4 	bl	80046e6 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_Vector_impl_data12_M_copy_dataERKS5_>
	  __x._M_copy_data(__tmp);
 800451e:	f107 030c 	add.w	r3, r7, #12
 8004522:	4619      	mov	r1, r3
 8004524:	6838      	ldr	r0, [r7, #0]
 8004526:	f000 f8de 	bl	80046e6 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_Vector_impl_data12_M_copy_dataERKS5_>
	}
 800452a:	bf00      	nop
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <_ZSt15__alloc_on_moveISaISt6vectorIfSaIfEEEEvRT_S5_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
 800453c:	461a      	mov	r2, r3
 800453e:	6839      	ldr	r1, [r7, #0]
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f8e7 	bl	8004714 <_ZSt18__do_alloc_on_moveISaISt6vectorIfSaIfEEEEvRT_S5_St17integral_constantIbLb1EE>
    }
 8004546:	bf00      	nop
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <_ZSt12__niter_baseIPKSt6vectorIfSaIfEES0_IS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800454e:	b580      	push	{r7, lr}
 8004550:	b082      	sub	sp, #8
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8004556:	1d3b      	adds	r3, r7, #4
 8004558:	4618      	mov	r0, r3
 800455a:	f000 f8e8 	bl	800472e <_ZNK9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEE4baseEv>
 800455e:	4603      	mov	r3, r0
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <_ZSt12__niter_baseIPSt6vectorIfSaIfEES0_IS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800456a:	b580      	push	{r7, lr}
 800456c:	b082      	sub	sp, #8
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8004572:	1d3b      	adds	r3, r7, #4
 8004574:	4618      	mov	r0, r3
 8004576:	f000 f8e5 	bl	8004744 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEE4baseEv>
 800457a:	4603      	mov	r3, r0
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES2_IS4_SaIS4_EEEES5_ET_S9_T0_>:
    __niter_wrap(_From __from, _To __res)
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff ffe9 	bl	800456a <_ZSt12__niter_baseIPSt6vectorIfSaIfEES0_IS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8004598:	4602      	mov	r2, r0
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	1a9b      	subs	r3, r3, r2
 800459e:	109b      	asrs	r3, r3, #2
 80045a0:	4a06      	ldr	r2, [pc, #24]	; (80045bc <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES2_IS4_SaIS4_EEEES5_ET_S9_T0_+0x34>)
 80045a2:	fb02 f303 	mul.w	r3, r2, r3
 80045a6:	461a      	mov	r2, r3
 80045a8:	1d3b      	adds	r3, r7, #4
 80045aa:	4611      	mov	r1, r2
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 f8d4 	bl	800475a <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEEplEi>
 80045b2:	4603      	mov	r3, r0
 80045b4:	4618      	mov	r0, r3
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	aaaaaaab 	.word	0xaaaaaaab

080045c0 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEEEvT_SB_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80045ca:	463a      	mov	r2, r7
 80045cc:	1d3b      	adds	r3, r7, #4
 80045ce:	4611      	mov	r1, r2
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 f8dd 	bl	8004790 <_ZN9__gnu_cxxneIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d010      	beq.n	80045fe <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEEEvT_SB_+0x3e>
	    std::_Destroy(std::__addressof(*__first));
 80045dc:	1d3b      	adds	r3, r7, #4
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 f8ff 	bl	80047e2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEEdeEv>
 80045e4:	4603      	mov	r3, r0
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe f90c 	bl	8002804 <_ZSt11__addressofISt6vectorIfSaIfEEEPT_RS3_>
 80045ec:	4603      	mov	r3, r0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fe f913 	bl	800281a <_ZSt8_DestroyISt6vectorIfSaIfEEEvPT_>
	  for (; __first != __last; ++__first)
 80045f4:	1d3b      	adds	r3, r7, #4
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 f8e2 	bl	80047c0 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEEppEv>
 80045fc:	e7e5      	b.n	80045ca <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEEEvT_SB_+0xa>
	}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <_ZSt13__copy_move_aILb0EPSt6vectorIfSaIfEES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004606:	b580      	push	{r7, lr}
 8004608:	b086      	sub	sp, #24
 800460a:	af00      	add	r7, sp, #0
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8004612:	2300      	movs	r3, #0
 8004614:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	68b9      	ldr	r1, [r7, #8]
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 f8ee 	bl	80047fc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt6vectorIfSaIfEES6_EET0_T_S8_S7_>
 8004620:	4603      	mov	r3, r0
    }
 8004622:	4618      	mov	r0, r3
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIfSaIfEES5_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800462a:	b580      	push	{r7, lr}
 800462c:	b086      	sub	sp, #24
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	429a      	cmp	r2, r3
 8004640:	d00e      	beq.n	8004660 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIfSaIfEES5_EET0_T_S7_S6_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 8004642:	6978      	ldr	r0, [r7, #20]
 8004644:	f7fe f8de 	bl	8002804 <_ZSt11__addressofISt6vectorIfSaIfEEEPT_RS3_>
 8004648:	4603      	mov	r3, r0
 800464a:	68f9      	ldr	r1, [r7, #12]
 800464c:	4618      	mov	r0, r3
 800464e:	f000 f8fb 	bl	8004848 <_ZSt10_ConstructISt6vectorIfSaIfEEJRS2_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	330c      	adds	r3, #12
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	330c      	adds	r3, #12
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	e7ec      	b.n	800463a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIfSaIfEES5_EET0_T_S7_S6_+0x10>
	      return __cur;
 8004660:	697b      	ldr	r3, [r7, #20]
	}
 8004662:	4618      	mov	r0, r3
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800466a:	b590      	push	{r4, r7, lr}
 800466c:	b087      	sub	sp, #28
 800466e:	af00      	add	r7, sp, #0
 8004670:	60f8      	str	r0, [r7, #12]
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800467a:	f107 0208 	add.w	r2, r7, #8
 800467e:	f107 030c 	add.w	r3, r7, #12
 8004682:	4611      	mov	r1, r2
 8004684:	4618      	mov	r0, r3
 8004686:	f000 f8f6 	bl	8004876 <_ZN9__gnu_cxxneIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d016      	beq.n	80046be <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8004690:	6978      	ldr	r0, [r7, #20]
 8004692:	f7fe f8b7 	bl	8002804 <_ZSt11__addressofISt6vectorIfSaIfEEEPT_RS3_>
 8004696:	4604      	mov	r4, r0
 8004698:	f107 030c 	add.w	r3, r7, #12
 800469c:	4618      	mov	r0, r3
 800469e:	f000 f913 	bl	80048c8 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEEdeEv>
 80046a2:	4603      	mov	r3, r0
 80046a4:	4619      	mov	r1, r3
 80046a6:	4620      	mov	r0, r4
 80046a8:	f7fe fafc 	bl	8002ca4 <_ZSt10_ConstructISt6vectorIfSaIfEEJRKS2_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 80046ac:	f107 030c 	add.w	r3, r7, #12
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 f8f8 	bl	80048a6 <_ZN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEEppEv>
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	330c      	adds	r3, #12
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	e7dd      	b.n	800467a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_+0x10>
	      return __cur;
 80046be:	697b      	ldr	r3, [r7, #20]
	}
 80046c0:	4618      	mov	r0, r3
 80046c2:	371c      	adds	r7, #28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd90      	pop	{r4, r7, pc}

080046c8 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EEC1ERKS3_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6839      	ldr	r1, [r7, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff feab 	bl	8004432 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE12_Vector_implC1ERKS3_>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_Vector_impl_data12_M_copy_dataERKS5_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	609a      	str	r2, [r3, #8]
	}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <_ZSt18__do_alloc_on_moveISaISt6vectorIfSaIfEEEEvRT_S5_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8004720:	68b8      	ldr	r0, [r7, #8]
 8004722:	f000 f8dd 	bl	80048e0 <_ZSt4moveIRSaISt6vectorIfSaIfEEEEONSt16remove_referenceIT_E4typeEOS6_>
 8004726:	bf00      	nop
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <_ZNK9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4618      	mov	r0, r3
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4618      	mov	r0, r3
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
 8004762:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6819      	ldr	r1, [r3, #0]
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	4613      	mov	r3, r2
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	440b      	add	r3, r1
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	f107 020c 	add.w	r2, r7, #12
 800477a:	f107 0308 	add.w	r3, r7, #8
 800477e:	4611      	mov	r1, r2
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff fdc0 	bl	8004306 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEEC1ERKS4_>
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <_ZN9__gnu_cxxneIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8004790:	b590      	push	{r4, r7, lr}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7ff ffd2 	bl	8004744 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEE4baseEv>
 80047a0:	4603      	mov	r3, r0
 80047a2:	681c      	ldr	r4, [r3, #0]
 80047a4:	6838      	ldr	r0, [r7, #0]
 80047a6:	f7ff ffcd 	bl	8004744 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEE4baseEv>
 80047aa:	4603      	mov	r3, r0
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	429c      	cmp	r4, r3
 80047b0:	bf14      	ite	ne
 80047b2:	2301      	movne	r3, #1
 80047b4:	2300      	moveq	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd90      	pop	{r4, r7, pc}

080047c0 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
	++_M_current;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f103 020c 	add.w	r2, r3, #12
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	601a      	str	r2, [r3, #0]
	return *this;
 80047d4:	687b      	ldr	r3, [r7, #4]
      }
 80047d6:	4618      	mov	r0, r3
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
	...

080047fc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt6vectorIfSaIfEES6_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	109b      	asrs	r3, r3, #2
 8004810:	4a0c      	ldr	r2, [pc, #48]	; (8004844 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt6vectorIfSaIfEES6_EET0_T_S8_S7_+0x48>)
 8004812:	fb02 f303 	mul.w	r3, r2, r3
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2b00      	cmp	r3, #0
 800481c:	dd0d      	ble.n	800483a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt6vectorIfSaIfEES6_EET0_T_S8_S7_+0x3e>
	      *__result = *__first;
 800481e:	68f9      	ldr	r1, [r7, #12]
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7fe fa66 	bl	8002cf2 <_ZNSt6vectorIfSaIfEEaSERKS1_>
	      ++__first;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	330c      	adds	r3, #12
 800482a:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	330c      	adds	r3, #12
 8004830:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	3b01      	subs	r3, #1
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	e7ee      	b.n	8004818 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt6vectorIfSaIfEES6_EET0_T_S8_S7_+0x1c>
	  return __result;
 800483a:	687b      	ldr	r3, [r7, #4]
	}
 800483c:	4618      	mov	r0, r3
 800483e:	3718      	adds	r7, #24
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	aaaaaaab 	.word	0xaaaaaaab

08004848 <_ZSt10_ConstructISt6vectorIfSaIfEEJRS2_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8004848:	b590      	push	{r4, r7, lr}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8004852:	6838      	ldr	r0, [r7, #0]
 8004854:	f000 f84f 	bl	80048f6 <_ZSt7forwardIRSt6vectorIfSaIfEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004858:	4604      	mov	r4, r0
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4619      	mov	r1, r3
 800485e:	200c      	movs	r0, #12
 8004860:	f7fc f996 	bl	8000b90 <_ZnwjPv>
 8004864:	4603      	mov	r3, r0
 8004866:	4621      	mov	r1, r4
 8004868:	4618      	mov	r0, r3
 800486a:	f7fe fb42 	bl	8002ef2 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	bd90      	pop	{r4, r7, pc}

08004876 <_ZN9__gnu_cxxneIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8004876:	b590      	push	{r4, r7, lr}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff ff54 	bl	800472e <_ZNK9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEE4baseEv>
 8004886:	4603      	mov	r3, r0
 8004888:	681c      	ldr	r4, [r3, #0]
 800488a:	6838      	ldr	r0, [r7, #0]
 800488c:	f7ff ff4f 	bl	800472e <_ZNK9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEE4baseEv>
 8004890:	4603      	mov	r3, r0
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	429c      	cmp	r4, r3
 8004896:	bf14      	ite	ne
 8004898:	2301      	movne	r3, #1
 800489a:	2300      	moveq	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	4618      	mov	r0, r3
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd90      	pop	{r4, r7, pc}

080048a6 <_ZN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
	++_M_current;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f103 020c 	add.w	r2, r3, #12
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	601a      	str	r2, [r3, #0]
	return *this;
 80048ba:	687b      	ldr	r3, [r7, #4]
      }
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <_ZSt4moveIRSaISt6vectorIfSaIfEEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4618      	mov	r0, r3
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <_ZSt7forwardIRSt6vectorIfSaIfEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4618      	mov	r0, r3
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004910:	f001 fc4b 	bl	80061aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004914:	f000 f814 	bl	8004940 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004918:	f000 f8f2 	bl	8004b00 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 800491c:	f000 f876 	bl	8004a0c <_ZL12MX_I2C1_Initv>
  MX_TIM16_Init();
 8004920:	f000 f8c2 	bl	8004aa8 <_ZL13MX_TIM16_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim16);
 8004924:	4804      	ldr	r0, [pc, #16]	; (8004938 <main+0x2c>)
 8004926:	f003 fd2b 	bl	8008380 <HAL_TIM_Base_Start_IT>
  ICM42605.Init();
 800492a:	4804      	ldr	r0, [pc, #16]	; (800493c <main+0x30>)
 800492c:	f7fc fa14 	bl	8000d58 <_ZN8ICM426054InitEv>
  ICM42605.GyroCalibrate();
 8004930:	4802      	ldr	r0, [pc, #8]	; (800493c <main+0x30>)
 8004932:	f7fc fb67 	bl	8001004 <_ZN8ICM4260513GyroCalibrateEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004936:	e7fe      	b.n	8004936 <main+0x2a>
 8004938:	2000015c 	.word	0x2000015c
 800493c:	2000034c 	.word	0x2000034c

08004940 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b0a8      	sub	sp, #160	; 0xa0
 8004944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004946:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800494a:	2238      	movs	r2, #56	; 0x38
 800494c:	2100      	movs	r1, #0
 800494e:	4618      	mov	r0, r3
 8004950:	f004 fab2 	bl	8008eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004954:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	605a      	str	r2, [r3, #4]
 800495e:	609a      	str	r2, [r3, #8]
 8004960:	60da      	str	r2, [r3, #12]
 8004962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004964:	463b      	mov	r3, r7
 8004966:	2254      	movs	r2, #84	; 0x54
 8004968:	2100      	movs	r1, #0
 800496a:	4618      	mov	r0, r3
 800496c:	f004 faa4 	bl	8008eb8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004970:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004974:	f002 fcb0 	bl	80072d8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004978:	2302      	movs	r3, #2
 800497a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800497c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004980:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004982:	2340      	movs	r3, #64	; 0x40
 8004984:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004986:	2300      	movs	r3, #0
 8004988:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800498c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004990:	4618      	mov	r0, r3
 8004992:	f002 fd55 	bl	8007440 <HAL_RCC_OscConfig>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	bf14      	ite	ne
 800499c:	2301      	movne	r3, #1
 800499e:	2300      	moveq	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <_Z18SystemClock_Configv+0x6a>
  {
    Error_Handler();
 80049a6:	f000 fa1f 	bl	8004de8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049aa:	230f      	movs	r3, #15
 80049ac:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80049ae:	2301      	movs	r3, #1
 80049b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049b2:	2300      	movs	r3, #0
 80049b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80049b6:	2300      	movs	r3, #0
 80049b8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80049ba:	2300      	movs	r3, #0
 80049bc:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80049be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80049c2:	2100      	movs	r1, #0
 80049c4:	4618      	mov	r0, r3
 80049c6:	f003 f853 	bl	8007a70 <HAL_RCC_ClockConfig>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	bf14      	ite	ne
 80049d0:	2301      	movne	r3, #1
 80049d2:	2300      	moveq	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80049da:	f000 fa05 	bl	8004de8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80049de:	2340      	movs	r3, #64	; 0x40
 80049e0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80049e2:	2300      	movs	r3, #0
 80049e4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049e6:	463b      	mov	r3, r7
 80049e8:	4618      	mov	r0, r3
 80049ea:	f003 fa25 	bl	8007e38 <HAL_RCCEx_PeriphCLKConfig>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	bf14      	ite	ne
 80049f4:	2301      	movne	r3, #1
 80049f6:	2300      	moveq	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 80049fe:	f000 f9f3 	bl	8004de8 <Error_Handler>
  }
}
 8004a02:	bf00      	nop
 8004a04:	37a0      	adds	r7, #160	; 0xa0
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004a10:	4b22      	ldr	r3, [pc, #136]	; (8004a9c <_ZL12MX_I2C1_Initv+0x90>)
 8004a12:	4a23      	ldr	r2, [pc, #140]	; (8004aa0 <_ZL12MX_I2C1_Initv+0x94>)
 8004a14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8004a16:	4b21      	ldr	r3, [pc, #132]	; (8004a9c <_ZL12MX_I2C1_Initv+0x90>)
 8004a18:	4a22      	ldr	r2, [pc, #136]	; (8004aa4 <_ZL12MX_I2C1_Initv+0x98>)
 8004a1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004a1c:	4b1f      	ldr	r3, [pc, #124]	; (8004a9c <_ZL12MX_I2C1_Initv+0x90>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a22:	4b1e      	ldr	r3, [pc, #120]	; (8004a9c <_ZL12MX_I2C1_Initv+0x90>)
 8004a24:	2201      	movs	r2, #1
 8004a26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004a28:	4b1c      	ldr	r3, [pc, #112]	; (8004a9c <_ZL12MX_I2C1_Initv+0x90>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004a2e:	4b1b      	ldr	r3, [pc, #108]	; (8004a9c <_ZL12MX_I2C1_Initv+0x90>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004a34:	4b19      	ldr	r3, [pc, #100]	; (8004a9c <_ZL12MX_I2C1_Initv+0x90>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004a3a:	4b18      	ldr	r3, [pc, #96]	; (8004a9c <_ZL12MX_I2C1_Initv+0x90>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004a40:	4b16      	ldr	r3, [pc, #88]	; (8004a9c <_ZL12MX_I2C1_Initv+0x90>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004a46:	4815      	ldr	r0, [pc, #84]	; (8004a9c <_ZL12MX_I2C1_Initv+0x90>)
 8004a48:	f001 fed4 	bl	80067f4 <HAL_I2C_Init>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	bf14      	ite	ne
 8004a52:	2301      	movne	r3, #1
 8004a54:	2300      	moveq	r3, #0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8004a5c:	f000 f9c4 	bl	8004de8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004a60:	2100      	movs	r1, #0
 8004a62:	480e      	ldr	r0, [pc, #56]	; (8004a9c <_ZL12MX_I2C1_Initv+0x90>)
 8004a64:	f002 fba0 	bl	80071a8 <HAL_I2CEx_ConfigAnalogFilter>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	bf14      	ite	ne
 8004a6e:	2301      	movne	r3, #1
 8004a70:	2300      	moveq	r3, #0
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8004a78:	f000 f9b6 	bl	8004de8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	4807      	ldr	r0, [pc, #28]	; (8004a9c <_ZL12MX_I2C1_Initv+0x90>)
 8004a80:	f002 fbdd 	bl	800723e <HAL_I2CEx_ConfigDigitalFilter>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	bf14      	ite	ne
 8004a8a:	2301      	movne	r3, #1
 8004a8c:	2300      	moveq	r3, #0
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8004a94:	f000 f9a8 	bl	8004de8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004a98:	bf00      	nop
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	20000110 	.word	0x20000110
 8004aa0:	40005400 	.word	0x40005400
 8004aa4:	00303d5b 	.word	0x00303d5b

08004aa8 <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004aac:	4b12      	ldr	r3, [pc, #72]	; (8004af8 <_ZL13MX_TIM16_Initv+0x50>)
 8004aae:	4a13      	ldr	r2, [pc, #76]	; (8004afc <_ZL13MX_TIM16_Initv+0x54>)
 8004ab0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 999;
 8004ab2:	4b11      	ldr	r3, [pc, #68]	; (8004af8 <_ZL13MX_TIM16_Initv+0x50>)
 8004ab4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004ab8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004aba:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <_ZL13MX_TIM16_Initv+0x50>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 63;
 8004ac0:	4b0d      	ldr	r3, [pc, #52]	; (8004af8 <_ZL13MX_TIM16_Initv+0x50>)
 8004ac2:	223f      	movs	r2, #63	; 0x3f
 8004ac4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ac6:	4b0c      	ldr	r3, [pc, #48]	; (8004af8 <_ZL13MX_TIM16_Initv+0x50>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004acc:	4b0a      	ldr	r3, [pc, #40]	; (8004af8 <_ZL13MX_TIM16_Initv+0x50>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ad2:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <_ZL13MX_TIM16_Initv+0x50>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004ad8:	4807      	ldr	r0, [pc, #28]	; (8004af8 <_ZL13MX_TIM16_Initv+0x50>)
 8004ada:	f003 fbf9 	bl	80082d0 <HAL_TIM_Base_Init>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	bf14      	ite	ne
 8004ae4:	2301      	movne	r3, #1
 8004ae6:	2300      	moveq	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <_ZL13MX_TIM16_Initv+0x4a>
  {
    Error_Handler();
 8004aee:	f000 f97b 	bl	8004de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004af2:	bf00      	nop
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	2000015c 	.word	0x2000015c
 8004afc:	40014400 	.word	0x40014400

08004b00 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b06:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <_ZL12MX_GPIO_Initv+0x2c>)
 8004b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0a:	4a08      	ldr	r2, [pc, #32]	; (8004b2c <_ZL12MX_GPIO_Initv+0x2c>)
 8004b0c:	f043 0302 	orr.w	r3, r3, #2
 8004b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b12:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <_ZL12MX_GPIO_Initv+0x2c>)
 8004b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	607b      	str	r3, [r7, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]

}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40021000 	.word	0x40021000

08004b30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//Callback: Timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b30:	b590      	push	{r4, r7, lr}
 8004b32:	b09f      	sub	sp, #124	; 0x7c
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
	if ((htim == &htim16) && (ICM42605.gyro_calibration_flag_))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a9d      	ldr	r2, [pc, #628]	; (8004db0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	f040 812d 	bne.w	8004d9c <HAL_TIM_PeriodElapsedCallback+0x26c>
 8004b42:	4b9c      	ldr	r3, [pc, #624]	; (8004db4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004b44:	7e1b      	ldrb	r3, [r3, #24]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 8128 	beq.w	8004d9c <HAL_TIM_PeriodElapsedCallback+0x26c>
	{
		  ICM42605.ReadAcc();
 8004b4c:	4899      	ldr	r0, [pc, #612]	; (8004db4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004b4e:	f7fc f947 	bl	8000de0 <_ZN8ICM426057ReadAccEv>
		  ICM42605.ReadGyro();
 8004b52:	4898      	ldr	r0, [pc, #608]	; (8004db4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004b54:	f7fc fabe 	bl	80010d4 <_ZN8ICM426058ReadGyroEv>

		  R = {{kf_math.variance(ICM42605.acc_[0][0], 100), 0},
 8004b58:	2100      	movs	r1, #0
 8004b5a:	4897      	ldr	r0, [pc, #604]	; (8004db8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004b5c:	f000 f9a2 	bl	8004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2100      	movs	r1, #0
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7fc fd24 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	edd3 7a00 	vldr	s15, [r3]
 8004b70:	2164      	movs	r1, #100	; 0x64
 8004b72:	eeb0 0a67 	vmov.f32	s0, s15
 8004b76:	4891      	ldr	r0, [pc, #580]	; (8004dbc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8004b78:	f7ff f857 	bl	8003c2a <_ZN7kf_math8varianceEfi>
 8004b7c:	eef0 7a40 	vmov.f32	s15, s0
 8004b80:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b90:	2302      	movs	r3, #2
 8004b92:	633b      	str	r3, [r7, #48]	; 0x30
 8004b94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7fc fcc2 	bl	8001522 <_ZNSaIfEC1Ev>
 8004b9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004ba2:	f107 0014 	add.w	r0, r7, #20
 8004ba6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004baa:	ca06      	ldmia	r2, {r1, r2}
 8004bac:	f7fc fcc5 	bl	800153a <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	64bb      	str	r3, [r7, #72]	; 0x48
			   {0, kf_math.variance(ICM42605.acc_[1][1], 100)}};
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	487f      	ldr	r0, [pc, #508]	; (8004db8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004bba:	f000 f973 	bl	8004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fc fcf5 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	edd3 7a00 	vldr	s15, [r3]
 8004bce:	2164      	movs	r1, #100	; 0x64
 8004bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8004bd4:	4879      	ldr	r0, [pc, #484]	; (8004dbc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8004bd6:	f7ff f828 	bl	8003c2a <_ZN7kf_math8varianceEfi>
 8004bda:	eef0 7a40 	vmov.f32	s15, s0
		  R = {{kf_math.variance(ICM42605.acc_[0][0], 100), 0},
 8004bde:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 8004be2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004be6:	643b      	str	r3, [r7, #64]	; 0x40
 8004be8:	2302      	movs	r3, #2
 8004bea:	647b      	str	r3, [r7, #68]	; 0x44
 8004bec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fc fc96 	bl	8001522 <_ZNSaIfEC1Ev>
 8004bf6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004bfa:	f107 0314 	add.w	r3, r7, #20
 8004bfe:	f103 000c 	add.w	r0, r3, #12
 8004c02:	4613      	mov	r3, r2
 8004c04:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004c08:	ca06      	ldmia	r2, {r1, r2}
 8004c0a:	f7fc fc96 	bl	800153a <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8004c0e:	f107 0314 	add.w	r3, r7, #20
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	2302      	movs	r3, #2
 8004c16:	613b      	str	r3, [r7, #16]
			   {0, kf_math.variance(ICM42605.acc_[1][1], 100)}};
 8004c18:	f107 030c 	add.w	r3, r7, #12
 8004c1c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004c20:	4867      	ldr	r0, [pc, #412]	; (8004dc0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8004c22:	f7fc fcab 	bl	800157c <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSESt16initializer_listIS1_E>
		  R = {{kf_math.variance(ICM42605.acc_[0][0], 100), 0},
 8004c26:	f107 0414 	add.w	r4, r7, #20
 8004c2a:	3418      	adds	r4, #24
 8004c2c:	f107 0314 	add.w	r3, r7, #20
 8004c30:	429c      	cmp	r4, r3
 8004c32:	d004      	beq.n	8004c3e <HAL_TIM_PeriodElapsedCallback+0x10e>
 8004c34:	3c0c      	subs	r4, #12
			   {0, kf_math.variance(ICM42605.acc_[1][1], 100)}};
 8004c36:	4620      	mov	r0, r4
 8004c38:	f7fc fbaa 	bl	8001390 <_ZNSt6vectorIfSaIfEED1Ev>
		  R = {{kf_math.variance(ICM42605.acc_[0][0], 100), 0},
 8004c3c:	e7f6      	b.n	8004c2c <HAL_TIM_PeriodElapsedCallback+0xfc>
			   {0, kf_math.variance(ICM42605.acc_[1][1], 100)}};
 8004c3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fc fb7f 	bl	8001346 <_ZNSaIfED1Ev>
 8004c48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7fc fb7a 	bl	8001346 <_ZNSaIfED1Ev>

		  kf.Prediction(ICM42605.gyro_);	//Control vector
 8004c52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004c56:	4957      	ldr	r1, [pc, #348]	; (8004db4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff f983 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8004c5e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004c62:	4619      	mov	r1, r3
 8004c64:	4857      	ldr	r0, [pc, #348]	; (8004dc4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004c66:	f7fe fd0f 	bl	8003688 <_ZN6Kalman10PredictionESt6vectorIS0_IfSaIfEESaIS2_EE>
 8004c6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fc fb3e 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
		  kf.KalmanGain(R);					//Measurement noise vector
 8004c74:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004c78:	4951      	ldr	r1, [pc, #324]	; (8004dc0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff f972 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8004c80:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004c84:	4619      	mov	r1, r3
 8004c86:	484f      	ldr	r0, [pc, #316]	; (8004dc4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004c88:	f7fe fde5 	bl	8003856 <_ZN6Kalman10KalmanGainESt6vectorIS0_IfSaIfEESaIS2_EE>
 8004c8c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fc fb2d 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
		  kf.Update(ICM42605.acc_);
 8004c96:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004c9a:	4947      	ldr	r1, [pc, #284]	; (8004db8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff f961 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8004ca2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4846      	ldr	r0, [pc, #280]	; (8004dc4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004caa:	f7fe febb 	bl	8003a24 <_ZN6Kalman6UpdateESt6vectorIS0_IfSaIfEESaIS2_EE>
 8004cae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fc fb1c 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>

		  //for debugging, print Kalman output, gyro pitch, accelerometer pitch
		  gyro_pitch = ICM42605.gyro_[0][0]*57.296f;
 8004cb8:	2100      	movs	r1, #0
 8004cba:	483e      	ldr	r0, [pc, #248]	; (8004db4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004cbc:	f000 f8f2 	bl	8004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fc fc74 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	edd3 7a00 	vldr	s15, [r3]
 8004cd0:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8004dc8 <HAL_TIM_PeriodElapsedCallback+0x298>
 8004cd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cd8:	4b3c      	ldr	r3, [pc, #240]	; (8004dcc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004cda:	edc3 7a00 	vstr	s15, [r3]
		  acc_pitch = ICM42605.acc_[0][0]*57.296f;
 8004cde:	2100      	movs	r1, #0
 8004ce0:	4835      	ldr	r0, [pc, #212]	; (8004db8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004ce2:	f000 f8df 	bl	8004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2100      	movs	r1, #0
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fc fc61 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	edd3 7a00 	vldr	s15, [r3]
 8004cf6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8004dc8 <HAL_TIM_PeriodElapsedCallback+0x298>
 8004cfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cfe:	4b34      	ldr	r3, [pc, #208]	; (8004dd0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004d00:	edc3 7a00 	vstr	s15, [r3]
		  kalman_pitch = kf.x_e_[0][0]*57.296f;
 8004d04:	2100      	movs	r1, #0
 8004d06:	482f      	ldr	r0, [pc, #188]	; (8004dc4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004d08:	f000 f8cc 	bl	8004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2100      	movs	r1, #0
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fc fc4e 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8004d16:	4603      	mov	r3, r0
 8004d18:	edd3 7a00 	vldr	s15, [r3]
 8004d1c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004dc8 <HAL_TIM_PeriodElapsedCallback+0x298>
 8004d20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d24:	4b2b      	ldr	r3, [pc, #172]	; (8004dd4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8004d26:	edc3 7a00 	vstr	s15, [r3]

		  gyro_roll = ICM42605.gyro_[1][1]*57.296f;
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	4821      	ldr	r0, [pc, #132]	; (8004db4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004d2e:	f000 f8b9 	bl	8004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2101      	movs	r1, #1
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fc fc3b 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	edd3 7a00 	vldr	s15, [r3]
 8004d42:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004dc8 <HAL_TIM_PeriodElapsedCallback+0x298>
 8004d46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d4a:	4b23      	ldr	r3, [pc, #140]	; (8004dd8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004d4c:	edc3 7a00 	vstr	s15, [r3]
		  acc_roll = ICM42605.acc_[1][1]*57.296f;
 8004d50:	2101      	movs	r1, #1
 8004d52:	4819      	ldr	r0, [pc, #100]	; (8004db8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004d54:	f000 f8a6 	bl	8004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fc fc28 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8004d62:	4603      	mov	r3, r0
 8004d64:	edd3 7a00 	vldr	s15, [r3]
 8004d68:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004dc8 <HAL_TIM_PeriodElapsedCallback+0x298>
 8004d6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d70:	4b1a      	ldr	r3, [pc, #104]	; (8004ddc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8004d72:	edc3 7a00 	vstr	s15, [r3]
		  kalman_roll = kf.x_e_[1][1]*57.296f;
 8004d76:	2101      	movs	r1, #1
 8004d78:	4812      	ldr	r0, [pc, #72]	; (8004dc4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004d7a:	f000 f893 	bl	8004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2101      	movs	r1, #1
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fc fc15 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	edd3 7a00 	vldr	s15, [r3]
 8004d8e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004dc8 <HAL_TIM_PeriodElapsedCallback+0x298>
 8004d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d96:	4b12      	ldr	r3, [pc, #72]	; (8004de0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8004d98:	edc3 7a00 	vstr	s15, [r3]
	}
	a++;
 8004d9c:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3301      	adds	r3, #1
 8004da2:	4a10      	ldr	r2, [pc, #64]	; (8004de4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8004da4:	6013      	str	r3, [r2, #0]
}
 8004da6:	bf00      	nop
 8004da8:	377c      	adds	r7, #124	; 0x7c
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd90      	pop	{r4, r7, pc}
 8004dae:	bf00      	nop
 8004db0:	2000015c 	.word	0x2000015c
 8004db4:	2000034c 	.word	0x2000034c
 8004db8:	20000358 	.word	0x20000358
 8004dbc:	200001a8 	.word	0x200001a8
 8004dc0:	20000104 	.word	0x20000104
 8004dc4:	2000038c 	.word	0x2000038c
 8004dc8:	42652f1b 	.word	0x42652f1b
 8004dcc:	200000a4 	.word	0x200000a4
 8004dd0:	200000a8 	.word	0x200000a8
 8004dd4:	200000ac 	.word	0x200000ac
 8004dd8:	20000098 	.word	0x20000098
 8004ddc:	2000009c 	.word	0x2000009c
 8004de0:	200000a0 	.word	0x200000a0
 8004de4:	20000094 	.word	0x20000094

08004de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004dec:	b672      	cpsid	i
}
 8004dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004df0:	e7fe      	b.n	8004df0 <Error_Handler+0x8>

08004df2 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>:
      vector(initializer_list<value_type> __l,
 8004df2:	b5b0      	push	{r4, r5, r7, lr}
 8004df4:	b086      	sub	sp, #24
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	60f8      	str	r0, [r7, #12]
 8004dfa:	1d38      	adds	r0, r7, #4
 8004dfc:	e880 0006 	stmia.w	r0, {r1, r2}
 8004e00:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6839      	ldr	r1, [r7, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff fc5e 	bl	80046c8 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EEC1ERKS3_>
	_M_range_initialize(__l.begin(), __l.end(),
 8004e0c:	1d3b      	adds	r3, r7, #4
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fc fe99 	bl	8001b46 <_ZNKSt16initializer_listISt6vectorIfSaIfEEE5beginEv>
 8004e14:	4604      	mov	r4, r0
 8004e16:	1d3b      	adds	r3, r7, #4
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7fc fea0 	bl	8001b5e <_ZNKSt16initializer_listISt6vectorIfSaIfEEE3endEv>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	462b      	mov	r3, r5
 8004e22:	4621      	mov	r1, r4
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 f850 	bl	8004eca <_ZNSt6vectorIS_IfSaIfEESaIS1_EE19_M_range_initializeIPKS1_EEvT_S7_St20forward_iterator_tag>
      }
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bdb0      	pop	{r4, r5, r7, pc}

08004e34 <_ZNSt6vectorIfSaIfEEC1EjRKfRKS0_>:
      vector(size_type __n, const value_type& __value,
 8004e34:	b590      	push	{r4, r7, lr}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
      : _Base(_S_check_init_len(__n, __a), __a)
 8004e42:	68fc      	ldr	r4, [r7, #12]
 8004e44:	6839      	ldr	r1, [r7, #0]
 8004e46:	68b8      	ldr	r0, [r7, #8]
 8004e48:	f7fc ffda 	bl	8001e00 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	4619      	mov	r1, r3
 8004e52:	4620      	mov	r0, r4
 8004e54:	f7fe f97f 	bl	8003156 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
      { _M_fill_initialize(__n, __value); }
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 f870 	bl	8004f42 <_ZNSt6vectorIfSaIfEE18_M_fill_initializeEjRKf>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd90      	pop	{r4, r7, pc}

08004e6c <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1EjRKS1_RKS2_>:
      vector(size_type __n, const value_type& __value,
 8004e6c:	b590      	push	{r4, r7, lr}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]
      : _Base(_S_check_init_len(__n, __a), __a)
 8004e7a:	68fc      	ldr	r4, [r7, #12]
 8004e7c:	6839      	ldr	r1, [r7, #0]
 8004e7e:	68b8      	ldr	r0, [r7, #8]
 8004e80:	f7fd f9ae 	bl	80021e0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_S_check_init_lenEjRKS2_>
 8004e84:	4603      	mov	r3, r0
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	f7ff f9b1 	bl	80041f2 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EEC1EjRKS3_>
      { _M_fill_initialize(__n, __value); }
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	68b9      	ldr	r1, [r7, #8]
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 f86d 	bl	8004f74 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE18_M_fill_initializeEjRKS1_>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd90      	pop	{r4, r7, pc}

08004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6819      	ldr	r1, [r3, #0]
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	4413      	add	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	440b      	add	r3, r1
      }
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <_ZNSt6vectorIS_IfSaIfEESaIS1_EE19_M_range_initializeIPKS1_EEvT_S7_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8004eca:	b590      	push	{r4, r7, lr}
 8004ecc:	b087      	sub	sp, #28
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	607a      	str	r2, [r7, #4]
 8004ed6:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	68b8      	ldr	r0, [r7, #8]
 8004edc:	f7fd f955 	bl	800218a <_ZSt8distanceIPKSt6vectorIfSaIfEEENSt15iterator_traitsIT_E15difference_typeES6_S6_>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8004ee4:	68fc      	ldr	r4, [r7, #12]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fc fbb0 	bl	800164e <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	6978      	ldr	r0, [r7, #20]
 8004ef4:	f7fd f974 	bl	80021e0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_S_check_init_lenEjRKS2_>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	4619      	mov	r1, r3
 8004efc:	4620      	mov	r0, r4
 8004efe:	f7fd fc17 	bl	8002730 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE11_M_allocateEj>
 8004f02:	4602      	mov	r2, r0
	  this->_M_impl._M_start
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6819      	ldr	r1, [r3, #0]
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	4413      	add	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	18ca      	adds	r2, r1, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fc fb93 	bl	800164e <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004f28:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8004f2a:	4622      	mov	r2, r4
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	68b8      	ldr	r0, [r7, #8]
 8004f30:	f7fd fa01 	bl	8002336 <_ZSt22__uninitialized_copy_aIPKSt6vectorIfSaIfEEPS2_S2_ET0_T_S7_S6_RSaIT1_E>
 8004f34:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	605a      	str	r2, [r3, #4]
	}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd90      	pop	{r4, r7, pc}

08004f42 <_ZNSt6vectorIfSaIfEE18_M_fill_initializeEjRKf>:
      _M_fill_initialize(size_type __n, const value_type& __value)
 8004f42:	b590      	push	{r4, r7, lr}
 8004f44:	b085      	sub	sp, #20
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	607a      	str	r2, [r7, #4]
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fc fbc5 	bl	80016e4 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8004f5a:	4603      	mov	r3, r0
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	68b9      	ldr	r1, [r7, #8]
 8004f60:	4620      	mov	r0, r4
 8004f62:	f000 f820 	bl	8004fa6 <_ZSt24__uninitialized_fill_n_aIPfjffET_S1_T0_RKT1_RSaIT2_E>
 8004f66:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	605a      	str	r2, [r3, #4]
      }
 8004f6c:	bf00      	nop
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd90      	pop	{r4, r7, pc}

08004f74 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE18_M_fill_initializeEjRKS1_>:
      _M_fill_initialize(size_type __n, const value_type& __value)
 8004f74:	b590      	push	{r4, r7, lr}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fc fb61 	bl	800164e <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004f8c:	4603      	mov	r3, r0
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	68b9      	ldr	r1, [r7, #8]
 8004f92:	4620      	mov	r0, r4
 8004f94:	f000 f818 	bl	8004fc8 <_ZSt24__uninitialized_fill_n_aIPSt6vectorIfSaIfEEjS2_S2_ET_S4_T0_RKT1_RSaIT2_E>
 8004f98:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	605a      	str	r2, [r3, #4]
      }
 8004f9e:	bf00      	nop
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd90      	pop	{r4, r7, pc}

08004fa6 <_ZSt24__uninitialized_fill_n_aIPfjffET_S1_T0_RKT1_RSaIT2_E>:
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
	   typename _Tp2>
    inline _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	607a      	str	r2, [r7, #4]
 8004fb2:	603b      	str	r3, [r7, #0]
			     const _Tp& __x, allocator<_Tp2>&)
    { return std::uninitialized_fill_n(__first, __n, __x); }
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	68b9      	ldr	r1, [r7, #8]
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f816 	bl	8004fea <_ZSt20uninitialized_fill_nIPfjfET_S1_T0_RKT1_>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <_ZSt24__uninitialized_fill_n_aIPSt6vectorIfSaIfEEjS2_S2_ET_S4_T0_RKT1_RSaIT2_E>:
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_fill_n(__first, __n, __x); }
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	68b9      	ldr	r1, [r7, #8]
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 f817 	bl	800500e <_ZSt20uninitialized_fill_nIPSt6vectorIfSaIfEEjS2_ET_S4_T0_RKT1_>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <_ZSt20uninitialized_fill_nIPfjfET_S1_T0_RKT1_>:
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b086      	sub	sp, #24
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	60f8      	str	r0, [r7, #12]
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	75fb      	strb	r3, [r7, #23]
	__uninit_fill_n(__first, __n, __x);
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	68b9      	ldr	r1, [r7, #8]
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 f817 	bl	8005032 <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPfjfEET_S3_T0_RKT1_>
 8005004:	4603      	mov	r3, r0
    }
 8005006:	4618      	mov	r0, r3
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <_ZSt20uninitialized_fill_nIPSt6vectorIfSaIfEEjS2_ET_S4_T0_RKT1_>:
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 800500e:	b580      	push	{r7, lr}
 8005010:	b086      	sub	sp, #24
 8005012:	af00      	add	r7, sp, #0
 8005014:	60f8      	str	r0, [r7, #12]
 8005016:	60b9      	str	r1, [r7, #8]
 8005018:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 800501a:	2301      	movs	r3, #1
 800501c:	75fb      	strb	r3, [r7, #23]
	__uninit_fill_n(__first, __n, __x);
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	68b9      	ldr	r1, [r7, #8]
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 f815 	bl	8005052 <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPSt6vectorIfSaIfEEjS4_EET_S6_T0_RKT1_>
 8005028:	4603      	mov	r3, r0
    }
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPfjfEET_S3_T0_RKT1_>:
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
 8005032:	b580      	push	{r7, lr}
 8005034:	b084      	sub	sp, #16
 8005036:	af00      	add	r7, sp, #0
 8005038:	60f8      	str	r0, [r7, #12]
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	607a      	str	r2, [r7, #4]
        { return std::fill_n(__first, __n, __x); }
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 f824 	bl	8005090 <_ZSt6fill_nIPfjfET_S1_T0_RKT1_>
 8005048:	4603      	mov	r3, r0
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPSt6vectorIfSaIfEEjS4_EET_S6_T0_RKT1_>:
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
 8005052:	b580      	push	{r7, lr}
 8005054:	b086      	sub	sp, #24
 8005056:	af00      	add	r7, sp, #0
 8005058:	60f8      	str	r0, [r7, #12]
 800505a:	60b9      	str	r1, [r7, #8]
 800505c:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __first;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	617b      	str	r3, [r7, #20]
	      for (; __n > 0; --__n, (void) ++__cur)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00e      	beq.n	8005086 <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPSt6vectorIfSaIfEEjS4_EET_S6_T0_RKT1_+0x34>
		std::_Construct(std::__addressof(*__cur), __x);
 8005068:	6978      	ldr	r0, [r7, #20]
 800506a:	f7fd fbcb 	bl	8002804 <_ZSt11__addressofISt6vectorIfSaIfEEEPT_RS3_>
 800506e:	4603      	mov	r3, r0
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	4618      	mov	r0, r3
 8005074:	f7fd fe16 	bl	8002ca4 <_ZSt10_ConstructISt6vectorIfSaIfEEJRKS2_EEvPT_DpOT0_>
	      for (; __n > 0; --__n, (void) ++__cur)
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	3b01      	subs	r3, #1
 800507c:	60bb      	str	r3, [r7, #8]
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	330c      	adds	r3, #12
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	e7ed      	b.n	8005062 <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPSt6vectorIfSaIfEEjS4_EET_S6_T0_RKT1_+0x10>
	      return __cur;
 8005086:	697b      	ldr	r3, [r7, #20]
	}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <_ZSt6fill_nIPfjfET_S1_T0_RKT1_>:
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 865. More algorithms that throw away information
  */
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)
      __glibcxx_requires_can_increment(__first, __n);

      return std::__niter_wrap(__first,
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fd fbfd 	bl	800289e <_ZSt12__niter_baseIPfET_S1_>
 80050a4:	4603      	mov	r3, r0
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 f80c 	bl	80050c8 <_ZSt10__fill_n_aIPfjfEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_>
 80050b0:	4602      	mov	r2, r0
 80050b2:	f107 030c 	add.w	r3, r7, #12
 80050b6:	4611      	mov	r1, r2
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7fd fc0d 	bl	80028d8 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 80050be:	4603      	mov	r3, r0
		std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <_ZSt10__fill_n_aIPfjfEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	613b      	str	r3, [r7, #16]
      for (__decltype(__n + 0) __niter = __n;
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	617b      	str	r3, [r7, #20]
	   __niter > 0; --__niter, (void) ++__first)
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d009      	beq.n	80050f8 <_ZSt10__fill_n_aIPfjfEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_+0x30>
	*__first = __tmp;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	601a      	str	r2, [r3, #0]
      for (__decltype(__n + 0) __niter = __n;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	3304      	adds	r3, #4
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	e7f2      	b.n	80050de <_ZSt10__fill_n_aIPfjfEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_+0x16>
      return __first;
 80050f8:	68fb      	ldr	r3, [r7, #12]
    }
 80050fa:	4618      	mov	r0, r3
 80050fc:	371c      	adds	r7, #28
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
	...

08005108 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8005108:	b5b0      	push	{r4, r5, r7, lr}
 800510a:	f5ad 7d26 	sub.w	sp, sp, #664	; 0x298
 800510e:	af04      	add	r7, sp, #16
 8005110:	1d3b      	adds	r3, r7, #4
 8005112:	6018      	str	r0, [r3, #0]
 8005114:	463b      	mov	r3, r7
 8005116:	6019      	str	r1, [r3, #0]
 8005118:	1d3b      	adds	r3, r7, #4
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b01      	cmp	r3, #1
 800511e:	f040 83da 	bne.w	80058d6 <_Z41__static_initialization_and_destruction_0ii+0x7ce>
 8005122:	463b      	mov	r3, r7
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800512a:	4293      	cmp	r3, r2
 800512c:	f040 83d3 	bne.w	80058d6 <_Z41__static_initialization_and_destruction_0ii+0x7ce>
matrix Q= {{0.005, 0}, {0, 0.005}};					//Process noise covariance matrix
 8005130:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005134:	4aa8      	ldr	r2, [pc, #672]	; (80053d8 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800513c:	f04f 0200 	mov.w	r2, #0
 8005140:	605a      	str	r2, [r3, #4]
 8005142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005146:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005150:	2202      	movs	r2, #2
 8005152:	605a      	str	r2, [r3, #4]
 8005154:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005158:	4618      	mov	r0, r3
 800515a:	f7fc f9e2 	bl	8001522 <_ZNSaIfEC1Ev>
 800515e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005162:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005166:	f107 0010 	add.w	r0, r7, #16
 800516a:	ca06      	ldmia	r2, {r1, r2}
 800516c:	f7fc f9e5 	bl	800153a <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8005170:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800517e:	4a96      	ldr	r2, [pc, #600]	; (80053d8 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8005180:	605a      	str	r2, [r3, #4]
 8005182:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005186:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005190:	2202      	movs	r2, #2
 8005192:	605a      	str	r2, [r3, #4]
 8005194:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005198:	4618      	mov	r0, r3
 800519a:	f7fc f9c2 	bl	8001522 <_ZNSaIfEC1Ev>
 800519e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80051a2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80051a6:	f107 0310 	add.w	r3, r7, #16
 80051aa:	f103 000c 	add.w	r0, r3, #12
 80051ae:	460b      	mov	r3, r1
 80051b0:	ca06      	ldmia	r2, {r1, r2}
 80051b2:	f7fc f9c2 	bl	800153a <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 80051b6:	f107 0308 	add.w	r3, r7, #8
 80051ba:	f107 0210 	add.w	r2, r7, #16
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	f107 0308 	add.w	r3, r7, #8
 80051c4:	2202      	movs	r2, #2
 80051c6:	605a      	str	r2, [r3, #4]
 80051c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7fc fa00 	bl	80015d2 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 80051d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80051d6:	f107 0208 	add.w	r2, r7, #8
 80051da:	ca06      	ldmia	r2, {r1, r2}
 80051dc:	487f      	ldr	r0, [pc, #508]	; (80053dc <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 80051de:	f7ff fe08 	bl	8004df2 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
 80051e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fc f858 	bl	800129c <_ZNSaISt6vectorIfSaIfEEED1Ev>
 80051ec:	f107 0410 	add.w	r4, r7, #16
 80051f0:	3418      	adds	r4, #24
 80051f2:	f107 0310 	add.w	r3, r7, #16
 80051f6:	429c      	cmp	r4, r3
 80051f8:	d004      	beq.n	8005204 <_Z41__static_initialization_and_destruction_0ii+0xfc>
 80051fa:	3c0c      	subs	r4, #12
 80051fc:	4620      	mov	r0, r4
 80051fe:	f7fc f8c7 	bl	8001390 <_ZNSt6vectorIfSaIfEED1Ev>
 8005202:	e7f6      	b.n	80051f2 <_Z41__static_initialization_and_destruction_0ii+0xea>
 8005204:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005208:	4618      	mov	r0, r3
 800520a:	f7fc f89c 	bl	8001346 <_ZNSaIfED1Ev>
 800520e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005212:	4618      	mov	r0, r3
 8005214:	f7fc f897 	bl	8001346 <_ZNSaIfED1Ev>
matrix A = {{1, 0}, {0, 1}};						//State transition matrix
 8005218:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800521c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	605a      	str	r2, [r3, #4]
 800522c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005230:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800523a:	2202      	movs	r2, #2
 800523c:	605a      	str	r2, [r3, #4]
 800523e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005242:	4618      	mov	r0, r3
 8005244:	f7fc f96d 	bl	8001522 <_ZNSaIfEC1Ev>
 8005248:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800524c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8005250:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8005254:	ca06      	ldmia	r2, {r1, r2}
 8005256:	f7fc f970 	bl	800153a <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 800525a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005268:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800526c:	605a      	str	r2, [r3, #4]
 800526e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005272:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800527c:	2202      	movs	r2, #2
 800527e:	605a      	str	r2, [r3, #4]
 8005280:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005284:	4618      	mov	r0, r3
 8005286:	f7fc f94c 	bl	8001522 <_ZNSaIfEC1Ev>
 800528a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800528e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005292:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005296:	f103 000c 	add.w	r0, r3, #12
 800529a:	460b      	mov	r3, r1
 800529c:	ca06      	ldmia	r2, {r1, r2}
 800529e:	f7fc f94c 	bl	800153a <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 80052a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80052a6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80052b0:	2202      	movs	r2, #2
 80052b2:	605a      	str	r2, [r3, #4]
 80052b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7fc f98a 	bl	80015d2 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 80052be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80052c2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80052c6:	ca06      	ldmia	r2, {r1, r2}
 80052c8:	4845      	ldr	r0, [pc, #276]	; (80053e0 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80052ca:	f7ff fd92 	bl	8004df2 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
 80052ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fb ffe2 	bl	800129c <_ZNSaISt6vectorIfSaIfEEED1Ev>
 80052d8:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80052dc:	3418      	adds	r4, #24
 80052de:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80052e2:	429c      	cmp	r4, r3
 80052e4:	d004      	beq.n	80052f0 <_Z41__static_initialization_and_destruction_0ii+0x1e8>
 80052e6:	3c0c      	subs	r4, #12
 80052e8:	4620      	mov	r0, r4
 80052ea:	f7fc f851 	bl	8001390 <_ZNSt6vectorIfSaIfEED1Ev>
 80052ee:	e7f6      	b.n	80052de <_Z41__static_initialization_and_destruction_0ii+0x1d6>
 80052f0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7fc f826 	bl	8001346 <_ZNSaIfED1Ev>
 80052fa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fc f821 	bl	8001346 <_ZNSaIfED1Ev>
matrix B = {{0.004, 0}, {0, 0.004}};				//Control input matrix, dt
 8005304:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005308:	4a36      	ldr	r2, [pc, #216]	; (80053e4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	605a      	str	r2, [r3, #4]
 8005316:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800531a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005324:	2202      	movs	r2, #2
 8005326:	605a      	str	r2, [r3, #4]
 8005328:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800532c:	4618      	mov	r0, r3
 800532e:	f7fc f8f8 	bl	8001522 <_ZNSaIfEC1Ev>
 8005332:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005336:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800533a:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 800533e:	ca06      	ldmia	r2, {r1, r2}
 8005340:	f7fc f8fb 	bl	800153a <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8005344:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005352:	4a24      	ldr	r2, [pc, #144]	; (80053e4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8005354:	605a      	str	r2, [r3, #4]
 8005356:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800535a:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005364:	2202      	movs	r2, #2
 8005366:	605a      	str	r2, [r3, #4]
 8005368:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800536c:	4618      	mov	r0, r3
 800536e:	f7fc f8d8 	bl	8001522 <_ZNSaIfEC1Ev>
 8005372:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 8005376:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800537a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800537e:	f103 000c 	add.w	r0, r3, #12
 8005382:	460b      	mov	r3, r1
 8005384:	ca06      	ldmia	r2, {r1, r2}
 8005386:	f7fc f8d8 	bl	800153a <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 800538a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800538e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005398:	2202      	movs	r2, #2
 800539a:	605a      	str	r2, [r3, #4]
 800539c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fc f916 	bl	80015d2 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 80053a6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80053aa:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80053ae:	ca06      	ldmia	r2, {r1, r2}
 80053b0:	480d      	ldr	r0, [pc, #52]	; (80053e8 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80053b2:	f7ff fd1e 	bl	8004df2 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
 80053b6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fb ff6e 	bl	800129c <_ZNSaISt6vectorIfSaIfEEED1Ev>
 80053c0:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 80053c4:	3418      	adds	r4, #24
 80053c6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80053ca:	429c      	cmp	r4, r3
 80053cc:	d00e      	beq.n	80053ec <_Z41__static_initialization_and_destruction_0ii+0x2e4>
 80053ce:	3c0c      	subs	r4, #12
 80053d0:	4620      	mov	r0, r4
 80053d2:	f7fb ffdd 	bl	8001390 <_ZNSt6vectorIfSaIfEED1Ev>
 80053d6:	e7f6      	b.n	80053c6 <_Z41__static_initialization_and_destruction_0ii+0x2be>
 80053d8:	3ba3d70a 	.word	0x3ba3d70a
 80053dc:	200000b0 	.word	0x200000b0
 80053e0:	200000bc 	.word	0x200000bc
 80053e4:	3b83126f 	.word	0x3b83126f
 80053e8:	200000c8 	.word	0x200000c8
 80053ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7fb ffa8 	bl	8001346 <_ZNSaIfED1Ev>
 80053f6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fb ffa3 	bl	8001346 <_ZNSaIfED1Ev>
matrix x_e = {{10, 0}, {0, 10}};					//initial value
 8005400:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005404:	4ada      	ldr	r2, [pc, #872]	; (8005770 <_Z41__static_initialization_and_destruction_0ii+0x668>)
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800540c:	f04f 0200 	mov.w	r2, #0
 8005410:	605a      	str	r2, [r3, #4]
 8005412:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8005416:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8005420:	2202      	movs	r2, #2
 8005422:	605a      	str	r2, [r3, #4]
 8005424:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8005428:	4618      	mov	r0, r3
 800542a:	f7fc f87a 	bl	8001522 <_ZNSaIfEC1Ev>
 800542e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8005432:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8005436:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 800543a:	ca06      	ldmia	r2, {r1, r2}
 800543c:	f7fc f87d 	bl	800153a <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8005440:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800544e:	4ac8      	ldr	r2, [pc, #800]	; (8005770 <_Z41__static_initialization_and_destruction_0ii+0x668>)
 8005450:	605a      	str	r2, [r3, #4]
 8005452:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005456:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005460:	2202      	movs	r2, #2
 8005462:	605a      	str	r2, [r3, #4]
 8005464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005468:	4618      	mov	r0, r3
 800546a:	f7fc f85a 	bl	8001522 <_ZNSaIfEC1Ev>
 800546e:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8005472:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8005476:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800547a:	f103 000c 	add.w	r0, r3, #12
 800547e:	460b      	mov	r3, r1
 8005480:	ca06      	ldmia	r2, {r1, r2}
 8005482:	f7fc f85a 	bl	800153a <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8005486:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800548a:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005494:	2202      	movs	r2, #2
 8005496:	605a      	str	r2, [r3, #4]
 8005498:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800549c:	4618      	mov	r0, r3
 800549e:	f7fc f898 	bl	80015d2 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 80054a2:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80054a6:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 80054aa:	ca06      	ldmia	r2, {r1, r2}
 80054ac:	48b1      	ldr	r0, [pc, #708]	; (8005774 <_Z41__static_initialization_and_destruction_0ii+0x66c>)
 80054ae:	f7ff fca0 	bl	8004df2 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
 80054b2:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fb fef0 	bl	800129c <_ZNSaISt6vectorIfSaIfEEED1Ev>
 80054bc:	f107 04f4 	add.w	r4, r7, #244	; 0xf4
 80054c0:	3418      	adds	r4, #24
 80054c2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80054c6:	429c      	cmp	r4, r3
 80054c8:	d004      	beq.n	80054d4 <_Z41__static_initialization_and_destruction_0ii+0x3cc>
 80054ca:	3c0c      	subs	r4, #12
 80054cc:	4620      	mov	r0, r4
 80054ce:	f7fb ff5f 	bl	8001390 <_ZNSt6vectorIfSaIfEED1Ev>
 80054d2:	e7f6      	b.n	80054c2 <_Z41__static_initialization_and_destruction_0ii+0x3ba>
 80054d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d8:	4618      	mov	r0, r3
 80054da:	f7fb ff34 	bl	8001346 <_ZNSaIfED1Ev>
 80054de:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fb ff2f 	bl	8001346 <_ZNSaIfED1Ev>
matrix p_e = {{0.10, 0}, {0, 0.10}};				//State error variance
 80054e8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80054ec:	4aa2      	ldr	r2, [pc, #648]	; (8005778 <_Z41__static_initialization_and_destruction_0ii+0x670>)
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	605a      	str	r2, [r3, #4]
 80054fa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80054fe:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005508:	2202      	movs	r2, #2
 800550a:	605a      	str	r2, [r3, #4]
 800550c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005510:	4618      	mov	r0, r3
 8005512:	f7fc f806 	bl	8001522 <_ZNSaIfEC1Ev>
 8005516:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800551a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800551e:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8005522:	ca06      	ldmia	r2, {r1, r2}
 8005524:	f7fc f809 	bl	800153a <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8005528:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800552c:	f04f 0200 	mov.w	r2, #0
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8005536:	4a90      	ldr	r2, [pc, #576]	; (8005778 <_Z41__static_initialization_and_destruction_0ii+0x670>)
 8005538:	605a      	str	r2, [r3, #4]
 800553a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800553e:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8005548:	2202      	movs	r2, #2
 800554a:	605a      	str	r2, [r3, #4]
 800554c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8005550:	4618      	mov	r0, r3
 8005552:	f7fb ffe6 	bl	8001522 <_ZNSaIfEC1Ev>
 8005556:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 800555a:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 800555e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005562:	f103 000c 	add.w	r0, r3, #12
 8005566:	460b      	mov	r3, r1
 8005568:	ca06      	ldmia	r2, {r1, r2}
 800556a:	f7fb ffe6 	bl	800153a <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 800556e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005572:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800557c:	2202      	movs	r2, #2
 800557e:	605a      	str	r2, [r3, #4]
 8005580:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8005584:	4618      	mov	r0, r3
 8005586:	f7fc f824 	bl	80015d2 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 800558a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800558e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005592:	ca06      	ldmia	r2, {r1, r2}
 8005594:	4879      	ldr	r0, [pc, #484]	; (800577c <_Z41__static_initialization_and_destruction_0ii+0x674>)
 8005596:	f7ff fc2c 	bl	8004df2 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
 800559a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fb fe7c 	bl	800129c <_ZNSaISt6vectorIfSaIfEEED1Ev>
 80055a4:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 80055a8:	3418      	adds	r4, #24
 80055aa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80055ae:	429c      	cmp	r4, r3
 80055b0:	d004      	beq.n	80055bc <_Z41__static_initialization_and_destruction_0ii+0x4b4>
 80055b2:	3c0c      	subs	r4, #12
 80055b4:	4620      	mov	r0, r4
 80055b6:	f7fb feeb 	bl	8001390 <_ZNSt6vectorIfSaIfEED1Ev>
 80055ba:	e7f6      	b.n	80055aa <_Z41__static_initialization_and_destruction_0ii+0x4a2>
 80055bc:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fb fec0 	bl	8001346 <_ZNSaIfED1Ev>
 80055c6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fb febb 	bl	8001346 <_ZNSaIfED1Ev>
matrix I = {{1, 0}, {0, 1}};						//Identity matrix
 80055d0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80055d4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 80055d8:	f04f 0300 	mov.w	r3, #0
 80055dc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80055e0:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80055e4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80055e8:	2302      	movs	r3, #2
 80055ea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80055ee:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fb ff95 	bl	8001522 <_ZNSaIfEC1Ev>
 80055f8:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80055fc:	f507 70c6 	add.w	r0, r7, #396	; 0x18c
 8005600:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8005604:	ca06      	ldmia	r2, {r1, r2}
 8005606:	f7fb ff98 	bl	800153a <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 800560a:	f04f 0300 	mov.w	r3, #0
 800560e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005612:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005616:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800561a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800561e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8005622:	2302      	movs	r3, #2
 8005624:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005628:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800562c:	4618      	mov	r0, r3
 800562e:	f7fb ff78 	bl	8001522 <_ZNSaIfEC1Ev>
 8005632:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8005636:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800563a:	f103 000c 	add.w	r0, r3, #12
 800563e:	4613      	mov	r3, r2
 8005640:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8005644:	ca06      	ldmia	r2, {r1, r2}
 8005646:	f7fb ff78 	bl	800153a <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 800564a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800564e:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8005658:	2202      	movs	r2, #2
 800565a:	605a      	str	r2, [r3, #4]
 800565c:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8005660:	4618      	mov	r0, r3
 8005662:	f7fb ffb6 	bl	80015d2 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 8005666:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800566a:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 800566e:	ca06      	ldmia	r2, {r1, r2}
 8005670:	4843      	ldr	r0, [pc, #268]	; (8005780 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 8005672:	f7ff fbbe 	bl	8004df2 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
 8005676:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800567a:	4618      	mov	r0, r3
 800567c:	f7fb fe0e 	bl	800129c <_ZNSaISt6vectorIfSaIfEEED1Ev>
 8005680:	f507 74c6 	add.w	r4, r7, #396	; 0x18c
 8005684:	3418      	adds	r4, #24
 8005686:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800568a:	429c      	cmp	r4, r3
 800568c:	d004      	beq.n	8005698 <_Z41__static_initialization_and_destruction_0ii+0x590>
 800568e:	3c0c      	subs	r4, #12
 8005690:	4620      	mov	r0, r4
 8005692:	f7fb fe7d 	bl	8001390 <_ZNSt6vectorIfSaIfEED1Ev>
 8005696:	e7f6      	b.n	8005686 <_Z41__static_initialization_and_destruction_0ii+0x57e>
 8005698:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800569c:	4618      	mov	r0, r3
 800569e:	f7fb fe52 	bl	8001346 <_ZNSaIfED1Ev>
 80056a2:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fb fe4d 	bl	8001346 <_ZNSaIfED1Ev>
matrix H = {{1, 0}, {0, 1}};						//Measurement matrix
 80056ac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80056b0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80056bc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80056c0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80056c4:	2302      	movs	r3, #2
 80056c6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 80056ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fb ff27 	bl	8001522 <_ZNSaIfEC1Ev>
 80056d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d8:	f507 70ec 	add.w	r0, r7, #472	; 0x1d8
 80056dc:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 80056e0:	ca06      	ldmia	r2, {r1, r2}
 80056e2:	f7fb ff2a 	bl	800153a <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 80056e6:	f04f 0300 	mov.w	r3, #0
 80056ea:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80056ee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80056f2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80056f6:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80056fa:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80056fe:	2302      	movs	r3, #2
 8005700:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8005704:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8005708:	4618      	mov	r0, r3
 800570a:	f7fb ff0a 	bl	8001522 <_ZNSaIfEC1Ev>
 800570e:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8005712:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8005716:	f103 000c 	add.w	r0, r3, #12
 800571a:	4613      	mov	r3, r2
 800571c:	f507 7201 	add.w	r2, r7, #516	; 0x204
 8005720:	ca06      	ldmia	r2, {r1, r2}
 8005722:	f7fb ff0a 	bl	800153a <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8005726:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800572a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800572e:	2302      	movs	r3, #2
 8005730:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8005734:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005738:	4618      	mov	r0, r3
 800573a:	f7fb ff4a 	bl	80015d2 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 800573e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005742:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8005746:	ca06      	ldmia	r2, {r1, r2}
 8005748:	480e      	ldr	r0, [pc, #56]	; (8005784 <_Z41__static_initialization_and_destruction_0ii+0x67c>)
 800574a:	f7ff fb52 	bl	8004df2 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
 800574e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005752:	4618      	mov	r0, r3
 8005754:	f7fb fda2 	bl	800129c <_ZNSaISt6vectorIfSaIfEEED1Ev>
 8005758:	f507 74ec 	add.w	r4, r7, #472	; 0x1d8
 800575c:	3418      	adds	r4, #24
 800575e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8005762:	429c      	cmp	r4, r3
 8005764:	d010      	beq.n	8005788 <_Z41__static_initialization_and_destruction_0ii+0x680>
 8005766:	3c0c      	subs	r4, #12
 8005768:	4620      	mov	r0, r4
 800576a:	f7fb fe11 	bl	8001390 <_ZNSt6vectorIfSaIfEED1Ev>
 800576e:	e7f6      	b.n	800575e <_Z41__static_initialization_and_destruction_0ii+0x656>
 8005770:	41200000 	.word	0x41200000
 8005774:	200000d4 	.word	0x200000d4
 8005778:	3dcccccd 	.word	0x3dcccccd
 800577c:	200000e0 	.word	0x200000e0
 8005780:	200000ec 	.word	0x200000ec
 8005784:	200000f8 	.word	0x200000f8
 8005788:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800578c:	4618      	mov	r0, r3
 800578e:	f7fb fdda 	bl	8001346 <_ZNSaIfED1Ev>
 8005792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005796:	4618      	mov	r0, r3
 8005798:	f7fb fdd5 	bl	8001346 <_ZNSaIfED1Ev>
matrix R(vector_size , matrix_1D (vector_size, 0));	//Measurement noise matrix
 800579c:	4b66      	ldr	r3, [pc, #408]	; (8005938 <_Z41__static_initialization_and_destruction_0ii+0x830>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	461c      	mov	r4, r3
 80057a2:	4b65      	ldr	r3, [pc, #404]	; (8005938 <_Z41__static_initialization_and_destruction_0ii+0x830>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	461d      	mov	r5, r3
 80057a8:	f04f 0300 	mov.w	r3, #0
 80057ac:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 80057b0:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fb feb4 	bl	8001522 <_ZNSaIfEC1Ev>
 80057ba:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80057be:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80057c2:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 80057c6:	4629      	mov	r1, r5
 80057c8:	f7ff fb34 	bl	8004e34 <_ZNSt6vectorIfSaIfEEC1EjRKfRKS0_>
 80057cc:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7fb fefe 	bl	80015d2 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 80057d6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80057da:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 80057de:	4621      	mov	r1, r4
 80057e0:	4856      	ldr	r0, [pc, #344]	; (800593c <_Z41__static_initialization_and_destruction_0ii+0x834>)
 80057e2:	f7ff fb43 	bl	8004e6c <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1EjRKS1_RKS2_>
 80057e6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fb fd56 	bl	800129c <_ZNSaISt6vectorIfSaIfEEED1Ev>
 80057f0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fb fdcb 	bl	8001390 <_ZNSt6vectorIfSaIfEED1Ev>
 80057fa:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fb fda1 	bl	8001346 <_ZNSaIfED1Ev>
kf_math kf_math;
 8005804:	484e      	ldr	r0, [pc, #312]	; (8005940 <_Z41__static_initialization_and_destruction_0ii+0x838>)
 8005806:	f7fe f9e7 	bl	8003bd8 <_ZN7kf_mathC1Ev>
ICM42605 ICM42605;
 800580a:	484e      	ldr	r0, [pc, #312]	; (8005944 <_Z41__static_initialization_and_destruction_0ii+0x83c>)
 800580c:	f7fb fa4e 	bl	8000cac <_ZN8ICM42605C1Ev>
Kalman kf(Q, A, B, x_e, p_e, I, H);
 8005810:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8005814:	494c      	ldr	r1, [pc, #304]	; (8005948 <_Z41__static_initialization_and_destruction_0ii+0x840>)
 8005816:	4618      	mov	r0, r3
 8005818:	f7fe fba4 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 800581c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8005820:	494a      	ldr	r1, [pc, #296]	; (800594c <_Z41__static_initialization_and_destruction_0ii+0x844>)
 8005822:	4618      	mov	r0, r3
 8005824:	f7fe fb9e 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8005828:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800582c:	4948      	ldr	r1, [pc, #288]	; (8005950 <_Z41__static_initialization_and_destruction_0ii+0x848>)
 800582e:	4618      	mov	r0, r3
 8005830:	f7fe fb98 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8005834:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005838:	4946      	ldr	r1, [pc, #280]	; (8005954 <_Z41__static_initialization_and_destruction_0ii+0x84c>)
 800583a:	4618      	mov	r0, r3
 800583c:	f7fe fb92 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8005840:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8005844:	4944      	ldr	r1, [pc, #272]	; (8005958 <_Z41__static_initialization_and_destruction_0ii+0x850>)
 8005846:	4618      	mov	r0, r3
 8005848:	f7fe fb8c 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 800584c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8005850:	4942      	ldr	r1, [pc, #264]	; (800595c <_Z41__static_initialization_and_destruction_0ii+0x854>)
 8005852:	4618      	mov	r0, r3
 8005854:	f7fe fb86 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8005858:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800585c:	4940      	ldr	r1, [pc, #256]	; (8005960 <_Z41__static_initialization_and_destruction_0ii+0x858>)
 800585e:	4618      	mov	r0, r3
 8005860:	f7fe fb80 	bl	8003f64 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8005864:	f507 7013 	add.w	r0, r7, #588	; 0x24c
 8005868:	f507 7210 	add.w	r2, r7, #576	; 0x240
 800586c:	f507 710d 	add.w	r1, r7, #564	; 0x234
 8005870:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8005874:	9303      	str	r3, [sp, #12]
 8005876:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800587a:	9302      	str	r3, [sp, #8]
 800587c:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8005880:	9301      	str	r3, [sp, #4]
 8005882:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	4603      	mov	r3, r0
 800588a:	4836      	ldr	r0, [pc, #216]	; (8005964 <_Z41__static_initialization_and_destruction_0ii+0x85c>)
 800588c:	f7fd fe40 	bl	8003510 <_ZN6KalmanC1ESt6vectorIS0_IfSaIfEESaIS2_EES4_S4_S4_S4_S4_S4_>
 8005890:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8005894:	4618      	mov	r0, r3
 8005896:	f7fb fd2b 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 800589a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fb fd26 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80058a4:	f507 7319 	add.w	r3, r7, #612	; 0x264
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7fb fd21 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80058ae:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fb fd1c 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80058b8:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80058bc:	4618      	mov	r0, r3
 80058be:	f7fb fd17 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80058c2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fb fd12 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80058cc:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fb fd0d 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80058d6:	1d3b      	adds	r3, r7, #4
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d126      	bne.n	800592c <_Z41__static_initialization_and_destruction_0ii+0x824>
 80058de:	463b      	mov	r3, r7
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d120      	bne.n	800592c <_Z41__static_initialization_and_destruction_0ii+0x824>
 80058ea:	481e      	ldr	r0, [pc, #120]	; (8005964 <_Z41__static_initialization_and_destruction_0ii+0x85c>)
 80058ec:	f7fd fe80 	bl	80035f0 <_ZN6KalmanD1Ev>
ICM42605 ICM42605;
 80058f0:	4814      	ldr	r0, [pc, #80]	; (8005944 <_Z41__static_initialization_and_destruction_0ii+0x83c>)
 80058f2:	f7fb fa10 	bl	8000d16 <_ZN8ICM42605D1Ev>
kf_math kf_math;
 80058f6:	4812      	ldr	r0, [pc, #72]	; (8005940 <_Z41__static_initialization_and_destruction_0ii+0x838>)
 80058f8:	f7fe f98c 	bl	8003c14 <_ZN7kf_mathD1Ev>
matrix R(vector_size , matrix_1D (vector_size, 0));	//Measurement noise matrix
 80058fc:	480f      	ldr	r0, [pc, #60]	; (800593c <_Z41__static_initialization_and_destruction_0ii+0x834>)
 80058fe:	f7fb fcf7 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
matrix H = {{1, 0}, {0, 1}};						//Measurement matrix
 8005902:	4817      	ldr	r0, [pc, #92]	; (8005960 <_Z41__static_initialization_and_destruction_0ii+0x858>)
 8005904:	f7fb fcf4 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
matrix I = {{1, 0}, {0, 1}};						//Identity matrix
 8005908:	4814      	ldr	r0, [pc, #80]	; (800595c <_Z41__static_initialization_and_destruction_0ii+0x854>)
 800590a:	f7fb fcf1 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
matrix p_e = {{0.10, 0}, {0, 0.10}};				//State error variance
 800590e:	4812      	ldr	r0, [pc, #72]	; (8005958 <_Z41__static_initialization_and_destruction_0ii+0x850>)
 8005910:	f7fb fcee 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
matrix x_e = {{10, 0}, {0, 10}};					//initial value
 8005914:	480f      	ldr	r0, [pc, #60]	; (8005954 <_Z41__static_initialization_and_destruction_0ii+0x84c>)
 8005916:	f7fb fceb 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
matrix B = {{0.004, 0}, {0, 0.004}};				//Control input matrix, dt
 800591a:	480d      	ldr	r0, [pc, #52]	; (8005950 <_Z41__static_initialization_and_destruction_0ii+0x848>)
 800591c:	f7fb fce8 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
matrix A = {{1, 0}, {0, 1}};						//State transition matrix
 8005920:	480a      	ldr	r0, [pc, #40]	; (800594c <_Z41__static_initialization_and_destruction_0ii+0x844>)
 8005922:	f7fb fce5 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
matrix Q= {{0.005, 0}, {0, 0.005}};					//Process noise covariance matrix
 8005926:	4808      	ldr	r0, [pc, #32]	; (8005948 <_Z41__static_initialization_and_destruction_0ii+0x840>)
 8005928:	f7fb fce2 	bl	80012f0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
}
 800592c:	bf00      	nop
 800592e:	f507 7722 	add.w	r7, r7, #648	; 0x288
 8005932:	46bd      	mov	sp, r7
 8005934:	bdb0      	pop	{r4, r5, r7, pc}
 8005936:	bf00      	nop
 8005938:	20000000 	.word	0x20000000
 800593c:	20000104 	.word	0x20000104
 8005940:	200001a8 	.word	0x200001a8
 8005944:	2000034c 	.word	0x2000034c
 8005948:	200000b0 	.word	0x200000b0
 800594c:	200000bc 	.word	0x200000bc
 8005950:	200000c8 	.word	0x200000c8
 8005954:	200000d4 	.word	0x200000d4
 8005958:	200000e0 	.word	0x200000e0
 800595c:	200000ec 	.word	0x200000ec
 8005960:	200000f8 	.word	0x200000f8
 8005964:	2000038c 	.word	0x2000038c

08005968 <_GLOBAL__sub_I_vector_size>:
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
 800596c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005970:	2001      	movs	r0, #1
 8005972:	f7ff fbc9 	bl	8005108 <_Z41__static_initialization_and_destruction_0ii>
 8005976:	bd80      	pop	{r7, pc}

08005978 <_GLOBAL__sub_D_vector_size>:
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
 800597c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005980:	2000      	movs	r0, #0
 8005982:	f7ff fbc1 	bl	8005108 <_Z41__static_initialization_and_destruction_0ii>
 8005986:	bd80      	pop	{r7, pc}

08005988 <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_>:
extern int vector_size;

//operators
//Addition operation
matrix operator +(matrix p, matrix q)
{
 8005988:	b5b0      	push	{r4, r5, r7, lr}
 800598a:	ed2d 8b02 	vpush	{d8}
 800598e:	b08c      	sub	sp, #48	; 0x30
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
	matrix t(vector_size , matrix_1D (vector_size, 0));
 8005998:	4b3d      	ldr	r3, [pc, #244]	; (8005a90 <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_+0x108>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	461c      	mov	r4, r3
 800599e:	4b3c      	ldr	r3, [pc, #240]	; (8005a90 <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_+0x108>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	461d      	mov	r5, r3
 80059a4:	f04f 0300 	mov.w	r3, #0
 80059a8:	61fb      	str	r3, [r7, #28]
 80059aa:	f107 0320 	add.w	r3, r7, #32
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fb fdb7 	bl	8001522 <_ZNSaIfEC1Ev>
 80059b4:	f107 0320 	add.w	r3, r7, #32
 80059b8:	f107 021c 	add.w	r2, r7, #28
 80059bc:	f107 0010 	add.w	r0, r7, #16
 80059c0:	4629      	mov	r1, r5
 80059c2:	f7ff fa37 	bl	8004e34 <_ZNSt6vectorIfSaIfEEC1EjRKfRKS0_>
 80059c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fb fe01 	bl	80015d2 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 80059d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059d4:	f107 0210 	add.w	r2, r7, #16
 80059d8:	4621      	mov	r1, r4
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f7ff fa46 	bl	8004e6c <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1EjRKS1_RKS2_>
 80059e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7fb fc59 	bl	800129c <_ZNSaISt6vectorIfSaIfEEED1Ev>
 80059ea:	f107 0310 	add.w	r3, r7, #16
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fb fcce 	bl	8001390 <_ZNSt6vectorIfSaIfEED1Ev>
 80059f4:	f107 0320 	add.w	r3, r7, #32
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7fb fca4 	bl	8001346 <_ZNSaIfED1Ev>
	for (int i = 0; i<vector_size; i++)
 80059fe:	2300      	movs	r3, #0
 8005a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a02:	4b23      	ldr	r3, [pc, #140]	; (8005a90 <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_+0x108>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	da3a      	bge.n	8005a82 <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_+0xfa>
	{
		for (int j = 0; j<vector_size; j++)
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a10:	4b1f      	ldr	r3, [pc, #124]	; (8005a90 <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_+0x108>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a16:	429a      	cmp	r2, r3
 8005a18:	da2f      	bge.n	8005a7a <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_+0xf2>
			t[i][j] = (p[i][j]+q[i][j]);
 8005a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	68b8      	ldr	r0, [r7, #8]
 8005a20:	f7ff fa40 	bl	8004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8005a24:	4602      	mov	r2, r0
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	f7fb fdc1 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8005a30:	4603      	mov	r3, r0
 8005a32:	edd3 8a00 	vldr	s17, [r3]
 8005a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a38:	4619      	mov	r1, r3
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7ff fa32 	bl	8004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8005a40:	4602      	mov	r2, r0
 8005a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a44:	4619      	mov	r1, r3
 8005a46:	4610      	mov	r0, r2
 8005a48:	f7fb fdb3 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	ed93 8a00 	vldr	s16, [r3]
 8005a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a54:	4619      	mov	r1, r3
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f7ff fa24 	bl	8004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	4619      	mov	r1, r3
 8005a62:	4610      	mov	r0, r2
 8005a64:	f7fb fda5 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	ee78 7a88 	vadd.f32	s15, s17, s16
 8005a6e:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j<vector_size; j++)
 8005a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a74:	3301      	adds	r3, #1
 8005a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a78:	e7ca      	b.n	8005a10 <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_+0x88>
	for (int i = 0; i<vector_size; i++)
 8005a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a80:	e7bf      	b.n	8005a02 <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_+0x7a>
	}
		return t;
 8005a82:	bf00      	nop
}
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	3730      	adds	r7, #48	; 0x30
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	ecbd 8b02 	vpop	{d8}
 8005a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8005a90:	20000000 	.word	0x20000000

08005a94 <_ZmiSt6vectorIS_IfSaIfEESaIS1_EES3_>:

//Difference operator
matrix operator -(matrix p, matrix q)
{
 8005a94:	b5b0      	push	{r4, r5, r7, lr}
 8005a96:	ed2d 8b02 	vpush	{d8}
 8005a9a:	b08c      	sub	sp, #48	; 0x30
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
	matrix t( vector_size , matrix_1D (vector_size, 0));
 8005aa4:	4b3d      	ldr	r3, [pc, #244]	; (8005b9c <_ZmiSt6vectorIS_IfSaIfEESaIS1_EES3_+0x108>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	461c      	mov	r4, r3
 8005aaa:	4b3c      	ldr	r3, [pc, #240]	; (8005b9c <_ZmiSt6vectorIS_IfSaIfEESaIS1_EES3_+0x108>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	461d      	mov	r5, r3
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	61fb      	str	r3, [r7, #28]
 8005ab6:	f107 0320 	add.w	r3, r7, #32
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fb fd31 	bl	8001522 <_ZNSaIfEC1Ev>
 8005ac0:	f107 0320 	add.w	r3, r7, #32
 8005ac4:	f107 021c 	add.w	r2, r7, #28
 8005ac8:	f107 0010 	add.w	r0, r7, #16
 8005acc:	4629      	mov	r1, r5
 8005ace:	f7ff f9b1 	bl	8004e34 <_ZNSt6vectorIfSaIfEEC1EjRKfRKS0_>
 8005ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fb fd7b 	bl	80015d2 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 8005adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ae0:	f107 0210 	add.w	r2, r7, #16
 8005ae4:	4621      	mov	r1, r4
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f7ff f9c0 	bl	8004e6c <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1EjRKS1_RKS2_>
 8005aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fb fbd3 	bl	800129c <_ZNSaISt6vectorIfSaIfEEED1Ev>
 8005af6:	f107 0310 	add.w	r3, r7, #16
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fb fc48 	bl	8001390 <_ZNSt6vectorIfSaIfEED1Ev>
 8005b00:	f107 0320 	add.w	r3, r7, #32
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fb fc1e 	bl	8001346 <_ZNSaIfED1Ev>
	for (int i = 0; i<vector_size; i++)
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b0e:	4b23      	ldr	r3, [pc, #140]	; (8005b9c <_ZmiSt6vectorIS_IfSaIfEESaIS1_EES3_+0x108>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b14:	429a      	cmp	r2, r3
 8005b16:	da3a      	bge.n	8005b8e <_ZmiSt6vectorIS_IfSaIfEESaIS1_EES3_+0xfa>
	{
		for (int j = 0; j<vector_size; j++)
 8005b18:	2300      	movs	r3, #0
 8005b1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b1c:	4b1f      	ldr	r3, [pc, #124]	; (8005b9c <_ZmiSt6vectorIS_IfSaIfEESaIS1_EES3_+0x108>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b22:	429a      	cmp	r2, r3
 8005b24:	da2f      	bge.n	8005b86 <_ZmiSt6vectorIS_IfSaIfEESaIS1_EES3_+0xf2>
			t[i][j] = (p[i][j]-q[i][j]);
 8005b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b28:	4619      	mov	r1, r3
 8005b2a:	68b8      	ldr	r0, [r7, #8]
 8005b2c:	f7ff f9ba 	bl	8004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8005b30:	4602      	mov	r2, r0
 8005b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b34:	4619      	mov	r1, r3
 8005b36:	4610      	mov	r0, r2
 8005b38:	f7fb fd3b 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	edd3 8a00 	vldr	s17, [r3]
 8005b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b44:	4619      	mov	r1, r3
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7ff f9ac 	bl	8004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	4619      	mov	r1, r3
 8005b52:	4610      	mov	r0, r2
 8005b54:	f7fb fd2d 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	ed93 8a00 	vldr	s16, [r3]
 8005b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b60:	4619      	mov	r1, r3
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f7ff f99e 	bl	8004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4610      	mov	r0, r2
 8005b70:	f7fb fd1f 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8005b74:	4603      	mov	r3, r0
 8005b76:	ee78 7ac8 	vsub.f32	s15, s17, s16
 8005b7a:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j<vector_size; j++)
 8005b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b80:	3301      	adds	r3, #1
 8005b82:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b84:	e7ca      	b.n	8005b1c <_ZmiSt6vectorIS_IfSaIfEESaIS1_EES3_+0x88>
	for (int i = 0; i<vector_size; i++)
 8005b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b88:	3301      	adds	r3, #1
 8005b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b8c:	e7bf      	b.n	8005b0e <_ZmiSt6vectorIS_IfSaIfEESaIS1_EES3_+0x7a>
	}
		return t;
 8005b8e:	bf00      	nop
}
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	3730      	adds	r7, #48	; 0x30
 8005b94:	46bd      	mov	sp, r7
 8005b96:	ecbd 8b02 	vpop	{d8}
 8005b9a:	bdb0      	pop	{r4, r5, r7, pc}
 8005b9c:	20000000 	.word	0x20000000

08005ba0 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_>:

////multiplication operator
matrix operator*(matrix Mat_1, matrix Mat_2)
{
 8005ba0:	b5b0      	push	{r4, r5, r7, lr}
 8005ba2:	ed2d 8b02 	vpush	{d8}
 8005ba6:	b08e      	sub	sp, #56	; 0x38
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]

	matrix Mat_3( vector_size , matrix_1D (vector_size, 0));
 8005bb0:	4b4c      	ldr	r3, [pc, #304]	; (8005ce4 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_+0x144>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	461c      	mov	r4, r3
 8005bb6:	4b4b      	ldr	r3, [pc, #300]	; (8005ce4 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_+0x144>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	461d      	mov	r5, r3
 8005bbc:	f04f 0300 	mov.w	r3, #0
 8005bc0:	623b      	str	r3, [r7, #32]
 8005bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fb fcab 	bl	8001522 <_ZNSaIfEC1Ev>
 8005bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bd0:	f107 0220 	add.w	r2, r7, #32
 8005bd4:	f107 0014 	add.w	r0, r7, #20
 8005bd8:	4629      	mov	r1, r5
 8005bda:	f7ff f92b 	bl	8004e34 <_ZNSt6vectorIfSaIfEEC1EjRKfRKS0_>
 8005bde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fb fcf5 	bl	80015d2 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 8005be8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bec:	f107 0214 	add.w	r2, r7, #20
 8005bf0:	4621      	mov	r1, r4
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f7ff f93a 	bl	8004e6c <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1EjRKS1_RKS2_>
 8005bf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7fb fb4d 	bl	800129c <_ZNSaISt6vectorIfSaIfEEED1Ev>
 8005c02:	f107 0314 	add.w	r3, r7, #20
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fb fbc2 	bl	8001390 <_ZNSt6vectorIfSaIfEED1Ev>
 8005c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fb fb98 	bl	8001346 <_ZNSaIfED1Ev>
    for(int i=0; i<vector_size;i++)
 8005c16:	2300      	movs	r3, #0
 8005c18:	637b      	str	r3, [r7, #52]	; 0x34
 8005c1a:	4b32      	ldr	r3, [pc, #200]	; (8005ce4 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_+0x144>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c20:	429a      	cmp	r2, r3
 8005c22:	da58      	bge.n	8005cd6 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_+0x136>
    {
        for(int j=0;j<vector_size;j++)
 8005c24:	2300      	movs	r3, #0
 8005c26:	633b      	str	r3, [r7, #48]	; 0x30
 8005c28:	4b2e      	ldr	r3, [pc, #184]	; (8005ce4 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_+0x144>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	da4d      	bge.n	8005cce <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_+0x12e>
        {
            Mat_3[i][j] = 0;
 8005c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c34:	4619      	mov	r1, r3
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f7ff f934 	bl	8004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	4619      	mov	r1, r3
 8005c42:	4610      	mov	r0, r2
 8005c44:	f7fb fcb5 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]

            for(int k=0;k<vector_size;k++)
 8005c50:	2300      	movs	r3, #0
 8005c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c54:	4b23      	ldr	r3, [pc, #140]	; (8005ce4 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_+0x144>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	da33      	bge.n	8005cc6 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_+0x126>
				Mat_3[i][j] += Mat_1[i][k] * Mat_2[k][j];
 8005c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c60:	4619      	mov	r1, r3
 8005c62:	68b8      	ldr	r0, [r7, #8]
 8005c64:	f7ff f91e 	bl	8004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4610      	mov	r0, r2
 8005c70:	f7fb fc9f 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8005c74:	4603      	mov	r3, r0
 8005c76:	ed93 8a00 	vldr	s16, [r3]
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7ff f910 	bl	8004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8005c84:	4602      	mov	r2, r0
 8005c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4610      	mov	r0, r2
 8005c8c:	f7fb fc91 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8005c90:	4603      	mov	r3, r0
 8005c92:	edd3 7a00 	vldr	s15, [r3]
 8005c96:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f7ff f900 	bl	8004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	4619      	mov	r1, r3
 8005caa:	4610      	mov	r0, r2
 8005cac:	f7fb fc81 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	edd3 7a00 	vldr	s15, [r3]
 8005cb6:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005cba:	edc3 7a00 	vstr	s15, [r3]
            for(int k=0;k<vector_size;k++)
 8005cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cc4:	e7c6      	b.n	8005c54 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_+0xb4>
        for(int j=0;j<vector_size;j++)
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc8:	3301      	adds	r3, #1
 8005cca:	633b      	str	r3, [r7, #48]	; 0x30
 8005ccc:	e7ac      	b.n	8005c28 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_+0x88>
    for(int i=0; i<vector_size;i++)
 8005cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd4:	e7a1      	b.n	8005c1a <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_+0x7a>

        }
    }

	return Mat_3;
 8005cd6:	bf00      	nop
}
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	3738      	adds	r7, #56	; 0x38
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	ecbd 8b02 	vpop	{d8}
 8005ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ce4:	20000000 	.word	0x20000000

08005ce8 <_Z7inverseSt6vectorIS_IfSaIfEESaIS1_EE>:


//Inverse of a diagonal matrix
matrix inverse (matrix p)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	ed2d 8b02 	vpush	{d8}
 8005cee:	b08a      	sub	sp, #40	; 0x28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
	matrix t( 2 , matrix_1D (2, 0));
 8005cf6:	f04f 0300 	mov.w	r3, #0
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	f107 0318 	add.w	r3, r7, #24
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fb fc0e 	bl	8001522 <_ZNSaIfEC1Ev>
 8005d06:	f107 0318 	add.w	r3, r7, #24
 8005d0a:	f107 0214 	add.w	r2, r7, #20
 8005d0e:	f107 0008 	add.w	r0, r7, #8
 8005d12:	2102      	movs	r1, #2
 8005d14:	f7ff f88e 	bl	8004e34 <_ZNSt6vectorIfSaIfEEC1EjRKfRKS0_>
 8005d18:	f107 031c 	add.w	r3, r7, #28
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fb fc58 	bl	80015d2 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 8005d22:	f107 031c 	add.w	r3, r7, #28
 8005d26:	f107 0208 	add.w	r2, r7, #8
 8005d2a:	2102      	movs	r1, #2
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7ff f89d 	bl	8004e6c <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1EjRKS1_RKS2_>
 8005d32:	f107 031c 	add.w	r3, r7, #28
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fb fab0 	bl	800129c <_ZNSaISt6vectorIfSaIfEEED1Ev>
 8005d3c:	f107 0308 	add.w	r3, r7, #8
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fb fb25 	bl	8001390 <_ZNSt6vectorIfSaIfEED1Ev>
 8005d46:	f107 0318 	add.w	r3, r7, #24
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fb fafb 	bl	8001346 <_ZNSaIfED1Ev>

	for (int i = 0; i<vector_size; i++)
 8005d50:	2300      	movs	r3, #0
 8005d52:	627b      	str	r3, [r7, #36]	; 0x24
 8005d54:	4b31      	ldr	r3, [pc, #196]	; (8005e1c <_Z7inverseSt6vectorIS_IfSaIfEESaIS1_EE+0x134>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	da56      	bge.n	8005e0c <_Z7inverseSt6vectorIS_IfSaIfEESaIS1_EE+0x124>
	{
		for (int j = 0; j<vector_size; j++)
 8005d5e:	2300      	movs	r3, #0
 8005d60:	623b      	str	r3, [r7, #32]
 8005d62:	4b2e      	ldr	r3, [pc, #184]	; (8005e1c <_Z7inverseSt6vectorIS_IfSaIfEESaIS1_EE+0x134>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6a3a      	ldr	r2, [r7, #32]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	da4b      	bge.n	8005e04 <_Z7inverseSt6vectorIS_IfSaIfEESaIS1_EE+0x11c>
			if (p[i][j] == 0)
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	4619      	mov	r1, r3
 8005d70:	6838      	ldr	r0, [r7, #0]
 8005d72:	f7ff f897 	bl	8004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8005d76:	4602      	mov	r2, r0
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	f7fb fc18 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8005d82:	4603      	mov	r3, r0
 8005d84:	edd3 7a00 	vldr	s15, [r3]
 8005d88:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d90:	bf0c      	ite	eq
 8005d92:	2301      	moveq	r3, #1
 8005d94:	2300      	movne	r3, #0
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00f      	beq.n	8005dbc <_Z7inverseSt6vectorIS_IfSaIfEESaIS1_EE+0xd4>
				t[i][j] = 0;
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	4619      	mov	r1, r3
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7ff f87f 	bl	8004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8005da6:	4602      	mov	r2, r0
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	4619      	mov	r1, r3
 8005dac:	4610      	mov	r0, r2
 8005dae:	f7fb fc00 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8005db2:	4603      	mov	r3, r0
 8005db4:	f04f 0200 	mov.w	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	e01f      	b.n	8005dfc <_Z7inverseSt6vectorIS_IfSaIfEESaIS1_EE+0x114>
			else
				t[i][j] = (1/p[i][j]);
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6838      	ldr	r0, [r7, #0]
 8005dc2:	f7ff f86f 	bl	8004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4610      	mov	r0, r2
 8005dce:	f7fb fbf0 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	ed93 8a00 	vldr	s16, [r3]
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	4619      	mov	r1, r3
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7ff f861 	bl	8004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8005de2:	4602      	mov	r2, r0
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	4619      	mov	r1, r3
 8005de8:	4610      	mov	r0, r2
 8005dea:	f7fb fbe2 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8005dee:	4603      	mov	r3, r0
 8005df0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005df4:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8005df8:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j<vector_size; j++)
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	623b      	str	r3, [r7, #32]
 8005e02:	e7ae      	b.n	8005d62 <_Z7inverseSt6vectorIS_IfSaIfEESaIS1_EE+0x7a>
	for (int i = 0; i<vector_size; i++)
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	3301      	adds	r3, #1
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
 8005e0a:	e7a3      	b.n	8005d54 <_Z7inverseSt6vectorIS_IfSaIfEESaIS1_EE+0x6c>
	}
		return t;
 8005e0c:	bf00      	nop
}
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	3728      	adds	r7, #40	; 0x28
 8005e12:	46bd      	mov	sp, r7
 8005e14:	ecbd 8b02 	vpop	{d8}
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000000 	.word	0x20000000

08005e20 <_Z9transposeSt6vectorIS_IfSaIfEESaIS1_EE>:

matrix transpose (matrix p)
{
 8005e20:	b5b0      	push	{r4, r5, r7, lr}
 8005e22:	b08a      	sub	sp, #40	; 0x28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
	matrix t( vector_size , matrix_1D (vector_size, 0));
 8005e2a:	4b34      	ldr	r3, [pc, #208]	; (8005efc <_Z9transposeSt6vectorIS_IfSaIfEESaIS1_EE+0xdc>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	461c      	mov	r4, r3
 8005e30:	4b32      	ldr	r3, [pc, #200]	; (8005efc <_Z9transposeSt6vectorIS_IfSaIfEESaIS1_EE+0xdc>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	461d      	mov	r5, r3
 8005e36:	f04f 0300 	mov.w	r3, #0
 8005e3a:	617b      	str	r3, [r7, #20]
 8005e3c:	f107 0318 	add.w	r3, r7, #24
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fb fb6e 	bl	8001522 <_ZNSaIfEC1Ev>
 8005e46:	f107 0318 	add.w	r3, r7, #24
 8005e4a:	f107 0214 	add.w	r2, r7, #20
 8005e4e:	f107 0008 	add.w	r0, r7, #8
 8005e52:	4629      	mov	r1, r5
 8005e54:	f7fe ffee 	bl	8004e34 <_ZNSt6vectorIfSaIfEEC1EjRKfRKS0_>
 8005e58:	f107 031c 	add.w	r3, r7, #28
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7fb fbb8 	bl	80015d2 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 8005e62:	f107 031c 	add.w	r3, r7, #28
 8005e66:	f107 0208 	add.w	r2, r7, #8
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7fe fffd 	bl	8004e6c <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1EjRKS1_RKS2_>
 8005e72:	f107 031c 	add.w	r3, r7, #28
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fb fa10 	bl	800129c <_ZNSaISt6vectorIfSaIfEEED1Ev>
 8005e7c:	f107 0308 	add.w	r3, r7, #8
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7fb fa85 	bl	8001390 <_ZNSt6vectorIfSaIfEED1Ev>
 8005e86:	f107 0318 	add.w	r3, r7, #24
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fb fa5b 	bl	8001346 <_ZNSaIfED1Ev>
	for (int i = 0; i<vector_size; i++)
 8005e90:	2300      	movs	r3, #0
 8005e92:	627b      	str	r3, [r7, #36]	; 0x24
 8005e94:	4b19      	ldr	r3, [pc, #100]	; (8005efc <_Z9transposeSt6vectorIS_IfSaIfEESaIS1_EE+0xdc>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	da28      	bge.n	8005ef0 <_Z9transposeSt6vectorIS_IfSaIfEESaIS1_EE+0xd0>
	{
		for (int j = 0; j<vector_size; j++)
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	623b      	str	r3, [r7, #32]
 8005ea2:	4b16      	ldr	r3, [pc, #88]	; (8005efc <_Z9transposeSt6vectorIS_IfSaIfEESaIS1_EE+0xdc>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6a3a      	ldr	r2, [r7, #32]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	da1d      	bge.n	8005ee8 <_Z9transposeSt6vectorIS_IfSaIfEESaIS1_EE+0xc8>
			t[i][j] = p[j][i];
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6838      	ldr	r0, [r7, #0]
 8005eb2:	f7fe fff7 	bl	8004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	4619      	mov	r1, r3
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	f7fb fb78 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7fe ffeb 	bl	8004ea4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	f7fb fb6c 	bl	80015b2 <_ZNSt6vectorIfSaIfEEixEj>
 8005eda:	4602      	mov	r2, r0
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	6013      	str	r3, [r2, #0]
		for (int j = 0; j<vector_size; j++)
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	623b      	str	r3, [r7, #32]
 8005ee6:	e7dc      	b.n	8005ea2 <_Z9transposeSt6vectorIS_IfSaIfEESaIS1_EE+0x82>
	for (int i = 0; i<vector_size; i++)
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	3301      	adds	r3, #1
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24
 8005eee:	e7d1      	b.n	8005e94 <_Z9transposeSt6vectorIS_IfSaIfEESaIS1_EE+0x74>
	}

		return t;
 8005ef0:	bf00      	nop
}
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	3728      	adds	r7, #40	; 0x28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8005efa:	bf00      	nop
 8005efc:	20000000 	.word	0x20000000

08005f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f06:	4b0f      	ldr	r3, [pc, #60]	; (8005f44 <HAL_MspInit+0x44>)
 8005f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f0a:	4a0e      	ldr	r2, [pc, #56]	; (8005f44 <HAL_MspInit+0x44>)
 8005f0c:	f043 0301 	orr.w	r3, r3, #1
 8005f10:	6613      	str	r3, [r2, #96]	; 0x60
 8005f12:	4b0c      	ldr	r3, [pc, #48]	; (8005f44 <HAL_MspInit+0x44>)
 8005f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	607b      	str	r3, [r7, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f1e:	4b09      	ldr	r3, [pc, #36]	; (8005f44 <HAL_MspInit+0x44>)
 8005f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f22:	4a08      	ldr	r2, [pc, #32]	; (8005f44 <HAL_MspInit+0x44>)
 8005f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f28:	6593      	str	r3, [r2, #88]	; 0x58
 8005f2a:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <HAL_MspInit+0x44>)
 8005f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f32:	603b      	str	r3, [r7, #0]
 8005f34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8005f36:	f001 fa73 	bl	8007420 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f3a:	bf00      	nop
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	40021000 	.word	0x40021000

08005f48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08a      	sub	sp, #40	; 0x28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f50:	f107 0314 	add.w	r3, r7, #20
 8005f54:	2200      	movs	r2, #0
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	605a      	str	r2, [r3, #4]
 8005f5a:	609a      	str	r2, [r3, #8]
 8005f5c:	60da      	str	r2, [r3, #12]
 8005f5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a17      	ldr	r2, [pc, #92]	; (8005fc4 <HAL_I2C_MspInit+0x7c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d128      	bne.n	8005fbc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f6a:	4b17      	ldr	r3, [pc, #92]	; (8005fc8 <HAL_I2C_MspInit+0x80>)
 8005f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6e:	4a16      	ldr	r2, [pc, #88]	; (8005fc8 <HAL_I2C_MspInit+0x80>)
 8005f70:	f043 0302 	orr.w	r3, r3, #2
 8005f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f76:	4b14      	ldr	r3, [pc, #80]	; (8005fc8 <HAL_I2C_MspInit+0x80>)
 8005f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005f82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f88:	2312      	movs	r3, #18
 8005f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f90:	2300      	movs	r3, #0
 8005f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005f94:	2304      	movs	r3, #4
 8005f96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f98:	f107 0314 	add.w	r3, r7, #20
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	480b      	ldr	r0, [pc, #44]	; (8005fcc <HAL_I2C_MspInit+0x84>)
 8005fa0:	f000 faa6 	bl	80064f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005fa4:	4b08      	ldr	r3, [pc, #32]	; (8005fc8 <HAL_I2C_MspInit+0x80>)
 8005fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa8:	4a07      	ldr	r2, [pc, #28]	; (8005fc8 <HAL_I2C_MspInit+0x80>)
 8005faa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fae:	6593      	str	r3, [r2, #88]	; 0x58
 8005fb0:	4b05      	ldr	r3, [pc, #20]	; (8005fc8 <HAL_I2C_MspInit+0x80>)
 8005fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fb8:	60fb      	str	r3, [r7, #12]
 8005fba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005fbc:	bf00      	nop
 8005fbe:	3728      	adds	r7, #40	; 0x28
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	40005400 	.word	0x40005400
 8005fc8:	40021000 	.word	0x40021000
 8005fcc:	48000400 	.word	0x48000400

08005fd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a0d      	ldr	r2, [pc, #52]	; (8006014 <HAL_TIM_Base_MspInit+0x44>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d113      	bne.n	800600a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005fe2:	4b0d      	ldr	r3, [pc, #52]	; (8006018 <HAL_TIM_Base_MspInit+0x48>)
 8005fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe6:	4a0c      	ldr	r2, [pc, #48]	; (8006018 <HAL_TIM_Base_MspInit+0x48>)
 8005fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fec:	6613      	str	r3, [r2, #96]	; 0x60
 8005fee:	4b0a      	ldr	r3, [pc, #40]	; (8006018 <HAL_TIM_Base_MspInit+0x48>)
 8005ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	2019      	movs	r0, #25
 8006000:	f000 fa41 	bl	8006486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006004:	2019      	movs	r0, #25
 8006006:	f000 fa58 	bl	80064ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800600a:	bf00      	nop
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	40014400 	.word	0x40014400
 8006018:	40021000 	.word	0x40021000

0800601c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800601c:	b480      	push	{r7}
 800601e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006020:	e7fe      	b.n	8006020 <NMI_Handler+0x4>

08006022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006022:	b480      	push	{r7}
 8006024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006026:	e7fe      	b.n	8006026 <HardFault_Handler+0x4>

08006028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006028:	b480      	push	{r7}
 800602a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800602c:	e7fe      	b.n	800602c <MemManage_Handler+0x4>

0800602e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800602e:	b480      	push	{r7}
 8006030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006032:	e7fe      	b.n	8006032 <BusFault_Handler+0x4>

08006034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006034:	b480      	push	{r7}
 8006036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006038:	e7fe      	b.n	8006038 <UsageFault_Handler+0x4>

0800603a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800603a:	b480      	push	{r7}
 800603c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800603e:	bf00      	nop
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800604c:	bf00      	nop
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006056:	b480      	push	{r7}
 8006058:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800605a:	bf00      	nop
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006068:	f000 f8f2 	bl	8006250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800606c:	bf00      	nop
 800606e:	bd80      	pop	{r7, pc}

08006070 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8006074:	4802      	ldr	r0, [pc, #8]	; (8006080 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8006076:	f002 f9fb 	bl	8008470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800607a:	bf00      	nop
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	2000015c 	.word	0x2000015c

08006084 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006084:	b480      	push	{r7}
 8006086:	af00      	add	r7, sp, #0
	return 1;
 8006088:	2301      	movs	r3, #1
}
 800608a:	4618      	mov	r0, r3
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <_kill>:

int _kill(int pid, int sig)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800609e:	f002 feb7 	bl	8008e10 <__errno>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2216      	movs	r2, #22
 80060a6:	601a      	str	r2, [r3, #0]
	return -1;
 80060a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <_exit>:

void _exit (int status)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80060bc:	f04f 31ff 	mov.w	r1, #4294967295
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7ff ffe7 	bl	8006094 <_kill>
	while (1) {}		/* Make sure we hang here */
 80060c6:	e7fe      	b.n	80060c6 <_exit+0x12>

080060c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80060d0:	4a14      	ldr	r2, [pc, #80]	; (8006124 <_sbrk+0x5c>)
 80060d2:	4b15      	ldr	r3, [pc, #84]	; (8006128 <_sbrk+0x60>)
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80060dc:	4b13      	ldr	r3, [pc, #76]	; (800612c <_sbrk+0x64>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d102      	bne.n	80060ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80060e4:	4b11      	ldr	r3, [pc, #68]	; (800612c <_sbrk+0x64>)
 80060e6:	4a12      	ldr	r2, [pc, #72]	; (8006130 <_sbrk+0x68>)
 80060e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80060ea:	4b10      	ldr	r3, [pc, #64]	; (800612c <_sbrk+0x64>)
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4413      	add	r3, r2
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d207      	bcs.n	8006108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80060f8:	f002 fe8a 	bl	8008e10 <__errno>
 80060fc:	4603      	mov	r3, r0
 80060fe:	220c      	movs	r2, #12
 8006100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006102:	f04f 33ff 	mov.w	r3, #4294967295
 8006106:	e009      	b.n	800611c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006108:	4b08      	ldr	r3, [pc, #32]	; (800612c <_sbrk+0x64>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800610e:	4b07      	ldr	r3, [pc, #28]	; (800612c <_sbrk+0x64>)
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4413      	add	r3, r2
 8006116:	4a05      	ldr	r2, [pc, #20]	; (800612c <_sbrk+0x64>)
 8006118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800611a:	68fb      	ldr	r3, [r7, #12]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	20020000 	.word	0x20020000
 8006128:	00000400 	.word	0x00000400
 800612c:	2000041c 	.word	0x2000041c
 8006130:	20000440 	.word	0x20000440

08006134 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006134:	b480      	push	{r7}
 8006136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006138:	4b06      	ldr	r3, [pc, #24]	; (8006154 <SystemInit+0x20>)
 800613a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800613e:	4a05      	ldr	r2, [pc, #20]	; (8006154 <SystemInit+0x20>)
 8006140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006148:	bf00      	nop
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	e000ed00 	.word	0xe000ed00

08006158 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006158:	480d      	ldr	r0, [pc, #52]	; (8006190 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800615a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800615c:	480d      	ldr	r0, [pc, #52]	; (8006194 <LoopForever+0x6>)
  ldr r1, =_edata
 800615e:	490e      	ldr	r1, [pc, #56]	; (8006198 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006160:	4a0e      	ldr	r2, [pc, #56]	; (800619c <LoopForever+0xe>)
  movs r3, #0
 8006162:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006164:	e002      	b.n	800616c <LoopCopyDataInit>

08006166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800616a:	3304      	adds	r3, #4

0800616c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800616c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800616e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006170:	d3f9      	bcc.n	8006166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006172:	4a0b      	ldr	r2, [pc, #44]	; (80061a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006174:	4c0b      	ldr	r4, [pc, #44]	; (80061a4 <LoopForever+0x16>)
  movs r3, #0
 8006176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006178:	e001      	b.n	800617e <LoopFillZerobss>

0800617a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800617a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800617c:	3204      	adds	r2, #4

0800617e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800617e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006180:	d3fb      	bcc.n	800617a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006182:	f7ff ffd7 	bl	8006134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006186:	f002 fe49 	bl	8008e1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800618a:	f7fe fbbf 	bl	800490c <main>

0800618e <LoopForever>:

LoopForever:
    b LoopForever
 800618e:	e7fe      	b.n	800618e <LoopForever>
  ldr   r0, =_estack
 8006190:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006198:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800619c:	08009150 	.word	0x08009150
  ldr r2, =_sbss
 80061a0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80061a4:	20000440 	.word	0x20000440

080061a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80061a8:	e7fe      	b.n	80061a8 <ADC1_2_IRQHandler>

080061aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b082      	sub	sp, #8
 80061ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061b4:	2003      	movs	r0, #3
 80061b6:	f000 f95b 	bl	8006470 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80061ba:	2000      	movs	r0, #0
 80061bc:	f000 f80e 	bl	80061dc <HAL_InitTick>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d002      	beq.n	80061cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	71fb      	strb	r3, [r7, #7]
 80061ca:	e001      	b.n	80061d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80061cc:	f7ff fe98 	bl	8005f00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80061d0:	79fb      	ldrb	r3, [r7, #7]

}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
	...

080061dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80061e8:	4b16      	ldr	r3, [pc, #88]	; (8006244 <HAL_InitTick+0x68>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d022      	beq.n	8006236 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80061f0:	4b15      	ldr	r3, [pc, #84]	; (8006248 <HAL_InitTick+0x6c>)
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	4b13      	ldr	r3, [pc, #76]	; (8006244 <HAL_InitTick+0x68>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80061fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8006200:	fbb2 f3f3 	udiv	r3, r2, r3
 8006204:	4618      	mov	r0, r3
 8006206:	f000 f966 	bl	80064d6 <HAL_SYSTICK_Config>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10f      	bne.n	8006230 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b0f      	cmp	r3, #15
 8006214:	d809      	bhi.n	800622a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006216:	2200      	movs	r2, #0
 8006218:	6879      	ldr	r1, [r7, #4]
 800621a:	f04f 30ff 	mov.w	r0, #4294967295
 800621e:	f000 f932 	bl	8006486 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006222:	4a0a      	ldr	r2, [pc, #40]	; (800624c <HAL_InitTick+0x70>)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6013      	str	r3, [r2, #0]
 8006228:	e007      	b.n	800623a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	73fb      	strb	r3, [r7, #15]
 800622e:	e004      	b.n	800623a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	73fb      	strb	r3, [r7, #15]
 8006234:	e001      	b.n	800623a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800623a:	7bfb      	ldrb	r3, [r7, #15]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	2000000c 	.word	0x2000000c
 8006248:	20000004 	.word	0x20000004
 800624c:	20000008 	.word	0x20000008

08006250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006250:	b480      	push	{r7}
 8006252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006254:	4b05      	ldr	r3, [pc, #20]	; (800626c <HAL_IncTick+0x1c>)
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	4b05      	ldr	r3, [pc, #20]	; (8006270 <HAL_IncTick+0x20>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4413      	add	r3, r2
 800625e:	4a03      	ldr	r2, [pc, #12]	; (800626c <HAL_IncTick+0x1c>)
 8006260:	6013      	str	r3, [r2, #0]
}
 8006262:	bf00      	nop
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	2000042c 	.word	0x2000042c
 8006270:	2000000c 	.word	0x2000000c

08006274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006274:	b480      	push	{r7}
 8006276:	af00      	add	r7, sp, #0
  return uwTick;
 8006278:	4b03      	ldr	r3, [pc, #12]	; (8006288 <HAL_GetTick+0x14>)
 800627a:	681b      	ldr	r3, [r3, #0]
}
 800627c:	4618      	mov	r0, r3
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	2000042c 	.word	0x2000042c

0800628c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006294:	f7ff ffee 	bl	8006274 <HAL_GetTick>
 8006298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a4:	d004      	beq.n	80062b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80062a6:	4b09      	ldr	r3, [pc, #36]	; (80062cc <HAL_Delay+0x40>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	4413      	add	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80062b0:	bf00      	nop
 80062b2:	f7ff ffdf 	bl	8006274 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d8f7      	bhi.n	80062b2 <HAL_Delay+0x26>
  {
  }
}
 80062c2:	bf00      	nop
 80062c4:	bf00      	nop
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	2000000c 	.word	0x2000000c

080062d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f003 0307 	and.w	r3, r3, #7
 80062de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062e0:	4b0c      	ldr	r3, [pc, #48]	; (8006314 <__NVIC_SetPriorityGrouping+0x44>)
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80062ec:	4013      	ands	r3, r2
 80062ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80062fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006302:	4a04      	ldr	r2, [pc, #16]	; (8006314 <__NVIC_SetPriorityGrouping+0x44>)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	60d3      	str	r3, [r2, #12]
}
 8006308:	bf00      	nop
 800630a:	3714      	adds	r7, #20
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	e000ed00 	.word	0xe000ed00

08006318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006318:	b480      	push	{r7}
 800631a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800631c:	4b04      	ldr	r3, [pc, #16]	; (8006330 <__NVIC_GetPriorityGrouping+0x18>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	0a1b      	lsrs	r3, r3, #8
 8006322:	f003 0307 	and.w	r3, r3, #7
}
 8006326:	4618      	mov	r0, r3
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	e000ed00 	.word	0xe000ed00

08006334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	4603      	mov	r3, r0
 800633c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800633e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006342:	2b00      	cmp	r3, #0
 8006344:	db0b      	blt.n	800635e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006346:	79fb      	ldrb	r3, [r7, #7]
 8006348:	f003 021f 	and.w	r2, r3, #31
 800634c:	4907      	ldr	r1, [pc, #28]	; (800636c <__NVIC_EnableIRQ+0x38>)
 800634e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006352:	095b      	lsrs	r3, r3, #5
 8006354:	2001      	movs	r0, #1
 8006356:	fa00 f202 	lsl.w	r2, r0, r2
 800635a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800635e:	bf00      	nop
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	e000e100 	.word	0xe000e100

08006370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	4603      	mov	r3, r0
 8006378:	6039      	str	r1, [r7, #0]
 800637a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800637c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006380:	2b00      	cmp	r3, #0
 8006382:	db0a      	blt.n	800639a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	b2da      	uxtb	r2, r3
 8006388:	490c      	ldr	r1, [pc, #48]	; (80063bc <__NVIC_SetPriority+0x4c>)
 800638a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800638e:	0112      	lsls	r2, r2, #4
 8006390:	b2d2      	uxtb	r2, r2
 8006392:	440b      	add	r3, r1
 8006394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006398:	e00a      	b.n	80063b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	b2da      	uxtb	r2, r3
 800639e:	4908      	ldr	r1, [pc, #32]	; (80063c0 <__NVIC_SetPriority+0x50>)
 80063a0:	79fb      	ldrb	r3, [r7, #7]
 80063a2:	f003 030f 	and.w	r3, r3, #15
 80063a6:	3b04      	subs	r3, #4
 80063a8:	0112      	lsls	r2, r2, #4
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	440b      	add	r3, r1
 80063ae:	761a      	strb	r2, [r3, #24]
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	e000e100 	.word	0xe000e100
 80063c0:	e000ed00 	.word	0xe000ed00

080063c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b089      	sub	sp, #36	; 0x24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f003 0307 	and.w	r3, r3, #7
 80063d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	f1c3 0307 	rsb	r3, r3, #7
 80063de:	2b04      	cmp	r3, #4
 80063e0:	bf28      	it	cs
 80063e2:	2304      	movcs	r3, #4
 80063e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	3304      	adds	r3, #4
 80063ea:	2b06      	cmp	r3, #6
 80063ec:	d902      	bls.n	80063f4 <NVIC_EncodePriority+0x30>
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	3b03      	subs	r3, #3
 80063f2:	e000      	b.n	80063f6 <NVIC_EncodePriority+0x32>
 80063f4:	2300      	movs	r3, #0
 80063f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063f8:	f04f 32ff 	mov.w	r2, #4294967295
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006402:	43da      	mvns	r2, r3
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	401a      	ands	r2, r3
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800640c:	f04f 31ff 	mov.w	r1, #4294967295
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	fa01 f303 	lsl.w	r3, r1, r3
 8006416:	43d9      	mvns	r1, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800641c:	4313      	orrs	r3, r2
         );
}
 800641e:	4618      	mov	r0, r3
 8006420:	3724      	adds	r7, #36	; 0x24
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
	...

0800642c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3b01      	subs	r3, #1
 8006438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800643c:	d301      	bcc.n	8006442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800643e:	2301      	movs	r3, #1
 8006440:	e00f      	b.n	8006462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006442:	4a0a      	ldr	r2, [pc, #40]	; (800646c <SysTick_Config+0x40>)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3b01      	subs	r3, #1
 8006448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800644a:	210f      	movs	r1, #15
 800644c:	f04f 30ff 	mov.w	r0, #4294967295
 8006450:	f7ff ff8e 	bl	8006370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006454:	4b05      	ldr	r3, [pc, #20]	; (800646c <SysTick_Config+0x40>)
 8006456:	2200      	movs	r2, #0
 8006458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800645a:	4b04      	ldr	r3, [pc, #16]	; (800646c <SysTick_Config+0x40>)
 800645c:	2207      	movs	r2, #7
 800645e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3708      	adds	r7, #8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	e000e010 	.word	0xe000e010

08006470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff ff29 	bl	80062d0 <__NVIC_SetPriorityGrouping>
}
 800647e:	bf00      	nop
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b086      	sub	sp, #24
 800648a:	af00      	add	r7, sp, #0
 800648c:	4603      	mov	r3, r0
 800648e:	60b9      	str	r1, [r7, #8]
 8006490:	607a      	str	r2, [r7, #4]
 8006492:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006494:	f7ff ff40 	bl	8006318 <__NVIC_GetPriorityGrouping>
 8006498:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	68b9      	ldr	r1, [r7, #8]
 800649e:	6978      	ldr	r0, [r7, #20]
 80064a0:	f7ff ff90 	bl	80063c4 <NVIC_EncodePriority>
 80064a4:	4602      	mov	r2, r0
 80064a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064aa:	4611      	mov	r1, r2
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7ff ff5f 	bl	8006370 <__NVIC_SetPriority>
}
 80064b2:	bf00      	nop
 80064b4:	3718      	adds	r7, #24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b082      	sub	sp, #8
 80064be:	af00      	add	r7, sp, #0
 80064c0:	4603      	mov	r3, r0
 80064c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80064c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff ff33 	bl	8006334 <__NVIC_EnableIRQ>
}
 80064ce:	bf00      	nop
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff ffa4 	bl	800642c <SysTick_Config>
 80064e4:	4603      	mov	r3, r0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80064fe:	e15a      	b.n	80067b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	2101      	movs	r1, #1
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	fa01 f303 	lsl.w	r3, r1, r3
 800650c:	4013      	ands	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 814c 	beq.w	80067b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d00b      	beq.n	8006538 <HAL_GPIO_Init+0x48>
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	2b02      	cmp	r3, #2
 8006526:	d007      	beq.n	8006538 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800652c:	2b11      	cmp	r3, #17
 800652e:	d003      	beq.n	8006538 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	2b12      	cmp	r3, #18
 8006536:	d130      	bne.n	800659a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	2203      	movs	r2, #3
 8006544:	fa02 f303 	lsl.w	r3, r2, r3
 8006548:	43db      	mvns	r3, r3
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	4013      	ands	r3, r2
 800654e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	fa02 f303 	lsl.w	r3, r2, r3
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800656e:	2201      	movs	r2, #1
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	fa02 f303 	lsl.w	r3, r2, r3
 8006576:	43db      	mvns	r3, r3
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	4013      	ands	r3, r2
 800657c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	091b      	lsrs	r3, r3, #4
 8006584:	f003 0201 	and.w	r2, r3, #1
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	fa02 f303 	lsl.w	r3, r2, r3
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	4313      	orrs	r3, r2
 8006592:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	2203      	movs	r2, #3
 80065a6:	fa02 f303 	lsl.w	r3, r2, r3
 80065aa:	43db      	mvns	r3, r3
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	4013      	ands	r3, r2
 80065b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	fa02 f303 	lsl.w	r3, r2, r3
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d003      	beq.n	80065da <HAL_GPIO_Init+0xea>
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	2b12      	cmp	r3, #18
 80065d8:	d123      	bne.n	8006622 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	08da      	lsrs	r2, r3, #3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	3208      	adds	r2, #8
 80065e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	f003 0307 	and.w	r3, r3, #7
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	220f      	movs	r2, #15
 80065f2:	fa02 f303 	lsl.w	r3, r2, r3
 80065f6:	43db      	mvns	r3, r3
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4013      	ands	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	691a      	ldr	r2, [r3, #16]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f003 0307 	and.w	r3, r3, #7
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	fa02 f303 	lsl.w	r3, r2, r3
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	4313      	orrs	r3, r2
 8006612:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	08da      	lsrs	r2, r3, #3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	3208      	adds	r2, #8
 800661c:	6939      	ldr	r1, [r7, #16]
 800661e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	005b      	lsls	r3, r3, #1
 800662c:	2203      	movs	r2, #3
 800662e:	fa02 f303 	lsl.w	r3, r2, r3
 8006632:	43db      	mvns	r3, r3
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	4013      	ands	r3, r2
 8006638:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f003 0203 	and.w	r2, r3, #3
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	fa02 f303 	lsl.w	r3, r2, r3
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	4313      	orrs	r3, r2
 800664e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 80a6 	beq.w	80067b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006664:	4b5b      	ldr	r3, [pc, #364]	; (80067d4 <HAL_GPIO_Init+0x2e4>)
 8006666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006668:	4a5a      	ldr	r2, [pc, #360]	; (80067d4 <HAL_GPIO_Init+0x2e4>)
 800666a:	f043 0301 	orr.w	r3, r3, #1
 800666e:	6613      	str	r3, [r2, #96]	; 0x60
 8006670:	4b58      	ldr	r3, [pc, #352]	; (80067d4 <HAL_GPIO_Init+0x2e4>)
 8006672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	60bb      	str	r3, [r7, #8]
 800667a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800667c:	4a56      	ldr	r2, [pc, #344]	; (80067d8 <HAL_GPIO_Init+0x2e8>)
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	089b      	lsrs	r3, r3, #2
 8006682:	3302      	adds	r3, #2
 8006684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006688:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f003 0303 	and.w	r3, r3, #3
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	220f      	movs	r2, #15
 8006694:	fa02 f303 	lsl.w	r3, r2, r3
 8006698:	43db      	mvns	r3, r3
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	4013      	ands	r3, r2
 800669e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80066a6:	d01f      	beq.n	80066e8 <HAL_GPIO_Init+0x1f8>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a4c      	ldr	r2, [pc, #304]	; (80067dc <HAL_GPIO_Init+0x2ec>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d019      	beq.n	80066e4 <HAL_GPIO_Init+0x1f4>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a4b      	ldr	r2, [pc, #300]	; (80067e0 <HAL_GPIO_Init+0x2f0>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d013      	beq.n	80066e0 <HAL_GPIO_Init+0x1f0>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a4a      	ldr	r2, [pc, #296]	; (80067e4 <HAL_GPIO_Init+0x2f4>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d00d      	beq.n	80066dc <HAL_GPIO_Init+0x1ec>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a49      	ldr	r2, [pc, #292]	; (80067e8 <HAL_GPIO_Init+0x2f8>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d007      	beq.n	80066d8 <HAL_GPIO_Init+0x1e8>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a48      	ldr	r2, [pc, #288]	; (80067ec <HAL_GPIO_Init+0x2fc>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d101      	bne.n	80066d4 <HAL_GPIO_Init+0x1e4>
 80066d0:	2305      	movs	r3, #5
 80066d2:	e00a      	b.n	80066ea <HAL_GPIO_Init+0x1fa>
 80066d4:	2306      	movs	r3, #6
 80066d6:	e008      	b.n	80066ea <HAL_GPIO_Init+0x1fa>
 80066d8:	2304      	movs	r3, #4
 80066da:	e006      	b.n	80066ea <HAL_GPIO_Init+0x1fa>
 80066dc:	2303      	movs	r3, #3
 80066de:	e004      	b.n	80066ea <HAL_GPIO_Init+0x1fa>
 80066e0:	2302      	movs	r3, #2
 80066e2:	e002      	b.n	80066ea <HAL_GPIO_Init+0x1fa>
 80066e4:	2301      	movs	r3, #1
 80066e6:	e000      	b.n	80066ea <HAL_GPIO_Init+0x1fa>
 80066e8:	2300      	movs	r3, #0
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	f002 0203 	and.w	r2, r2, #3
 80066f0:	0092      	lsls	r2, r2, #2
 80066f2:	4093      	lsls	r3, r2
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066fa:	4937      	ldr	r1, [pc, #220]	; (80067d8 <HAL_GPIO_Init+0x2e8>)
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	089b      	lsrs	r3, r3, #2
 8006700:	3302      	adds	r3, #2
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006708:	4b39      	ldr	r3, [pc, #228]	; (80067f0 <HAL_GPIO_Init+0x300>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	43db      	mvns	r3, r3
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	4013      	ands	r3, r2
 8006716:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	4313      	orrs	r3, r2
 800672a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800672c:	4a30      	ldr	r2, [pc, #192]	; (80067f0 <HAL_GPIO_Init+0x300>)
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8006732:	4b2f      	ldr	r3, [pc, #188]	; (80067f0 <HAL_GPIO_Init+0x300>)
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	43db      	mvns	r3, r3
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	4013      	ands	r3, r2
 8006740:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	4313      	orrs	r3, r2
 8006754:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006756:	4a26      	ldr	r2, [pc, #152]	; (80067f0 <HAL_GPIO_Init+0x300>)
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800675c:	4b24      	ldr	r3, [pc, #144]	; (80067f0 <HAL_GPIO_Init+0x300>)
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	43db      	mvns	r3, r3
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	4013      	ands	r3, r2
 800676a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d003      	beq.n	8006780 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	4313      	orrs	r3, r2
 800677e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006780:	4a1b      	ldr	r2, [pc, #108]	; (80067f0 <HAL_GPIO_Init+0x300>)
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006786:	4b1a      	ldr	r3, [pc, #104]	; (80067f0 <HAL_GPIO_Init+0x300>)
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	43db      	mvns	r3, r3
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	4013      	ands	r3, r2
 8006794:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80067aa:	4a11      	ldr	r2, [pc, #68]	; (80067f0 <HAL_GPIO_Init+0x300>)
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	3301      	adds	r3, #1
 80067b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	fa22 f303 	lsr.w	r3, r2, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f47f ae9d 	bne.w	8006500 <HAL_GPIO_Init+0x10>
  }
}
 80067c6:	bf00      	nop
 80067c8:	bf00      	nop
 80067ca:	371c      	adds	r7, #28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	40021000 	.word	0x40021000
 80067d8:	40010000 	.word	0x40010000
 80067dc:	48000400 	.word	0x48000400
 80067e0:	48000800 	.word	0x48000800
 80067e4:	48000c00 	.word	0x48000c00
 80067e8:	48001000 	.word	0x48001000
 80067ec:	48001400 	.word	0x48001400
 80067f0:	40010400 	.word	0x40010400

080067f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e081      	b.n	800690a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d106      	bne.n	8006820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7ff fb94 	bl	8005f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2224      	movs	r2, #36	; 0x24
 8006824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 0201 	bic.w	r2, r2, #1
 8006836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006844:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006854:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d107      	bne.n	800686e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689a      	ldr	r2, [r3, #8]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800686a:	609a      	str	r2, [r3, #8]
 800686c:	e006      	b.n	800687c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689a      	ldr	r2, [r3, #8]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800687a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	2b02      	cmp	r3, #2
 8006882:	d104      	bne.n	800688e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800688c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	6812      	ldr	r2, [r2, #0]
 8006898:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800689c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68da      	ldr	r2, [r3, #12]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691a      	ldr	r2, [r3, #16]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	ea42 0103 	orr.w	r1, r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	021a      	lsls	r2, r3, #8
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	69d9      	ldr	r1, [r3, #28]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a1a      	ldr	r2, [r3, #32]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0201 	orr.w	r2, r2, #1
 80068ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2220      	movs	r2, #32
 80068f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b088      	sub	sp, #32
 8006918:	af02      	add	r7, sp, #8
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	4608      	mov	r0, r1
 800691e:	4611      	mov	r1, r2
 8006920:	461a      	mov	r2, r3
 8006922:	4603      	mov	r3, r0
 8006924:	817b      	strh	r3, [r7, #10]
 8006926:	460b      	mov	r3, r1
 8006928:	813b      	strh	r3, [r7, #8]
 800692a:	4613      	mov	r3, r2
 800692c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b20      	cmp	r3, #32
 8006938:	f040 80f9 	bne.w	8006b2e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d002      	beq.n	8006948 <HAL_I2C_Mem_Write+0x34>
 8006942:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006944:	2b00      	cmp	r3, #0
 8006946:	d105      	bne.n	8006954 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800694e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e0ed      	b.n	8006b30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800695a:	2b01      	cmp	r3, #1
 800695c:	d101      	bne.n	8006962 <HAL_I2C_Mem_Write+0x4e>
 800695e:	2302      	movs	r3, #2
 8006960:	e0e6      	b.n	8006b30 <HAL_I2C_Mem_Write+0x21c>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800696a:	f7ff fc83 	bl	8006274 <HAL_GetTick>
 800696e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	2319      	movs	r3, #25
 8006976:	2201      	movs	r2, #1
 8006978:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f000 fac3 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e0d1      	b.n	8006b30 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2221      	movs	r2, #33	; 0x21
 8006990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2240      	movs	r2, #64	; 0x40
 8006998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6a3a      	ldr	r2, [r7, #32]
 80069a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80069ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069b4:	88f8      	ldrh	r0, [r7, #6]
 80069b6:	893a      	ldrh	r2, [r7, #8]
 80069b8:	8979      	ldrh	r1, [r7, #10]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	9301      	str	r3, [sp, #4]
 80069be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	4603      	mov	r3, r0
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f000 f9d3 	bl	8006d70 <I2C_RequestMemoryWrite>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d005      	beq.n	80069dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e0a9      	b.n	8006b30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	2bff      	cmp	r3, #255	; 0xff
 80069e4:	d90e      	bls.n	8006a04 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	22ff      	movs	r2, #255	; 0xff
 80069ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	8979      	ldrh	r1, [r7, #10]
 80069f4:	2300      	movs	r3, #0
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f000 fba5 	bl	800714c <I2C_TransferConfig>
 8006a02:	e00f      	b.n	8006a24 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	8979      	ldrh	r1, [r7, #10]
 8006a16:	2300      	movs	r3, #0
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f000 fb94 	bl	800714c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f000 faad 	bl	8006f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e07b      	b.n	8006b30 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	781a      	ldrb	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	1c5a      	adds	r2, r3, #1
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a60:	3b01      	subs	r3, #1
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d034      	beq.n	8006adc <HAL_I2C_Mem_Write+0x1c8>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d130      	bne.n	8006adc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a80:	2200      	movs	r2, #0
 8006a82:	2180      	movs	r1, #128	; 0x80
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 fa3f 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e04d      	b.n	8006b30 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	2bff      	cmp	r3, #255	; 0xff
 8006a9c:	d90e      	bls.n	8006abc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	22ff      	movs	r2, #255	; 0xff
 8006aa2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	8979      	ldrh	r1, [r7, #10]
 8006aac:	2300      	movs	r3, #0
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 fb49 	bl	800714c <I2C_TransferConfig>
 8006aba:	e00f      	b.n	8006adc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	8979      	ldrh	r1, [r7, #10]
 8006ace:	2300      	movs	r3, #0
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 fb38 	bl	800714c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d19e      	bne.n	8006a24 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f000 fa8c 	bl	8007008 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e01a      	b.n	8006b30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2220      	movs	r2, #32
 8006b00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6859      	ldr	r1, [r3, #4]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	4b0a      	ldr	r3, [pc, #40]	; (8006b38 <HAL_I2C_Mem_Write+0x224>)
 8006b0e:	400b      	ands	r3, r1
 8006b10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2220      	movs	r2, #32
 8006b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	e000      	b.n	8006b30 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006b2e:	2302      	movs	r3, #2
  }
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	fe00e800 	.word	0xfe00e800

08006b3c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b088      	sub	sp, #32
 8006b40:	af02      	add	r7, sp, #8
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	4608      	mov	r0, r1
 8006b46:	4611      	mov	r1, r2
 8006b48:	461a      	mov	r2, r3
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	817b      	strh	r3, [r7, #10]
 8006b4e:	460b      	mov	r3, r1
 8006b50:	813b      	strh	r3, [r7, #8]
 8006b52:	4613      	mov	r3, r2
 8006b54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b20      	cmp	r3, #32
 8006b60:	f040 80fd 	bne.w	8006d5e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d002      	beq.n	8006b70 <HAL_I2C_Mem_Read+0x34>
 8006b6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d105      	bne.n	8006b7c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e0f1      	b.n	8006d60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d101      	bne.n	8006b8a <HAL_I2C_Mem_Read+0x4e>
 8006b86:	2302      	movs	r3, #2
 8006b88:	e0ea      	b.n	8006d60 <HAL_I2C_Mem_Read+0x224>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b92:	f7ff fb6f 	bl	8006274 <HAL_GetTick>
 8006b96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	2319      	movs	r3, #25
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f000 f9af 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d001      	beq.n	8006bb4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e0d5      	b.n	8006d60 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2222      	movs	r2, #34	; 0x22
 8006bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2240      	movs	r2, #64	; 0x40
 8006bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6a3a      	ldr	r2, [r7, #32]
 8006bce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006bdc:	88f8      	ldrh	r0, [r7, #6]
 8006bde:	893a      	ldrh	r2, [r7, #8]
 8006be0:	8979      	ldrh	r1, [r7, #10]
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	9301      	str	r3, [sp, #4]
 8006be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	4603      	mov	r3, r0
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 f913 	bl	8006e18 <I2C_RequestMemoryRead>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d005      	beq.n	8006c04 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e0ad      	b.n	8006d60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	2bff      	cmp	r3, #255	; 0xff
 8006c0c:	d90e      	bls.n	8006c2c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	22ff      	movs	r2, #255	; 0xff
 8006c12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	8979      	ldrh	r1, [r7, #10]
 8006c1c:	4b52      	ldr	r3, [pc, #328]	; (8006d68 <HAL_I2C_Mem_Read+0x22c>)
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 fa91 	bl	800714c <I2C_TransferConfig>
 8006c2a:	e00f      	b.n	8006c4c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	8979      	ldrh	r1, [r7, #10]
 8006c3e:	4b4a      	ldr	r3, [pc, #296]	; (8006d68 <HAL_I2C_Mem_Read+0x22c>)
 8006c40:	9300      	str	r3, [sp, #0]
 8006c42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f000 fa80 	bl	800714c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c52:	2200      	movs	r2, #0
 8006c54:	2104      	movs	r1, #4
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f000 f956 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e07c      	b.n	8006d60 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c70:	b2d2      	uxtb	r2, r2
 8006c72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c82:	3b01      	subs	r3, #1
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	3b01      	subs	r3, #1
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d034      	beq.n	8006d0c <HAL_I2C_Mem_Read+0x1d0>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d130      	bne.n	8006d0c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	2180      	movs	r1, #128	; 0x80
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 f927 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d001      	beq.n	8006cc4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e04d      	b.n	8006d60 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	2bff      	cmp	r3, #255	; 0xff
 8006ccc:	d90e      	bls.n	8006cec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	22ff      	movs	r2, #255	; 0xff
 8006cd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	8979      	ldrh	r1, [r7, #10]
 8006cdc:	2300      	movs	r3, #0
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 fa31 	bl	800714c <I2C_TransferConfig>
 8006cea:	e00f      	b.n	8006d0c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	8979      	ldrh	r1, [r7, #10]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 fa20 	bl	800714c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d19a      	bne.n	8006c4c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 f974 	bl	8007008 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e01a      	b.n	8006d60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	6859      	ldr	r1, [r3, #4]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	4b0b      	ldr	r3, [pc, #44]	; (8006d6c <HAL_I2C_Mem_Read+0x230>)
 8006d3e:	400b      	ands	r3, r1
 8006d40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2220      	movs	r2, #32
 8006d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	e000      	b.n	8006d60 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006d5e:	2302      	movs	r3, #2
  }
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3718      	adds	r7, #24
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	80002400 	.word	0x80002400
 8006d6c:	fe00e800 	.word	0xfe00e800

08006d70 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af02      	add	r7, sp, #8
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	4608      	mov	r0, r1
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	4603      	mov	r3, r0
 8006d80:	817b      	strh	r3, [r7, #10]
 8006d82:	460b      	mov	r3, r1
 8006d84:	813b      	strh	r3, [r7, #8]
 8006d86:	4613      	mov	r3, r2
 8006d88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006d8a:	88fb      	ldrh	r3, [r7, #6]
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	8979      	ldrh	r1, [r7, #10]
 8006d90:	4b20      	ldr	r3, [pc, #128]	; (8006e14 <I2C_RequestMemoryWrite+0xa4>)
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f000 f9d7 	bl	800714c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d9e:	69fa      	ldr	r2, [r7, #28]
 8006da0:	69b9      	ldr	r1, [r7, #24]
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 f8f0 	bl	8006f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e02c      	b.n	8006e0c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006db2:	88fb      	ldrh	r3, [r7, #6]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d105      	bne.n	8006dc4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006db8:	893b      	ldrh	r3, [r7, #8]
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	629a      	str	r2, [r3, #40]	; 0x28
 8006dc2:	e015      	b.n	8006df0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006dc4:	893b      	ldrh	r3, [r7, #8]
 8006dc6:	0a1b      	lsrs	r3, r3, #8
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dd2:	69fa      	ldr	r2, [r7, #28]
 8006dd4:	69b9      	ldr	r1, [r7, #24]
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f000 f8d6 	bl	8006f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e012      	b.n	8006e0c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006de6:	893b      	ldrh	r3, [r7, #8]
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	2200      	movs	r2, #0
 8006df8:	2180      	movs	r1, #128	; 0x80
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 f884 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e000      	b.n	8006e0c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	80002000 	.word	0x80002000

08006e18 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af02      	add	r7, sp, #8
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	4608      	mov	r0, r1
 8006e22:	4611      	mov	r1, r2
 8006e24:	461a      	mov	r2, r3
 8006e26:	4603      	mov	r3, r0
 8006e28:	817b      	strh	r3, [r7, #10]
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	813b      	strh	r3, [r7, #8]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006e32:	88fb      	ldrh	r3, [r7, #6]
 8006e34:	b2da      	uxtb	r2, r3
 8006e36:	8979      	ldrh	r1, [r7, #10]
 8006e38:	4b20      	ldr	r3, [pc, #128]	; (8006ebc <I2C_RequestMemoryRead+0xa4>)
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f000 f984 	bl	800714c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e44:	69fa      	ldr	r2, [r7, #28]
 8006e46:	69b9      	ldr	r1, [r7, #24]
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f000 f89d 	bl	8006f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e02c      	b.n	8006eb2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e58:	88fb      	ldrh	r3, [r7, #6]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d105      	bne.n	8006e6a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e5e:	893b      	ldrh	r3, [r7, #8]
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	629a      	str	r2, [r3, #40]	; 0x28
 8006e68:	e015      	b.n	8006e96 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e6a:	893b      	ldrh	r3, [r7, #8]
 8006e6c:	0a1b      	lsrs	r3, r3, #8
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e78:	69fa      	ldr	r2, [r7, #28]
 8006e7a:	69b9      	ldr	r1, [r7, #24]
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 f883 	bl	8006f88 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e012      	b.n	8006eb2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e8c:	893b      	ldrh	r3, [r7, #8]
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	2140      	movs	r1, #64	; 0x40
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f000 f831 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e000      	b.n	8006eb2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	80002000 	.word	0x80002000

08006ec0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d103      	bne.n	8006ede <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2200      	movs	r2, #0
 8006edc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d007      	beq.n	8006efc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	699a      	ldr	r2, [r3, #24]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 0201 	orr.w	r2, r2, #1
 8006efa:	619a      	str	r2, [r3, #24]
  }
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	603b      	str	r3, [r7, #0]
 8006f14:	4613      	mov	r3, r2
 8006f16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f18:	e022      	b.n	8006f60 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f20:	d01e      	beq.n	8006f60 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f22:	f7ff f9a7 	bl	8006274 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d302      	bcc.n	8006f38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d113      	bne.n	8006f60 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f3c:	f043 0220 	orr.w	r2, r3, #32
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2220      	movs	r2, #32
 8006f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e00f      	b.n	8006f80 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	699a      	ldr	r2, [r3, #24]
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	4013      	ands	r3, r2
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	bf0c      	ite	eq
 8006f70:	2301      	moveq	r3, #1
 8006f72:	2300      	movne	r3, #0
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	461a      	mov	r2, r3
 8006f78:	79fb      	ldrb	r3, [r7, #7]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d0cd      	beq.n	8006f1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006f94:	e02c      	b.n	8006ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	68b9      	ldr	r1, [r7, #8]
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f000 f870 	bl	8007080 <I2C_IsAcknowledgeFailed>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d001      	beq.n	8006faa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e02a      	b.n	8007000 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb0:	d01e      	beq.n	8006ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fb2:	f7ff f95f 	bl	8006274 <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d302      	bcc.n	8006fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d113      	bne.n	8006ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fcc:	f043 0220 	orr.w	r2, r3, #32
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e007      	b.n	8007000 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	f003 0302 	and.w	r3, r3, #2
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d1cb      	bne.n	8006f96 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007014:	e028      	b.n	8007068 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	68b9      	ldr	r1, [r7, #8]
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 f830 	bl	8007080 <I2C_IsAcknowledgeFailed>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e026      	b.n	8007078 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800702a:	f7ff f923 	bl	8006274 <HAL_GetTick>
 800702e:	4602      	mov	r2, r0
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	429a      	cmp	r2, r3
 8007038:	d302      	bcc.n	8007040 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d113      	bne.n	8007068 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007044:	f043 0220 	orr.w	r2, r3, #32
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2220      	movs	r2, #32
 8007050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e007      	b.n	8007078 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b20      	cmp	r3, #32
 8007074:	d1cf      	bne.n	8007016 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	f003 0310 	and.w	r3, r3, #16
 8007096:	2b10      	cmp	r3, #16
 8007098:	d151      	bne.n	800713e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800709a:	e022      	b.n	80070e2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a2:	d01e      	beq.n	80070e2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070a4:	f7ff f8e6 	bl	8006274 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d302      	bcc.n	80070ba <I2C_IsAcknowledgeFailed+0x3a>
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d113      	bne.n	80070e2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070be:	f043 0220 	orr.w	r2, r3, #32
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2220      	movs	r2, #32
 80070ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e02e      	b.n	8007140 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	f003 0320 	and.w	r3, r3, #32
 80070ec:	2b20      	cmp	r3, #32
 80070ee:	d1d5      	bne.n	800709c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2210      	movs	r2, #16
 80070f6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2220      	movs	r2, #32
 80070fe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f7ff fedd 	bl	8006ec0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6859      	ldr	r1, [r3, #4]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	4b0d      	ldr	r3, [pc, #52]	; (8007148 <I2C_IsAcknowledgeFailed+0xc8>)
 8007112:	400b      	ands	r3, r1
 8007114:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800711a:	f043 0204 	orr.w	r2, r3, #4
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2220      	movs	r2, #32
 8007126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e000      	b.n	8007140 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	fe00e800 	.word	0xfe00e800

0800714c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	607b      	str	r3, [r7, #4]
 8007156:	460b      	mov	r3, r1
 8007158:	817b      	strh	r3, [r7, #10]
 800715a:	4613      	mov	r3, r2
 800715c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	0d5b      	lsrs	r3, r3, #21
 8007168:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800716c:	4b0d      	ldr	r3, [pc, #52]	; (80071a4 <I2C_TransferConfig+0x58>)
 800716e:	430b      	orrs	r3, r1
 8007170:	43db      	mvns	r3, r3
 8007172:	ea02 0103 	and.w	r1, r2, r3
 8007176:	897b      	ldrh	r3, [r7, #10]
 8007178:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800717c:	7a7b      	ldrb	r3, [r7, #9]
 800717e:	041b      	lsls	r3, r3, #16
 8007180:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007184:	431a      	orrs	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	431a      	orrs	r2, r3
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	431a      	orrs	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007196:	bf00      	nop
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	03ff63ff 	.word	0x03ff63ff

080071a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b20      	cmp	r3, #32
 80071bc:	d138      	bne.n	8007230 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d101      	bne.n	80071cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80071c8:	2302      	movs	r3, #2
 80071ca:	e032      	b.n	8007232 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2224      	movs	r2, #36	; 0x24
 80071d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 0201 	bic.w	r2, r2, #1
 80071ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80071fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6819      	ldr	r1, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	430a      	orrs	r2, r1
 800720a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f042 0201 	orr.w	r2, r2, #1
 800721a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2220      	movs	r2, #32
 8007220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800722c:	2300      	movs	r3, #0
 800722e:	e000      	b.n	8007232 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007230:	2302      	movs	r3, #2
  }
}
 8007232:	4618      	mov	r0, r3
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800723e:	b480      	push	{r7}
 8007240:	b085      	sub	sp, #20
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b20      	cmp	r3, #32
 8007252:	d139      	bne.n	80072c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800725a:	2b01      	cmp	r3, #1
 800725c:	d101      	bne.n	8007262 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800725e:	2302      	movs	r3, #2
 8007260:	e033      	b.n	80072ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2224      	movs	r2, #36	; 0x24
 800726e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 0201 	bic.w	r2, r2, #1
 8007280:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007290:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	021b      	lsls	r3, r3, #8
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	4313      	orrs	r3, r2
 800729a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f042 0201 	orr.w	r2, r2, #1
 80072b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2220      	movs	r2, #32
 80072b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80072c4:	2300      	movs	r3, #0
 80072c6:	e000      	b.n	80072ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80072c8:	2302      	movs	r3, #2
  }
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
	...

080072d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d141      	bne.n	800736a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80072e6:	4b4b      	ldr	r3, [pc, #300]	; (8007414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80072ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072f2:	d131      	bne.n	8007358 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072f4:	4b47      	ldr	r3, [pc, #284]	; (8007414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072fa:	4a46      	ldr	r2, [pc, #280]	; (8007414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007300:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007304:	4b43      	ldr	r3, [pc, #268]	; (8007414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800730c:	4a41      	ldr	r2, [pc, #260]	; (8007414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800730e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007312:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007314:	4b40      	ldr	r3, [pc, #256]	; (8007418 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2232      	movs	r2, #50	; 0x32
 800731a:	fb02 f303 	mul.w	r3, r2, r3
 800731e:	4a3f      	ldr	r2, [pc, #252]	; (800741c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007320:	fba2 2303 	umull	r2, r3, r2, r3
 8007324:	0c9b      	lsrs	r3, r3, #18
 8007326:	3301      	adds	r3, #1
 8007328:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800732a:	e002      	b.n	8007332 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	3b01      	subs	r3, #1
 8007330:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007332:	4b38      	ldr	r3, [pc, #224]	; (8007414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800733a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800733e:	d102      	bne.n	8007346 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1f2      	bne.n	800732c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007346:	4b33      	ldr	r3, [pc, #204]	; (8007414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800734e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007352:	d158      	bne.n	8007406 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e057      	b.n	8007408 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007358:	4b2e      	ldr	r3, [pc, #184]	; (8007414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800735a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800735e:	4a2d      	ldr	r2, [pc, #180]	; (8007414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007364:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007368:	e04d      	b.n	8007406 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007370:	d141      	bne.n	80073f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007372:	4b28      	ldr	r3, [pc, #160]	; (8007414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800737a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800737e:	d131      	bne.n	80073e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007380:	4b24      	ldr	r3, [pc, #144]	; (8007414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007386:	4a23      	ldr	r2, [pc, #140]	; (8007414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800738c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007390:	4b20      	ldr	r3, [pc, #128]	; (8007414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007398:	4a1e      	ldr	r2, [pc, #120]	; (8007414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800739a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800739e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80073a0:	4b1d      	ldr	r3, [pc, #116]	; (8007418 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2232      	movs	r2, #50	; 0x32
 80073a6:	fb02 f303 	mul.w	r3, r2, r3
 80073aa:	4a1c      	ldr	r2, [pc, #112]	; (800741c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80073ac:	fba2 2303 	umull	r2, r3, r2, r3
 80073b0:	0c9b      	lsrs	r3, r3, #18
 80073b2:	3301      	adds	r3, #1
 80073b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80073b6:	e002      	b.n	80073be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3b01      	subs	r3, #1
 80073bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80073be:	4b15      	ldr	r3, [pc, #84]	; (8007414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ca:	d102      	bne.n	80073d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1f2      	bne.n	80073b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80073d2:	4b10      	ldr	r3, [pc, #64]	; (8007414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073de:	d112      	bne.n	8007406 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e011      	b.n	8007408 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80073e4:	4b0b      	ldr	r3, [pc, #44]	; (8007414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073ea:	4a0a      	ldr	r2, [pc, #40]	; (8007414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80073f4:	e007      	b.n	8007406 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80073f6:	4b07      	ldr	r3, [pc, #28]	; (8007414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80073fe:	4a05      	ldr	r2, [pc, #20]	; (8007414 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007400:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007404:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	40007000 	.word	0x40007000
 8007418:	20000004 	.word	0x20000004
 800741c:	431bde83 	.word	0x431bde83

08007420 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007420:	b480      	push	{r7}
 8007422:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007424:	4b05      	ldr	r3, [pc, #20]	; (800743c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	4a04      	ldr	r2, [pc, #16]	; (800743c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800742a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800742e:	6093      	str	r3, [r2, #8]
}
 8007430:	bf00      	nop
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	40007000 	.word	0x40007000

08007440 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b088      	sub	sp, #32
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e308      	b.n	8007a64 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	d075      	beq.n	800754a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800745e:	4ba3      	ldr	r3, [pc, #652]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f003 030c 	and.w	r3, r3, #12
 8007466:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007468:	4ba0      	ldr	r3, [pc, #640]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	f003 0303 	and.w	r3, r3, #3
 8007470:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	2b0c      	cmp	r3, #12
 8007476:	d102      	bne.n	800747e <HAL_RCC_OscConfig+0x3e>
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	2b03      	cmp	r3, #3
 800747c:	d002      	beq.n	8007484 <HAL_RCC_OscConfig+0x44>
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	2b08      	cmp	r3, #8
 8007482:	d10b      	bne.n	800749c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007484:	4b99      	ldr	r3, [pc, #612]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d05b      	beq.n	8007548 <HAL_RCC_OscConfig+0x108>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d157      	bne.n	8007548 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e2e3      	b.n	8007a64 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074a4:	d106      	bne.n	80074b4 <HAL_RCC_OscConfig+0x74>
 80074a6:	4b91      	ldr	r3, [pc, #580]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a90      	ldr	r2, [pc, #576]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 80074ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074b0:	6013      	str	r3, [r2, #0]
 80074b2:	e01d      	b.n	80074f0 <HAL_RCC_OscConfig+0xb0>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074bc:	d10c      	bne.n	80074d8 <HAL_RCC_OscConfig+0x98>
 80074be:	4b8b      	ldr	r3, [pc, #556]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a8a      	ldr	r2, [pc, #552]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 80074c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074c8:	6013      	str	r3, [r2, #0]
 80074ca:	4b88      	ldr	r3, [pc, #544]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a87      	ldr	r2, [pc, #540]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 80074d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074d4:	6013      	str	r3, [r2, #0]
 80074d6:	e00b      	b.n	80074f0 <HAL_RCC_OscConfig+0xb0>
 80074d8:	4b84      	ldr	r3, [pc, #528]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a83      	ldr	r2, [pc, #524]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 80074de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	4b81      	ldr	r3, [pc, #516]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a80      	ldr	r2, [pc, #512]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 80074ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d013      	beq.n	8007520 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074f8:	f7fe febc 	bl	8006274 <HAL_GetTick>
 80074fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074fe:	e008      	b.n	8007512 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007500:	f7fe feb8 	bl	8006274 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	2b64      	cmp	r3, #100	; 0x64
 800750c:	d901      	bls.n	8007512 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e2a8      	b.n	8007a64 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007512:	4b76      	ldr	r3, [pc, #472]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d0f0      	beq.n	8007500 <HAL_RCC_OscConfig+0xc0>
 800751e:	e014      	b.n	800754a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007520:	f7fe fea8 	bl	8006274 <HAL_GetTick>
 8007524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007526:	e008      	b.n	800753a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007528:	f7fe fea4 	bl	8006274 <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b64      	cmp	r3, #100	; 0x64
 8007534:	d901      	bls.n	800753a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e294      	b.n	8007a64 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800753a:	4b6c      	ldr	r3, [pc, #432]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1f0      	bne.n	8007528 <HAL_RCC_OscConfig+0xe8>
 8007546:	e000      	b.n	800754a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0302 	and.w	r3, r3, #2
 8007552:	2b00      	cmp	r3, #0
 8007554:	d075      	beq.n	8007642 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007556:	4b65      	ldr	r3, [pc, #404]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f003 030c 	and.w	r3, r3, #12
 800755e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007560:	4b62      	ldr	r3, [pc, #392]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f003 0303 	and.w	r3, r3, #3
 8007568:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	2b0c      	cmp	r3, #12
 800756e:	d102      	bne.n	8007576 <HAL_RCC_OscConfig+0x136>
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	2b02      	cmp	r3, #2
 8007574:	d002      	beq.n	800757c <HAL_RCC_OscConfig+0x13c>
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	2b04      	cmp	r3, #4
 800757a:	d11f      	bne.n	80075bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800757c:	4b5b      	ldr	r3, [pc, #364]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007584:	2b00      	cmp	r3, #0
 8007586:	d005      	beq.n	8007594 <HAL_RCC_OscConfig+0x154>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e267      	b.n	8007a64 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007594:	4b55      	ldr	r3, [pc, #340]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	061b      	lsls	r3, r3, #24
 80075a2:	4952      	ldr	r1, [pc, #328]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 80075a4:	4313      	orrs	r3, r2
 80075a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80075a8:	4b51      	ldr	r3, [pc, #324]	; (80076f0 <HAL_RCC_OscConfig+0x2b0>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fe fe15 	bl	80061dc <HAL_InitTick>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d043      	beq.n	8007640 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e253      	b.n	8007a64 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d023      	beq.n	800760c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075c4:	4b49      	ldr	r3, [pc, #292]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a48      	ldr	r2, [pc, #288]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 80075ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d0:	f7fe fe50 	bl	8006274 <HAL_GetTick>
 80075d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075d6:	e008      	b.n	80075ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075d8:	f7fe fe4c 	bl	8006274 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d901      	bls.n	80075ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e23c      	b.n	8007a64 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075ea:	4b40      	ldr	r3, [pc, #256]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0f0      	beq.n	80075d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075f6:	4b3d      	ldr	r3, [pc, #244]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	061b      	lsls	r3, r3, #24
 8007604:	4939      	ldr	r1, [pc, #228]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 8007606:	4313      	orrs	r3, r2
 8007608:	604b      	str	r3, [r1, #4]
 800760a:	e01a      	b.n	8007642 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800760c:	4b37      	ldr	r3, [pc, #220]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a36      	ldr	r2, [pc, #216]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 8007612:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007618:	f7fe fe2c 	bl	8006274 <HAL_GetTick>
 800761c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800761e:	e008      	b.n	8007632 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007620:	f7fe fe28 	bl	8006274 <HAL_GetTick>
 8007624:	4602      	mov	r2, r0
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	2b02      	cmp	r3, #2
 800762c:	d901      	bls.n	8007632 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e218      	b.n	8007a64 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007632:	4b2e      	ldr	r3, [pc, #184]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1f0      	bne.n	8007620 <HAL_RCC_OscConfig+0x1e0>
 800763e:	e000      	b.n	8007642 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007640:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0308 	and.w	r3, r3, #8
 800764a:	2b00      	cmp	r3, #0
 800764c:	d03c      	beq.n	80076c8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d01c      	beq.n	8007690 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007656:	4b25      	ldr	r3, [pc, #148]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 8007658:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800765c:	4a23      	ldr	r2, [pc, #140]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 800765e:	f043 0301 	orr.w	r3, r3, #1
 8007662:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007666:	f7fe fe05 	bl	8006274 <HAL_GetTick>
 800766a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800766c:	e008      	b.n	8007680 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800766e:	f7fe fe01 	bl	8006274 <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	2b02      	cmp	r3, #2
 800767a:	d901      	bls.n	8007680 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e1f1      	b.n	8007a64 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007680:	4b1a      	ldr	r3, [pc, #104]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 8007682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d0ef      	beq.n	800766e <HAL_RCC_OscConfig+0x22e>
 800768e:	e01b      	b.n	80076c8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007690:	4b16      	ldr	r3, [pc, #88]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 8007692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007696:	4a15      	ldr	r2, [pc, #84]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 8007698:	f023 0301 	bic.w	r3, r3, #1
 800769c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076a0:	f7fe fde8 	bl	8006274 <HAL_GetTick>
 80076a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80076a6:	e008      	b.n	80076ba <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076a8:	f7fe fde4 	bl	8006274 <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d901      	bls.n	80076ba <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e1d4      	b.n	8007a64 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80076ba:	4b0c      	ldr	r3, [pc, #48]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 80076bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076c0:	f003 0302 	and.w	r3, r3, #2
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1ef      	bne.n	80076a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0304 	and.w	r3, r3, #4
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 80ab 	beq.w	800782c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076d6:	2300      	movs	r3, #0
 80076d8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80076da:	4b04      	ldr	r3, [pc, #16]	; (80076ec <HAL_RCC_OscConfig+0x2ac>)
 80076dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d106      	bne.n	80076f4 <HAL_RCC_OscConfig+0x2b4>
 80076e6:	2301      	movs	r3, #1
 80076e8:	e005      	b.n	80076f6 <HAL_RCC_OscConfig+0x2b6>
 80076ea:	bf00      	nop
 80076ec:	40021000 	.word	0x40021000
 80076f0:	20000008 	.word	0x20000008
 80076f4:	2300      	movs	r3, #0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00d      	beq.n	8007716 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076fa:	4baf      	ldr	r3, [pc, #700]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 80076fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076fe:	4aae      	ldr	r2, [pc, #696]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 8007700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007704:	6593      	str	r3, [r2, #88]	; 0x58
 8007706:	4bac      	ldr	r3, [pc, #688]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 8007708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800770a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007712:	2301      	movs	r3, #1
 8007714:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007716:	4ba9      	ldr	r3, [pc, #676]	; (80079bc <HAL_RCC_OscConfig+0x57c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800771e:	2b00      	cmp	r3, #0
 8007720:	d118      	bne.n	8007754 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007722:	4ba6      	ldr	r3, [pc, #664]	; (80079bc <HAL_RCC_OscConfig+0x57c>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4aa5      	ldr	r2, [pc, #660]	; (80079bc <HAL_RCC_OscConfig+0x57c>)
 8007728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800772c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800772e:	f7fe fda1 	bl	8006274 <HAL_GetTick>
 8007732:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007734:	e008      	b.n	8007748 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007736:	f7fe fd9d 	bl	8006274 <HAL_GetTick>
 800773a:	4602      	mov	r2, r0
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	2b02      	cmp	r3, #2
 8007742:	d901      	bls.n	8007748 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e18d      	b.n	8007a64 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007748:	4b9c      	ldr	r3, [pc, #624]	; (80079bc <HAL_RCC_OscConfig+0x57c>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007750:	2b00      	cmp	r3, #0
 8007752:	d0f0      	beq.n	8007736 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d108      	bne.n	800776e <HAL_RCC_OscConfig+0x32e>
 800775c:	4b96      	ldr	r3, [pc, #600]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 800775e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007762:	4a95      	ldr	r2, [pc, #596]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 8007764:	f043 0301 	orr.w	r3, r3, #1
 8007768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800776c:	e024      	b.n	80077b8 <HAL_RCC_OscConfig+0x378>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	2b05      	cmp	r3, #5
 8007774:	d110      	bne.n	8007798 <HAL_RCC_OscConfig+0x358>
 8007776:	4b90      	ldr	r3, [pc, #576]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 8007778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800777c:	4a8e      	ldr	r2, [pc, #568]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 800777e:	f043 0304 	orr.w	r3, r3, #4
 8007782:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007786:	4b8c      	ldr	r3, [pc, #560]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 8007788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800778c:	4a8a      	ldr	r2, [pc, #552]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 800778e:	f043 0301 	orr.w	r3, r3, #1
 8007792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007796:	e00f      	b.n	80077b8 <HAL_RCC_OscConfig+0x378>
 8007798:	4b87      	ldr	r3, [pc, #540]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 800779a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800779e:	4a86      	ldr	r2, [pc, #536]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 80077a0:	f023 0301 	bic.w	r3, r3, #1
 80077a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80077a8:	4b83      	ldr	r3, [pc, #524]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 80077aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ae:	4a82      	ldr	r2, [pc, #520]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 80077b0:	f023 0304 	bic.w	r3, r3, #4
 80077b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d016      	beq.n	80077ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077c0:	f7fe fd58 	bl	8006274 <HAL_GetTick>
 80077c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077c6:	e00a      	b.n	80077de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077c8:	f7fe fd54 	bl	8006274 <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d901      	bls.n	80077de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e142      	b.n	8007a64 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077de:	4b76      	ldr	r3, [pc, #472]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 80077e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077e4:	f003 0302 	and.w	r3, r3, #2
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d0ed      	beq.n	80077c8 <HAL_RCC_OscConfig+0x388>
 80077ec:	e015      	b.n	800781a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ee:	f7fe fd41 	bl	8006274 <HAL_GetTick>
 80077f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80077f4:	e00a      	b.n	800780c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077f6:	f7fe fd3d 	bl	8006274 <HAL_GetTick>
 80077fa:	4602      	mov	r2, r0
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	f241 3288 	movw	r2, #5000	; 0x1388
 8007804:	4293      	cmp	r3, r2
 8007806:	d901      	bls.n	800780c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e12b      	b.n	8007a64 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800780c:	4b6a      	ldr	r3, [pc, #424]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 800780e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1ed      	bne.n	80077f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800781a:	7ffb      	ldrb	r3, [r7, #31]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d105      	bne.n	800782c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007820:	4b65      	ldr	r3, [pc, #404]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 8007822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007824:	4a64      	ldr	r2, [pc, #400]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 8007826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800782a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0320 	and.w	r3, r3, #32
 8007834:	2b00      	cmp	r3, #0
 8007836:	d03c      	beq.n	80078b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d01c      	beq.n	800787a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007840:	4b5d      	ldr	r3, [pc, #372]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 8007842:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007846:	4a5c      	ldr	r2, [pc, #368]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 8007848:	f043 0301 	orr.w	r3, r3, #1
 800784c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007850:	f7fe fd10 	bl	8006274 <HAL_GetTick>
 8007854:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007856:	e008      	b.n	800786a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007858:	f7fe fd0c 	bl	8006274 <HAL_GetTick>
 800785c:	4602      	mov	r2, r0
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	2b02      	cmp	r3, #2
 8007864:	d901      	bls.n	800786a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	e0fc      	b.n	8007a64 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800786a:	4b53      	ldr	r3, [pc, #332]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 800786c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007870:	f003 0302 	and.w	r3, r3, #2
 8007874:	2b00      	cmp	r3, #0
 8007876:	d0ef      	beq.n	8007858 <HAL_RCC_OscConfig+0x418>
 8007878:	e01b      	b.n	80078b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800787a:	4b4f      	ldr	r3, [pc, #316]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 800787c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007880:	4a4d      	ldr	r2, [pc, #308]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 8007882:	f023 0301 	bic.w	r3, r3, #1
 8007886:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800788a:	f7fe fcf3 	bl	8006274 <HAL_GetTick>
 800788e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007890:	e008      	b.n	80078a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007892:	f7fe fcef 	bl	8006274 <HAL_GetTick>
 8007896:	4602      	mov	r2, r0
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	2b02      	cmp	r3, #2
 800789e:	d901      	bls.n	80078a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e0df      	b.n	8007a64 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80078a4:	4b44      	ldr	r3, [pc, #272]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 80078a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078aa:	f003 0302 	and.w	r3, r3, #2
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1ef      	bne.n	8007892 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f000 80d3 	beq.w	8007a62 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80078bc:	4b3e      	ldr	r3, [pc, #248]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	f003 030c 	and.w	r3, r3, #12
 80078c4:	2b0c      	cmp	r3, #12
 80078c6:	f000 808d 	beq.w	80079e4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d15a      	bne.n	8007988 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078d2:	4b39      	ldr	r3, [pc, #228]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a38      	ldr	r2, [pc, #224]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 80078d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078de:	f7fe fcc9 	bl	8006274 <HAL_GetTick>
 80078e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078e4:	e008      	b.n	80078f8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078e6:	f7fe fcc5 	bl	8006274 <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d901      	bls.n	80078f8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e0b5      	b.n	8007a64 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078f8:	4b2f      	ldr	r3, [pc, #188]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1f0      	bne.n	80078e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007904:	4b2c      	ldr	r3, [pc, #176]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 8007906:	68da      	ldr	r2, [r3, #12]
 8007908:	4b2d      	ldr	r3, [pc, #180]	; (80079c0 <HAL_RCC_OscConfig+0x580>)
 800790a:	4013      	ands	r3, r2
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	6a11      	ldr	r1, [r2, #32]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007914:	3a01      	subs	r2, #1
 8007916:	0112      	lsls	r2, r2, #4
 8007918:	4311      	orrs	r1, r2
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800791e:	0212      	lsls	r2, r2, #8
 8007920:	4311      	orrs	r1, r2
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007926:	0852      	lsrs	r2, r2, #1
 8007928:	3a01      	subs	r2, #1
 800792a:	0552      	lsls	r2, r2, #21
 800792c:	4311      	orrs	r1, r2
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007932:	0852      	lsrs	r2, r2, #1
 8007934:	3a01      	subs	r2, #1
 8007936:	0652      	lsls	r2, r2, #25
 8007938:	4311      	orrs	r1, r2
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800793e:	06d2      	lsls	r2, r2, #27
 8007940:	430a      	orrs	r2, r1
 8007942:	491d      	ldr	r1, [pc, #116]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 8007944:	4313      	orrs	r3, r2
 8007946:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007948:	4b1b      	ldr	r3, [pc, #108]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a1a      	ldr	r2, [pc, #104]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 800794e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007952:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007954:	4b18      	ldr	r3, [pc, #96]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	4a17      	ldr	r2, [pc, #92]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 800795a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800795e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007960:	f7fe fc88 	bl	8006274 <HAL_GetTick>
 8007964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007966:	e008      	b.n	800797a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007968:	f7fe fc84 	bl	8006274 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	2b02      	cmp	r3, #2
 8007974:	d901      	bls.n	800797a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8007976:	2303      	movs	r3, #3
 8007978:	e074      	b.n	8007a64 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800797a:	4b0f      	ldr	r3, [pc, #60]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007982:	2b00      	cmp	r3, #0
 8007984:	d0f0      	beq.n	8007968 <HAL_RCC_OscConfig+0x528>
 8007986:	e06c      	b.n	8007a62 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007988:	4b0b      	ldr	r3, [pc, #44]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a0a      	ldr	r2, [pc, #40]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 800798e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007992:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007994:	4b08      	ldr	r3, [pc, #32]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	4a07      	ldr	r2, [pc, #28]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 800799a:	f023 0303 	bic.w	r3, r3, #3
 800799e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80079a0:	4b05      	ldr	r3, [pc, #20]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	4a04      	ldr	r2, [pc, #16]	; (80079b8 <HAL_RCC_OscConfig+0x578>)
 80079a6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80079aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b0:	f7fe fc60 	bl	8006274 <HAL_GetTick>
 80079b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079b6:	e00e      	b.n	80079d6 <HAL_RCC_OscConfig+0x596>
 80079b8:	40021000 	.word	0x40021000
 80079bc:	40007000 	.word	0x40007000
 80079c0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079c4:	f7fe fc56 	bl	8006274 <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d901      	bls.n	80079d6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e046      	b.n	8007a64 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079d6:	4b25      	ldr	r3, [pc, #148]	; (8007a6c <HAL_RCC_OscConfig+0x62c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1f0      	bne.n	80079c4 <HAL_RCC_OscConfig+0x584>
 80079e2:	e03e      	b.n	8007a62 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d101      	bne.n	80079f0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e039      	b.n	8007a64 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80079f0:	4b1e      	ldr	r3, [pc, #120]	; (8007a6c <HAL_RCC_OscConfig+0x62c>)
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f003 0203 	and.w	r2, r3, #3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a1b      	ldr	r3, [r3, #32]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d12c      	bne.n	8007a5e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d123      	bne.n	8007a5e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a20:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d11b      	bne.n	8007a5e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d113      	bne.n	8007a5e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a40:	085b      	lsrs	r3, r3, #1
 8007a42:	3b01      	subs	r3, #1
 8007a44:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d109      	bne.n	8007a5e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a54:	085b      	lsrs	r3, r3, #1
 8007a56:	3b01      	subs	r3, #1
 8007a58:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d001      	beq.n	8007a62 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e000      	b.n	8007a64 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3720      	adds	r7, #32
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	40021000 	.word	0x40021000

08007a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e11e      	b.n	8007cc6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a88:	4b91      	ldr	r3, [pc, #580]	; (8007cd0 <HAL_RCC_ClockConfig+0x260>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 030f 	and.w	r3, r3, #15
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d910      	bls.n	8007ab8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a96:	4b8e      	ldr	r3, [pc, #568]	; (8007cd0 <HAL_RCC_ClockConfig+0x260>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f023 020f 	bic.w	r2, r3, #15
 8007a9e:	498c      	ldr	r1, [pc, #560]	; (8007cd0 <HAL_RCC_ClockConfig+0x260>)
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aa6:	4b8a      	ldr	r3, [pc, #552]	; (8007cd0 <HAL_RCC_ClockConfig+0x260>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 030f 	and.w	r3, r3, #15
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d001      	beq.n	8007ab8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e106      	b.n	8007cc6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d073      	beq.n	8007bac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	2b03      	cmp	r3, #3
 8007aca:	d129      	bne.n	8007b20 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007acc:	4b81      	ldr	r3, [pc, #516]	; (8007cd4 <HAL_RCC_ClockConfig+0x264>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e0f4      	b.n	8007cc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007adc:	f000 f966 	bl	8007dac <RCC_GetSysClockFreqFromPLLSource>
 8007ae0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	4a7c      	ldr	r2, [pc, #496]	; (8007cd8 <HAL_RCC_ClockConfig+0x268>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d93f      	bls.n	8007b6a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007aea:	4b7a      	ldr	r3, [pc, #488]	; (8007cd4 <HAL_RCC_ClockConfig+0x264>)
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d009      	beq.n	8007b0a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d033      	beq.n	8007b6a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d12f      	bne.n	8007b6a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007b0a:	4b72      	ldr	r3, [pc, #456]	; (8007cd4 <HAL_RCC_ClockConfig+0x264>)
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b12:	4a70      	ldr	r2, [pc, #448]	; (8007cd4 <HAL_RCC_ClockConfig+0x264>)
 8007b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007b1a:	2380      	movs	r3, #128	; 0x80
 8007b1c:	617b      	str	r3, [r7, #20]
 8007b1e:	e024      	b.n	8007b6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d107      	bne.n	8007b38 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b28:	4b6a      	ldr	r3, [pc, #424]	; (8007cd4 <HAL_RCC_ClockConfig+0x264>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d109      	bne.n	8007b48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e0c6      	b.n	8007cc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b38:	4b66      	ldr	r3, [pc, #408]	; (8007cd4 <HAL_RCC_ClockConfig+0x264>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d101      	bne.n	8007b48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e0be      	b.n	8007cc6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007b48:	f000 f8ce 	bl	8007ce8 <HAL_RCC_GetSysClockFreq>
 8007b4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	4a61      	ldr	r2, [pc, #388]	; (8007cd8 <HAL_RCC_ClockConfig+0x268>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d909      	bls.n	8007b6a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007b56:	4b5f      	ldr	r3, [pc, #380]	; (8007cd4 <HAL_RCC_ClockConfig+0x264>)
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b5e:	4a5d      	ldr	r2, [pc, #372]	; (8007cd4 <HAL_RCC_ClockConfig+0x264>)
 8007b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007b66:	2380      	movs	r3, #128	; 0x80
 8007b68:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007b6a:	4b5a      	ldr	r3, [pc, #360]	; (8007cd4 <HAL_RCC_ClockConfig+0x264>)
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f023 0203 	bic.w	r2, r3, #3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	4957      	ldr	r1, [pc, #348]	; (8007cd4 <HAL_RCC_ClockConfig+0x264>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b7c:	f7fe fb7a 	bl	8006274 <HAL_GetTick>
 8007b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b82:	e00a      	b.n	8007b9a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b84:	f7fe fb76 	bl	8006274 <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d901      	bls.n	8007b9a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e095      	b.n	8007cc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b9a:	4b4e      	ldr	r3, [pc, #312]	; (8007cd4 <HAL_RCC_ClockConfig+0x264>)
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f003 020c 	and.w	r2, r3, #12
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d1eb      	bne.n	8007b84 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0302 	and.w	r3, r3, #2
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d023      	beq.n	8007c00 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0304 	and.w	r3, r3, #4
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d005      	beq.n	8007bd0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bc4:	4b43      	ldr	r3, [pc, #268]	; (8007cd4 <HAL_RCC_ClockConfig+0x264>)
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	4a42      	ldr	r2, [pc, #264]	; (8007cd4 <HAL_RCC_ClockConfig+0x264>)
 8007bca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007bce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 0308 	and.w	r3, r3, #8
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d007      	beq.n	8007bec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007bdc:	4b3d      	ldr	r3, [pc, #244]	; (8007cd4 <HAL_RCC_ClockConfig+0x264>)
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007be4:	4a3b      	ldr	r2, [pc, #236]	; (8007cd4 <HAL_RCC_ClockConfig+0x264>)
 8007be6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007bea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bec:	4b39      	ldr	r3, [pc, #228]	; (8007cd4 <HAL_RCC_ClockConfig+0x264>)
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	4936      	ldr	r1, [pc, #216]	; (8007cd4 <HAL_RCC_ClockConfig+0x264>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	608b      	str	r3, [r1, #8]
 8007bfe:	e008      	b.n	8007c12 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	2b80      	cmp	r3, #128	; 0x80
 8007c04:	d105      	bne.n	8007c12 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007c06:	4b33      	ldr	r3, [pc, #204]	; (8007cd4 <HAL_RCC_ClockConfig+0x264>)
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	4a32      	ldr	r2, [pc, #200]	; (8007cd4 <HAL_RCC_ClockConfig+0x264>)
 8007c0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c10:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c12:	4b2f      	ldr	r3, [pc, #188]	; (8007cd0 <HAL_RCC_ClockConfig+0x260>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 030f 	and.w	r3, r3, #15
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d21d      	bcs.n	8007c5c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c20:	4b2b      	ldr	r3, [pc, #172]	; (8007cd0 <HAL_RCC_ClockConfig+0x260>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f023 020f 	bic.w	r2, r3, #15
 8007c28:	4929      	ldr	r1, [pc, #164]	; (8007cd0 <HAL_RCC_ClockConfig+0x260>)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007c30:	f7fe fb20 	bl	8006274 <HAL_GetTick>
 8007c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c36:	e00a      	b.n	8007c4e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c38:	f7fe fb1c 	bl	8006274 <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d901      	bls.n	8007c4e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e03b      	b.n	8007cc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c4e:	4b20      	ldr	r3, [pc, #128]	; (8007cd0 <HAL_RCC_ClockConfig+0x260>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 030f 	and.w	r3, r3, #15
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d1ed      	bne.n	8007c38 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0304 	and.w	r3, r3, #4
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d008      	beq.n	8007c7a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c68:	4b1a      	ldr	r3, [pc, #104]	; (8007cd4 <HAL_RCC_ClockConfig+0x264>)
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	4917      	ldr	r1, [pc, #92]	; (8007cd4 <HAL_RCC_ClockConfig+0x264>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 0308 	and.w	r3, r3, #8
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d009      	beq.n	8007c9a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c86:	4b13      	ldr	r3, [pc, #76]	; (8007cd4 <HAL_RCC_ClockConfig+0x264>)
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	00db      	lsls	r3, r3, #3
 8007c94:	490f      	ldr	r1, [pc, #60]	; (8007cd4 <HAL_RCC_ClockConfig+0x264>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007c9a:	f000 f825 	bl	8007ce8 <HAL_RCC_GetSysClockFreq>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	4b0c      	ldr	r3, [pc, #48]	; (8007cd4 <HAL_RCC_ClockConfig+0x264>)
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	091b      	lsrs	r3, r3, #4
 8007ca6:	f003 030f 	and.w	r3, r3, #15
 8007caa:	490c      	ldr	r1, [pc, #48]	; (8007cdc <HAL_RCC_ClockConfig+0x26c>)
 8007cac:	5ccb      	ldrb	r3, [r1, r3]
 8007cae:	f003 031f 	and.w	r3, r3, #31
 8007cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cb6:	4a0a      	ldr	r2, [pc, #40]	; (8007ce0 <HAL_RCC_ClockConfig+0x270>)
 8007cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007cba:	4b0a      	ldr	r3, [pc, #40]	; (8007ce4 <HAL_RCC_ClockConfig+0x274>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fe fa8c 	bl	80061dc <HAL_InitTick>
 8007cc4:	4603      	mov	r3, r0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3718      	adds	r7, #24
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	40022000 	.word	0x40022000
 8007cd4:	40021000 	.word	0x40021000
 8007cd8:	04c4b400 	.word	0x04c4b400
 8007cdc:	0800912c 	.word	0x0800912c
 8007ce0:	20000004 	.word	0x20000004
 8007ce4:	20000008 	.word	0x20000008

08007ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007cee:	4b2c      	ldr	r3, [pc, #176]	; (8007da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f003 030c 	and.w	r3, r3, #12
 8007cf6:	2b04      	cmp	r3, #4
 8007cf8:	d102      	bne.n	8007d00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007cfa:	4b2a      	ldr	r3, [pc, #168]	; (8007da4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007cfc:	613b      	str	r3, [r7, #16]
 8007cfe:	e047      	b.n	8007d90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007d00:	4b27      	ldr	r3, [pc, #156]	; (8007da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f003 030c 	and.w	r3, r3, #12
 8007d08:	2b08      	cmp	r3, #8
 8007d0a:	d102      	bne.n	8007d12 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007d0c:	4b26      	ldr	r3, [pc, #152]	; (8007da8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007d0e:	613b      	str	r3, [r7, #16]
 8007d10:	e03e      	b.n	8007d90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007d12:	4b23      	ldr	r3, [pc, #140]	; (8007da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f003 030c 	and.w	r3, r3, #12
 8007d1a:	2b0c      	cmp	r3, #12
 8007d1c:	d136      	bne.n	8007d8c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007d1e:	4b20      	ldr	r3, [pc, #128]	; (8007da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	f003 0303 	and.w	r3, r3, #3
 8007d26:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d28:	4b1d      	ldr	r3, [pc, #116]	; (8007da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	091b      	lsrs	r3, r3, #4
 8007d2e:	f003 030f 	and.w	r3, r3, #15
 8007d32:	3301      	adds	r3, #1
 8007d34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d10c      	bne.n	8007d56 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d3c:	4a1a      	ldr	r2, [pc, #104]	; (8007da8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d44:	4a16      	ldr	r2, [pc, #88]	; (8007da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d46:	68d2      	ldr	r2, [r2, #12]
 8007d48:	0a12      	lsrs	r2, r2, #8
 8007d4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007d4e:	fb02 f303 	mul.w	r3, r2, r3
 8007d52:	617b      	str	r3, [r7, #20]
      break;
 8007d54:	e00c      	b.n	8007d70 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d56:	4a13      	ldr	r2, [pc, #76]	; (8007da4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d5e:	4a10      	ldr	r2, [pc, #64]	; (8007da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d60:	68d2      	ldr	r2, [r2, #12]
 8007d62:	0a12      	lsrs	r2, r2, #8
 8007d64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007d68:	fb02 f303 	mul.w	r3, r2, r3
 8007d6c:	617b      	str	r3, [r7, #20]
      break;
 8007d6e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d70:	4b0b      	ldr	r3, [pc, #44]	; (8007da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	0e5b      	lsrs	r3, r3, #25
 8007d76:	f003 0303 	and.w	r3, r3, #3
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	005b      	lsls	r3, r3, #1
 8007d7e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007d80:	697a      	ldr	r2, [r7, #20]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d88:	613b      	str	r3, [r7, #16]
 8007d8a:	e001      	b.n	8007d90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007d90:	693b      	ldr	r3, [r7, #16]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	371c      	adds	r7, #28
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	40021000 	.word	0x40021000
 8007da4:	00f42400 	.word	0x00f42400
 8007da8:	007a1200 	.word	0x007a1200

08007dac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007db2:	4b1e      	ldr	r3, [pc, #120]	; (8007e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	f003 0303 	and.w	r3, r3, #3
 8007dba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007dbc:	4b1b      	ldr	r3, [pc, #108]	; (8007e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	091b      	lsrs	r3, r3, #4
 8007dc2:	f003 030f 	and.w	r3, r3, #15
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	2b03      	cmp	r3, #3
 8007dce:	d10c      	bne.n	8007dea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007dd0:	4a17      	ldr	r2, [pc, #92]	; (8007e30 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd8:	4a14      	ldr	r2, [pc, #80]	; (8007e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007dda:	68d2      	ldr	r2, [r2, #12]
 8007ddc:	0a12      	lsrs	r2, r2, #8
 8007dde:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007de2:	fb02 f303 	mul.w	r3, r2, r3
 8007de6:	617b      	str	r3, [r7, #20]
    break;
 8007de8:	e00c      	b.n	8007e04 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007dea:	4a12      	ldr	r2, [pc, #72]	; (8007e34 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df2:	4a0e      	ldr	r2, [pc, #56]	; (8007e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007df4:	68d2      	ldr	r2, [r2, #12]
 8007df6:	0a12      	lsrs	r2, r2, #8
 8007df8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007dfc:	fb02 f303 	mul.w	r3, r2, r3
 8007e00:	617b      	str	r3, [r7, #20]
    break;
 8007e02:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007e04:	4b09      	ldr	r3, [pc, #36]	; (8007e2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	0e5b      	lsrs	r3, r3, #25
 8007e0a:	f003 0303 	and.w	r3, r3, #3
 8007e0e:	3301      	adds	r3, #1
 8007e10:	005b      	lsls	r3, r3, #1
 8007e12:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e1c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007e1e:	687b      	ldr	r3, [r7, #4]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	371c      	adds	r7, #28
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr
 8007e2c:	40021000 	.word	0x40021000
 8007e30:	007a1200 	.word	0x007a1200
 8007e34:	00f42400 	.word	0x00f42400

08007e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007e40:	2300      	movs	r3, #0
 8007e42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e44:	2300      	movs	r3, #0
 8007e46:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f000 8098 	beq.w	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e56:	2300      	movs	r3, #0
 8007e58:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e5a:	4b43      	ldr	r3, [pc, #268]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d10d      	bne.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e66:	4b40      	ldr	r3, [pc, #256]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e6a:	4a3f      	ldr	r2, [pc, #252]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e70:	6593      	str	r3, [r2, #88]	; 0x58
 8007e72:	4b3d      	ldr	r3, [pc, #244]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e7a:	60bb      	str	r3, [r7, #8]
 8007e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e82:	4b3a      	ldr	r3, [pc, #232]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a39      	ldr	r2, [pc, #228]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e8e:	f7fe f9f1 	bl	8006274 <HAL_GetTick>
 8007e92:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e94:	e009      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e96:	f7fe f9ed 	bl	8006274 <HAL_GetTick>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d902      	bls.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	74fb      	strb	r3, [r7, #19]
        break;
 8007ea8:	e005      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007eaa:	4b30      	ldr	r3, [pc, #192]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0ef      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007eb6:	7cfb      	ldrb	r3, [r7, #19]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d159      	bne.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007ebc:	4b2a      	ldr	r3, [pc, #168]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ec6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d01e      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d019      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007ed8:	4b23      	ldr	r3, [pc, #140]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ee2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ee4:	4b20      	ldr	r3, [pc, #128]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eea:	4a1f      	ldr	r2, [pc, #124]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ef4:	4b1c      	ldr	r3, [pc, #112]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007efa:	4a1b      	ldr	r2, [pc, #108]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007f04:	4a18      	ldr	r2, [pc, #96]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d016      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f16:	f7fe f9ad 	bl	8006274 <HAL_GetTick>
 8007f1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f1c:	e00b      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f1e:	f7fe f9a9 	bl	8006274 <HAL_GetTick>
 8007f22:	4602      	mov	r2, r0
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d902      	bls.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007f30:	2303      	movs	r3, #3
 8007f32:	74fb      	strb	r3, [r7, #19]
            break;
 8007f34:	e006      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f36:	4b0c      	ldr	r3, [pc, #48]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f3c:	f003 0302 	and.w	r3, r3, #2
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d0ec      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007f44:	7cfb      	ldrb	r3, [r7, #19]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10b      	bne.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f4a:	4b07      	ldr	r3, [pc, #28]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f58:	4903      	ldr	r1, [pc, #12]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007f60:	e008      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f62:	7cfb      	ldrb	r3, [r7, #19]
 8007f64:	74bb      	strb	r3, [r7, #18]
 8007f66:	e005      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007f68:	40021000 	.word	0x40021000
 8007f6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f70:	7cfb      	ldrb	r3, [r7, #19]
 8007f72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f74:	7c7b      	ldrb	r3, [r7, #17]
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d105      	bne.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f7a:	4baf      	ldr	r3, [pc, #700]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f7e:	4aae      	ldr	r2, [pc, #696]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00a      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007f92:	4ba9      	ldr	r3, [pc, #676]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f98:	f023 0203 	bic.w	r2, r3, #3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	49a5      	ldr	r1, [pc, #660]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0302 	and.w	r3, r3, #2
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00a      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007fb4:	4ba0      	ldr	r3, [pc, #640]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fba:	f023 020c 	bic.w	r2, r3, #12
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	499d      	ldr	r1, [pc, #628]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0304 	and.w	r3, r3, #4
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00a      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007fd6:	4b98      	ldr	r3, [pc, #608]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fdc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	4994      	ldr	r1, [pc, #592]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0308 	and.w	r3, r3, #8
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00a      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ff8:	4b8f      	ldr	r3, [pc, #572]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8007ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ffe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	498c      	ldr	r1, [pc, #560]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008008:	4313      	orrs	r3, r2
 800800a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0310 	and.w	r3, r3, #16
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00a      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800801a:	4b87      	ldr	r3, [pc, #540]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800801c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008020:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	4983      	ldr	r1, [pc, #524]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800802a:	4313      	orrs	r3, r2
 800802c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0320 	and.w	r3, r3, #32
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00a      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800803c:	4b7e      	ldr	r3, [pc, #504]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800803e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008042:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	497b      	ldr	r1, [pc, #492]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800804c:	4313      	orrs	r3, r2
 800804e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00a      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800805e:	4b76      	ldr	r3, [pc, #472]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008064:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	69db      	ldr	r3, [r3, #28]
 800806c:	4972      	ldr	r1, [pc, #456]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800806e:	4313      	orrs	r3, r2
 8008070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00a      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008080:	4b6d      	ldr	r3, [pc, #436]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008086:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	496a      	ldr	r1, [pc, #424]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008090:	4313      	orrs	r3, r2
 8008092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00a      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80080a2:	4b65      	ldr	r3, [pc, #404]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80080a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b0:	4961      	ldr	r1, [pc, #388]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00a      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80080c4:	4b5c      	ldr	r3, [pc, #368]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80080c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80080ca:	f023 0203 	bic.w	r2, r3, #3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d2:	4959      	ldr	r1, [pc, #356]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80080d4:	4313      	orrs	r3, r2
 80080d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00a      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080e6:	4b54      	ldr	r3, [pc, #336]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80080e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f4:	4950      	ldr	r1, [pc, #320]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008104:	2b00      	cmp	r3, #0
 8008106:	d015      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008108:	4b4b      	ldr	r3, [pc, #300]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800810a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800810e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008116:	4948      	ldr	r1, [pc, #288]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008118:	4313      	orrs	r3, r2
 800811a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008122:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008126:	d105      	bne.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008128:	4b43      	ldr	r3, [pc, #268]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	4a42      	ldr	r2, [pc, #264]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800812e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008132:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800813c:	2b00      	cmp	r3, #0
 800813e:	d015      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008140:	4b3d      	ldr	r3, [pc, #244]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008146:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800814e:	493a      	ldr	r1, [pc, #232]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008150:	4313      	orrs	r3, r2
 8008152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800815a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800815e:	d105      	bne.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008160:	4b35      	ldr	r3, [pc, #212]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	4a34      	ldr	r2, [pc, #208]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008166:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800816a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d015      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008178:	4b2f      	ldr	r3, [pc, #188]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800817a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800817e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008186:	492c      	ldr	r1, [pc, #176]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008188:	4313      	orrs	r3, r2
 800818a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008192:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008196:	d105      	bne.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008198:	4b27      	ldr	r3, [pc, #156]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	4a26      	ldr	r2, [pc, #152]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800819e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081a2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d015      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80081b0:	4b21      	ldr	r3, [pc, #132]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80081b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081be:	491e      	ldr	r1, [pc, #120]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80081c0:	4313      	orrs	r3, r2
 80081c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081ce:	d105      	bne.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081d0:	4b19      	ldr	r3, [pc, #100]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	4a18      	ldr	r2, [pc, #96]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80081d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081da:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d015      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80081e8:	4b13      	ldr	r3, [pc, #76]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80081ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f6:	4910      	ldr	r1, [pc, #64]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008206:	d105      	bne.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008208:	4b0b      	ldr	r3, [pc, #44]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	4a0a      	ldr	r2, [pc, #40]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800820e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008212:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d018      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008220:	4b05      	ldr	r3, [pc, #20]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008226:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800822e:	4902      	ldr	r1, [pc, #8]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008230:	4313      	orrs	r3, r2
 8008232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008236:	e001      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8008238:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008240:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008244:	d105      	bne.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008246:	4b21      	ldr	r3, [pc, #132]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	4a20      	ldr	r2, [pc, #128]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800824c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008250:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800825a:	2b00      	cmp	r3, #0
 800825c:	d015      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800825e:	4b1b      	ldr	r3, [pc, #108]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8008260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008264:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800826c:	4917      	ldr	r1, [pc, #92]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800826e:	4313      	orrs	r3, r2
 8008270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800827c:	d105      	bne.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800827e:	4b13      	ldr	r3, [pc, #76]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	4a12      	ldr	r2, [pc, #72]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8008284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008288:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d015      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008296:	4b0d      	ldr	r3, [pc, #52]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8008298:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800829c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082a4:	4909      	ldr	r1, [pc, #36]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082b4:	d105      	bne.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082b6:	4b05      	ldr	r3, [pc, #20]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	4a04      	ldr	r2, [pc, #16]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80082bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082c0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80082c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3718      	adds	r7, #24
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	40021000 	.word	0x40021000

080082d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d101      	bne.n	80082e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e049      	b.n	8008376 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d106      	bne.n	80082fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7fd fe6a 	bl	8005fd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2202      	movs	r2, #2
 8008300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	3304      	adds	r3, #4
 800830c:	4619      	mov	r1, r3
 800830e:	4610      	mov	r0, r2
 8008310:	f000 fa56 	bl	80087c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
	...

08008380 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b01      	cmp	r3, #1
 8008392:	d001      	beq.n	8008398 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e054      	b.n	8008442 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2202      	movs	r2, #2
 800839c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68da      	ldr	r2, [r3, #12]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f042 0201 	orr.w	r2, r2, #1
 80083ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a26      	ldr	r2, [pc, #152]	; (8008450 <HAL_TIM_Base_Start_IT+0xd0>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d022      	beq.n	8008400 <HAL_TIM_Base_Start_IT+0x80>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083c2:	d01d      	beq.n	8008400 <HAL_TIM_Base_Start_IT+0x80>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a22      	ldr	r2, [pc, #136]	; (8008454 <HAL_TIM_Base_Start_IT+0xd4>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d018      	beq.n	8008400 <HAL_TIM_Base_Start_IT+0x80>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a21      	ldr	r2, [pc, #132]	; (8008458 <HAL_TIM_Base_Start_IT+0xd8>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d013      	beq.n	8008400 <HAL_TIM_Base_Start_IT+0x80>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a1f      	ldr	r2, [pc, #124]	; (800845c <HAL_TIM_Base_Start_IT+0xdc>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d00e      	beq.n	8008400 <HAL_TIM_Base_Start_IT+0x80>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a1e      	ldr	r2, [pc, #120]	; (8008460 <HAL_TIM_Base_Start_IT+0xe0>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d009      	beq.n	8008400 <HAL_TIM_Base_Start_IT+0x80>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a1c      	ldr	r2, [pc, #112]	; (8008464 <HAL_TIM_Base_Start_IT+0xe4>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d004      	beq.n	8008400 <HAL_TIM_Base_Start_IT+0x80>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a1b      	ldr	r2, [pc, #108]	; (8008468 <HAL_TIM_Base_Start_IT+0xe8>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d115      	bne.n	800842c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	689a      	ldr	r2, [r3, #8]
 8008406:	4b19      	ldr	r3, [pc, #100]	; (800846c <HAL_TIM_Base_Start_IT+0xec>)
 8008408:	4013      	ands	r3, r2
 800840a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2b06      	cmp	r3, #6
 8008410:	d015      	beq.n	800843e <HAL_TIM_Base_Start_IT+0xbe>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008418:	d011      	beq.n	800843e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f042 0201 	orr.w	r2, r2, #1
 8008428:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800842a:	e008      	b.n	800843e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f042 0201 	orr.w	r2, r2, #1
 800843a:	601a      	str	r2, [r3, #0]
 800843c:	e000      	b.n	8008440 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800843e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	40012c00 	.word	0x40012c00
 8008454:	40000400 	.word	0x40000400
 8008458:	40000800 	.word	0x40000800
 800845c:	40000c00 	.word	0x40000c00
 8008460:	40013400 	.word	0x40013400
 8008464:	40014000 	.word	0x40014000
 8008468:	40015000 	.word	0x40015000
 800846c:	00010007 	.word	0x00010007

08008470 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	f003 0302 	and.w	r3, r3, #2
 8008482:	2b02      	cmp	r3, #2
 8008484:	d122      	bne.n	80084cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	f003 0302 	and.w	r3, r3, #2
 8008490:	2b02      	cmp	r3, #2
 8008492:	d11b      	bne.n	80084cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f06f 0202 	mvn.w	r2, #2
 800849c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2201      	movs	r2, #1
 80084a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	f003 0303 	and.w	r3, r3, #3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d003      	beq.n	80084ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f965 	bl	8008782 <HAL_TIM_IC_CaptureCallback>
 80084b8:	e005      	b.n	80084c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f957 	bl	800876e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f968 	bl	8008796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	f003 0304 	and.w	r3, r3, #4
 80084d6:	2b04      	cmp	r3, #4
 80084d8:	d122      	bne.n	8008520 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	f003 0304 	and.w	r3, r3, #4
 80084e4:	2b04      	cmp	r3, #4
 80084e6:	d11b      	bne.n	8008520 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f06f 0204 	mvn.w	r2, #4
 80084f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2202      	movs	r2, #2
 80084f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008502:	2b00      	cmp	r3, #0
 8008504:	d003      	beq.n	800850e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f93b 	bl	8008782 <HAL_TIM_IC_CaptureCallback>
 800850c:	e005      	b.n	800851a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f92d 	bl	800876e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f93e 	bl	8008796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	f003 0308 	and.w	r3, r3, #8
 800852a:	2b08      	cmp	r3, #8
 800852c:	d122      	bne.n	8008574 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	f003 0308 	and.w	r3, r3, #8
 8008538:	2b08      	cmp	r3, #8
 800853a:	d11b      	bne.n	8008574 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f06f 0208 	mvn.w	r2, #8
 8008544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2204      	movs	r2, #4
 800854a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	69db      	ldr	r3, [r3, #28]
 8008552:	f003 0303 	and.w	r3, r3, #3
 8008556:	2b00      	cmp	r3, #0
 8008558:	d003      	beq.n	8008562 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f911 	bl	8008782 <HAL_TIM_IC_CaptureCallback>
 8008560:	e005      	b.n	800856e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f903 	bl	800876e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f914 	bl	8008796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	f003 0310 	and.w	r3, r3, #16
 800857e:	2b10      	cmp	r3, #16
 8008580:	d122      	bne.n	80085c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	f003 0310 	and.w	r3, r3, #16
 800858c:	2b10      	cmp	r3, #16
 800858e:	d11b      	bne.n	80085c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f06f 0210 	mvn.w	r2, #16
 8008598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2208      	movs	r2, #8
 800859e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	69db      	ldr	r3, [r3, #28]
 80085a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d003      	beq.n	80085b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f8e7 	bl	8008782 <HAL_TIM_IC_CaptureCallback>
 80085b4:	e005      	b.n	80085c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f8d9 	bl	800876e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f8ea 	bl	8008796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	f003 0301 	and.w	r3, r3, #1
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d10e      	bne.n	80085f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d107      	bne.n	80085f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f06f 0201 	mvn.w	r2, #1
 80085ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f7fc fa9e 	bl	8004b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085fe:	2b80      	cmp	r3, #128	; 0x80
 8008600:	d10e      	bne.n	8008620 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800860c:	2b80      	cmp	r3, #128	; 0x80
 800860e:	d107      	bne.n	8008620 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f982 	bl	8008924 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800862a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800862e:	d10e      	bne.n	800864e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800863a:	2b80      	cmp	r3, #128	; 0x80
 800863c:	d107      	bne.n	800864e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f975 	bl	8008938 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008658:	2b40      	cmp	r3, #64	; 0x40
 800865a:	d10e      	bne.n	800867a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008666:	2b40      	cmp	r3, #64	; 0x40
 8008668:	d107      	bne.n	800867a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f898 	bl	80087aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	f003 0320 	and.w	r3, r3, #32
 8008684:	2b20      	cmp	r3, #32
 8008686:	d10e      	bne.n	80086a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	f003 0320 	and.w	r3, r3, #32
 8008692:	2b20      	cmp	r3, #32
 8008694:	d107      	bne.n	80086a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f06f 0220 	mvn.w	r2, #32
 800869e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 f935 	bl	8008910 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086b4:	d10f      	bne.n	80086d6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086c4:	d107      	bne.n	80086d6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80086ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f93b 	bl	800894c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086e4:	d10f      	bne.n	8008706 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086f4:	d107      	bne.n	8008706 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80086fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f92d 	bl	8008960 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008710:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008714:	d10f      	bne.n	8008736 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008724:	d107      	bne.n	8008736 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800872e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f91f 	bl	8008974 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008740:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008744:	d10f      	bne.n	8008766 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008750:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008754:	d107      	bne.n	8008766 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800875e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 f911 	bl	8008988 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008766:	bf00      	nop
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800876e:	b480      	push	{r7}
 8008770:	b083      	sub	sp, #12
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008776:	bf00      	nop
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008782:	b480      	push	{r7}
 8008784:	b083      	sub	sp, #12
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800878a:	bf00      	nop
 800878c:	370c      	adds	r7, #12
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr

08008796 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008796:	b480      	push	{r7}
 8008798:	b083      	sub	sp, #12
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800879e:	bf00      	nop
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b083      	sub	sp, #12
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087b2:	bf00      	nop
 80087b4:	370c      	adds	r7, #12
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
	...

080087c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a46      	ldr	r2, [pc, #280]	; (80088ec <TIM_Base_SetConfig+0x12c>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d017      	beq.n	8008808 <TIM_Base_SetConfig+0x48>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087de:	d013      	beq.n	8008808 <TIM_Base_SetConfig+0x48>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a43      	ldr	r2, [pc, #268]	; (80088f0 <TIM_Base_SetConfig+0x130>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d00f      	beq.n	8008808 <TIM_Base_SetConfig+0x48>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a42      	ldr	r2, [pc, #264]	; (80088f4 <TIM_Base_SetConfig+0x134>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d00b      	beq.n	8008808 <TIM_Base_SetConfig+0x48>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a41      	ldr	r2, [pc, #260]	; (80088f8 <TIM_Base_SetConfig+0x138>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d007      	beq.n	8008808 <TIM_Base_SetConfig+0x48>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a40      	ldr	r2, [pc, #256]	; (80088fc <TIM_Base_SetConfig+0x13c>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d003      	beq.n	8008808 <TIM_Base_SetConfig+0x48>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a3f      	ldr	r2, [pc, #252]	; (8008900 <TIM_Base_SetConfig+0x140>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d108      	bne.n	800881a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800880e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	4313      	orrs	r3, r2
 8008818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a33      	ldr	r2, [pc, #204]	; (80088ec <TIM_Base_SetConfig+0x12c>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d023      	beq.n	800886a <TIM_Base_SetConfig+0xaa>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008828:	d01f      	beq.n	800886a <TIM_Base_SetConfig+0xaa>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a30      	ldr	r2, [pc, #192]	; (80088f0 <TIM_Base_SetConfig+0x130>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d01b      	beq.n	800886a <TIM_Base_SetConfig+0xaa>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a2f      	ldr	r2, [pc, #188]	; (80088f4 <TIM_Base_SetConfig+0x134>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d017      	beq.n	800886a <TIM_Base_SetConfig+0xaa>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a2e      	ldr	r2, [pc, #184]	; (80088f8 <TIM_Base_SetConfig+0x138>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d013      	beq.n	800886a <TIM_Base_SetConfig+0xaa>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a2d      	ldr	r2, [pc, #180]	; (80088fc <TIM_Base_SetConfig+0x13c>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d00f      	beq.n	800886a <TIM_Base_SetConfig+0xaa>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a2d      	ldr	r2, [pc, #180]	; (8008904 <TIM_Base_SetConfig+0x144>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d00b      	beq.n	800886a <TIM_Base_SetConfig+0xaa>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a2c      	ldr	r2, [pc, #176]	; (8008908 <TIM_Base_SetConfig+0x148>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d007      	beq.n	800886a <TIM_Base_SetConfig+0xaa>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a2b      	ldr	r2, [pc, #172]	; (800890c <TIM_Base_SetConfig+0x14c>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d003      	beq.n	800886a <TIM_Base_SetConfig+0xaa>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a26      	ldr	r2, [pc, #152]	; (8008900 <TIM_Base_SetConfig+0x140>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d108      	bne.n	800887c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	4313      	orrs	r3, r2
 800887a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	4313      	orrs	r3, r2
 8008888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	689a      	ldr	r2, [r3, #8]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a12      	ldr	r2, [pc, #72]	; (80088ec <TIM_Base_SetConfig+0x12c>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d013      	beq.n	80088d0 <TIM_Base_SetConfig+0x110>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a14      	ldr	r2, [pc, #80]	; (80088fc <TIM_Base_SetConfig+0x13c>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d00f      	beq.n	80088d0 <TIM_Base_SetConfig+0x110>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a14      	ldr	r2, [pc, #80]	; (8008904 <TIM_Base_SetConfig+0x144>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d00b      	beq.n	80088d0 <TIM_Base_SetConfig+0x110>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a13      	ldr	r2, [pc, #76]	; (8008908 <TIM_Base_SetConfig+0x148>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d007      	beq.n	80088d0 <TIM_Base_SetConfig+0x110>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a12      	ldr	r2, [pc, #72]	; (800890c <TIM_Base_SetConfig+0x14c>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d003      	beq.n	80088d0 <TIM_Base_SetConfig+0x110>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a0d      	ldr	r2, [pc, #52]	; (8008900 <TIM_Base_SetConfig+0x140>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d103      	bne.n	80088d8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	691a      	ldr	r2, [r3, #16]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	615a      	str	r2, [r3, #20]
}
 80088de:	bf00      	nop
 80088e0:	3714      	adds	r7, #20
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	40012c00 	.word	0x40012c00
 80088f0:	40000400 	.word	0x40000400
 80088f4:	40000800 	.word	0x40000800
 80088f8:	40000c00 	.word	0x40000c00
 80088fc:	40013400 	.word	0x40013400
 8008900:	40015000 	.word	0x40015000
 8008904:	40014000 	.word	0x40014000
 8008908:	40014400 	.word	0x40014400
 800890c:	40014800 	.word	0x40014800

08008910 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008918:	bf00      	nop
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008968:	bf00      	nop
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008990:	bf00      	nop
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <_ZdlPv>:
 800899c:	f000 ba6a 	b.w	8008e74 <free>

080089a0 <_Znwj>:
 80089a0:	2801      	cmp	r0, #1
 80089a2:	bf38      	it	cc
 80089a4:	2001      	movcc	r0, #1
 80089a6:	b510      	push	{r4, lr}
 80089a8:	4604      	mov	r4, r0
 80089aa:	4620      	mov	r0, r4
 80089ac:	f000 fa5a 	bl	8008e64 <malloc>
 80089b0:	b930      	cbnz	r0, 80089c0 <_Znwj+0x20>
 80089b2:	f000 f80d 	bl	80089d0 <_ZSt15get_new_handlerv>
 80089b6:	b908      	cbnz	r0, 80089bc <_Znwj+0x1c>
 80089b8:	f000 fa22 	bl	8008e00 <abort>
 80089bc:	4780      	blx	r0
 80089be:	e7f4      	b.n	80089aa <_Znwj+0xa>
 80089c0:	bd10      	pop	{r4, pc}

080089c2 <_ZSt17__throw_bad_allocv>:
 80089c2:	b508      	push	{r3, lr}
 80089c4:	f000 fa1c 	bl	8008e00 <abort>

080089c8 <_ZSt20__throw_length_errorPKc>:
 80089c8:	b508      	push	{r3, lr}
 80089ca:	f000 fa19 	bl	8008e00 <abort>
	...

080089d0 <_ZSt15get_new_handlerv>:
 80089d0:	4b02      	ldr	r3, [pc, #8]	; (80089dc <_ZSt15get_new_handlerv+0xc>)
 80089d2:	6818      	ldr	r0, [r3, #0]
 80089d4:	f3bf 8f5b 	dmb	ish
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	20000420 	.word	0x20000420

080089e0 <sqrt>:
 80089e0:	b538      	push	{r3, r4, r5, lr}
 80089e2:	ed2d 8b02 	vpush	{d8}
 80089e6:	ec55 4b10 	vmov	r4, r5, d0
 80089ea:	f000 f85f 	bl	8008aac <__ieee754_sqrt>
 80089ee:	4b15      	ldr	r3, [pc, #84]	; (8008a44 <sqrt+0x64>)
 80089f0:	eeb0 8a40 	vmov.f32	s16, s0
 80089f4:	eef0 8a60 	vmov.f32	s17, s1
 80089f8:	f993 3000 	ldrsb.w	r3, [r3]
 80089fc:	3301      	adds	r3, #1
 80089fe:	d019      	beq.n	8008a34 <sqrt+0x54>
 8008a00:	4622      	mov	r2, r4
 8008a02:	462b      	mov	r3, r5
 8008a04:	4620      	mov	r0, r4
 8008a06:	4629      	mov	r1, r5
 8008a08:	f7f8 f85c 	bl	8000ac4 <__aeabi_dcmpun>
 8008a0c:	b990      	cbnz	r0, 8008a34 <sqrt+0x54>
 8008a0e:	2200      	movs	r2, #0
 8008a10:	2300      	movs	r3, #0
 8008a12:	4620      	mov	r0, r4
 8008a14:	4629      	mov	r1, r5
 8008a16:	f7f8 f82d 	bl	8000a74 <__aeabi_dcmplt>
 8008a1a:	b158      	cbz	r0, 8008a34 <sqrt+0x54>
 8008a1c:	f000 f9f8 	bl	8008e10 <__errno>
 8008a20:	2321      	movs	r3, #33	; 0x21
 8008a22:	6003      	str	r3, [r0, #0]
 8008a24:	2200      	movs	r2, #0
 8008a26:	2300      	movs	r3, #0
 8008a28:	4610      	mov	r0, r2
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	f7f7 feda 	bl	80007e4 <__aeabi_ddiv>
 8008a30:	ec41 0b18 	vmov	d8, r0, r1
 8008a34:	eeb0 0a48 	vmov.f32	s0, s16
 8008a38:	eef0 0a68 	vmov.f32	s1, s17
 8008a3c:	ecbd 8b02 	vpop	{d8}
 8008a40:	bd38      	pop	{r3, r4, r5, pc}
 8008a42:	bf00      	nop
 8008a44:	20000010 	.word	0x20000010

08008a48 <asinf>:
 8008a48:	b508      	push	{r3, lr}
 8008a4a:	ed2d 8b02 	vpush	{d8}
 8008a4e:	eeb0 8a40 	vmov.f32	s16, s0
 8008a52:	f000 f8df 	bl	8008c14 <__ieee754_asinf>
 8008a56:	4b13      	ldr	r3, [pc, #76]	; (8008aa4 <asinf+0x5c>)
 8008a58:	f993 3000 	ldrsb.w	r3, [r3]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	eef0 8a40 	vmov.f32	s17, s0
 8008a62:	d01a      	beq.n	8008a9a <asinf+0x52>
 8008a64:	eeb4 8a48 	vcmp.f32	s16, s16
 8008a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a6c:	d615      	bvs.n	8008a9a <asinf+0x52>
 8008a6e:	eeb0 0a48 	vmov.f32	s0, s16
 8008a72:	f000 f9b8 	bl	8008de6 <fabsf>
 8008a76:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008a7a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a82:	dd0a      	ble.n	8008a9a <asinf+0x52>
 8008a84:	f000 f9c4 	bl	8008e10 <__errno>
 8008a88:	ecbd 8b02 	vpop	{d8}
 8008a8c:	2321      	movs	r3, #33	; 0x21
 8008a8e:	6003      	str	r3, [r0, #0]
 8008a90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008a94:	4804      	ldr	r0, [pc, #16]	; (8008aa8 <asinf+0x60>)
 8008a96:	f000 b9ad 	b.w	8008df4 <nanf>
 8008a9a:	eeb0 0a68 	vmov.f32	s0, s17
 8008a9e:	ecbd 8b02 	vpop	{d8}
 8008aa2:	bd08      	pop	{r3, pc}
 8008aa4:	20000010 	.word	0x20000010
 8008aa8:	0800913c 	.word	0x0800913c

08008aac <__ieee754_sqrt>:
 8008aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab0:	ec55 4b10 	vmov	r4, r5, d0
 8008ab4:	4e56      	ldr	r6, [pc, #344]	; (8008c10 <__ieee754_sqrt+0x164>)
 8008ab6:	43ae      	bics	r6, r5
 8008ab8:	ee10 0a10 	vmov	r0, s0
 8008abc:	ee10 3a10 	vmov	r3, s0
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	462a      	mov	r2, r5
 8008ac4:	d110      	bne.n	8008ae8 <__ieee754_sqrt+0x3c>
 8008ac6:	ee10 2a10 	vmov	r2, s0
 8008aca:	462b      	mov	r3, r5
 8008acc:	f7f7 fd60 	bl	8000590 <__aeabi_dmul>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	f7f7 fba4 	bl	8000224 <__adddf3>
 8008adc:	4604      	mov	r4, r0
 8008ade:	460d      	mov	r5, r1
 8008ae0:	ec45 4b10 	vmov	d0, r4, r5
 8008ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae8:	2d00      	cmp	r5, #0
 8008aea:	dc10      	bgt.n	8008b0e <__ieee754_sqrt+0x62>
 8008aec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008af0:	4330      	orrs	r0, r6
 8008af2:	d0f5      	beq.n	8008ae0 <__ieee754_sqrt+0x34>
 8008af4:	b15d      	cbz	r5, 8008b0e <__ieee754_sqrt+0x62>
 8008af6:	ee10 2a10 	vmov	r2, s0
 8008afa:	462b      	mov	r3, r5
 8008afc:	ee10 0a10 	vmov	r0, s0
 8008b00:	f7f7 fb8e 	bl	8000220 <__aeabi_dsub>
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	f7f7 fe6c 	bl	80007e4 <__aeabi_ddiv>
 8008b0c:	e7e6      	b.n	8008adc <__ieee754_sqrt+0x30>
 8008b0e:	1509      	asrs	r1, r1, #20
 8008b10:	d076      	beq.n	8008c00 <__ieee754_sqrt+0x154>
 8008b12:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008b16:	07ce      	lsls	r6, r1, #31
 8008b18:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8008b1c:	bf5e      	ittt	pl
 8008b1e:	0fda      	lsrpl	r2, r3, #31
 8008b20:	005b      	lslpl	r3, r3, #1
 8008b22:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8008b26:	0fda      	lsrs	r2, r3, #31
 8008b28:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8008b2c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8008b30:	2000      	movs	r0, #0
 8008b32:	106d      	asrs	r5, r5, #1
 8008b34:	005b      	lsls	r3, r3, #1
 8008b36:	f04f 0e16 	mov.w	lr, #22
 8008b3a:	4684      	mov	ip, r0
 8008b3c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008b40:	eb0c 0401 	add.w	r4, ip, r1
 8008b44:	4294      	cmp	r4, r2
 8008b46:	bfde      	ittt	le
 8008b48:	1b12      	suble	r2, r2, r4
 8008b4a:	eb04 0c01 	addle.w	ip, r4, r1
 8008b4e:	1840      	addle	r0, r0, r1
 8008b50:	0052      	lsls	r2, r2, #1
 8008b52:	f1be 0e01 	subs.w	lr, lr, #1
 8008b56:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008b5a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008b5e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008b62:	d1ed      	bne.n	8008b40 <__ieee754_sqrt+0x94>
 8008b64:	4671      	mov	r1, lr
 8008b66:	2720      	movs	r7, #32
 8008b68:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008b6c:	4562      	cmp	r2, ip
 8008b6e:	eb04 060e 	add.w	r6, r4, lr
 8008b72:	dc02      	bgt.n	8008b7a <__ieee754_sqrt+0xce>
 8008b74:	d113      	bne.n	8008b9e <__ieee754_sqrt+0xf2>
 8008b76:	429e      	cmp	r6, r3
 8008b78:	d811      	bhi.n	8008b9e <__ieee754_sqrt+0xf2>
 8008b7a:	2e00      	cmp	r6, #0
 8008b7c:	eb06 0e04 	add.w	lr, r6, r4
 8008b80:	da43      	bge.n	8008c0a <__ieee754_sqrt+0x15e>
 8008b82:	f1be 0f00 	cmp.w	lr, #0
 8008b86:	db40      	blt.n	8008c0a <__ieee754_sqrt+0x15e>
 8008b88:	f10c 0801 	add.w	r8, ip, #1
 8008b8c:	eba2 020c 	sub.w	r2, r2, ip
 8008b90:	429e      	cmp	r6, r3
 8008b92:	bf88      	it	hi
 8008b94:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008b98:	1b9b      	subs	r3, r3, r6
 8008b9a:	4421      	add	r1, r4
 8008b9c:	46c4      	mov	ip, r8
 8008b9e:	0052      	lsls	r2, r2, #1
 8008ba0:	3f01      	subs	r7, #1
 8008ba2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008ba6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008baa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008bae:	d1dd      	bne.n	8008b6c <__ieee754_sqrt+0xc0>
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	d006      	beq.n	8008bc2 <__ieee754_sqrt+0x116>
 8008bb4:	1c4c      	adds	r4, r1, #1
 8008bb6:	bf13      	iteet	ne
 8008bb8:	3101      	addne	r1, #1
 8008bba:	3001      	addeq	r0, #1
 8008bbc:	4639      	moveq	r1, r7
 8008bbe:	f021 0101 	bicne.w	r1, r1, #1
 8008bc2:	1043      	asrs	r3, r0, #1
 8008bc4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008bc8:	0849      	lsrs	r1, r1, #1
 8008bca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008bce:	07c2      	lsls	r2, r0, #31
 8008bd0:	bf48      	it	mi
 8008bd2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008bd6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8008bda:	460c      	mov	r4, r1
 8008bdc:	463d      	mov	r5, r7
 8008bde:	e77f      	b.n	8008ae0 <__ieee754_sqrt+0x34>
 8008be0:	0ada      	lsrs	r2, r3, #11
 8008be2:	3815      	subs	r0, #21
 8008be4:	055b      	lsls	r3, r3, #21
 8008be6:	2a00      	cmp	r2, #0
 8008be8:	d0fa      	beq.n	8008be0 <__ieee754_sqrt+0x134>
 8008bea:	02d7      	lsls	r7, r2, #11
 8008bec:	d50a      	bpl.n	8008c04 <__ieee754_sqrt+0x158>
 8008bee:	f1c1 0420 	rsb	r4, r1, #32
 8008bf2:	fa23 f404 	lsr.w	r4, r3, r4
 8008bf6:	1e4d      	subs	r5, r1, #1
 8008bf8:	408b      	lsls	r3, r1
 8008bfa:	4322      	orrs	r2, r4
 8008bfc:	1b41      	subs	r1, r0, r5
 8008bfe:	e788      	b.n	8008b12 <__ieee754_sqrt+0x66>
 8008c00:	4608      	mov	r0, r1
 8008c02:	e7f0      	b.n	8008be6 <__ieee754_sqrt+0x13a>
 8008c04:	0052      	lsls	r2, r2, #1
 8008c06:	3101      	adds	r1, #1
 8008c08:	e7ef      	b.n	8008bea <__ieee754_sqrt+0x13e>
 8008c0a:	46e0      	mov	r8, ip
 8008c0c:	e7be      	b.n	8008b8c <__ieee754_sqrt+0xe0>
 8008c0e:	bf00      	nop
 8008c10:	7ff00000 	.word	0x7ff00000

08008c14 <__ieee754_asinf>:
 8008c14:	b538      	push	{r3, r4, r5, lr}
 8008c16:	ee10 5a10 	vmov	r5, s0
 8008c1a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008c1e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8008c22:	ed2d 8b04 	vpush	{d8-d9}
 8008c26:	d10c      	bne.n	8008c42 <__ieee754_asinf+0x2e>
 8008c28:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8008da0 <__ieee754_asinf+0x18c>
 8008c2c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8008da4 <__ieee754_asinf+0x190>
 8008c30:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008c34:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008c38:	eeb0 0a67 	vmov.f32	s0, s15
 8008c3c:	ecbd 8b04 	vpop	{d8-d9}
 8008c40:	bd38      	pop	{r3, r4, r5, pc}
 8008c42:	dd04      	ble.n	8008c4e <__ieee754_asinf+0x3a>
 8008c44:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008c48:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8008c4c:	e7f6      	b.n	8008c3c <__ieee754_asinf+0x28>
 8008c4e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8008c52:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8008c56:	da0b      	bge.n	8008c70 <__ieee754_asinf+0x5c>
 8008c58:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8008c5c:	da52      	bge.n	8008d04 <__ieee754_asinf+0xf0>
 8008c5e:	eddf 7a52 	vldr	s15, [pc, #328]	; 8008da8 <__ieee754_asinf+0x194>
 8008c62:	ee70 7a27 	vadd.f32	s15, s0, s15
 8008c66:	eef4 7ae8 	vcmpe.f32	s15, s17
 8008c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c6e:	dce5      	bgt.n	8008c3c <__ieee754_asinf+0x28>
 8008c70:	f000 f8b9 	bl	8008de6 <fabsf>
 8008c74:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8008c78:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8008c7c:	ee20 8a08 	vmul.f32	s16, s0, s16
 8008c80:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8008dac <__ieee754_asinf+0x198>
 8008c84:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8008db0 <__ieee754_asinf+0x19c>
 8008c88:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8008db4 <__ieee754_asinf+0x1a0>
 8008c8c:	eea8 7a27 	vfma.f32	s14, s16, s15
 8008c90:	eddf 7a49 	vldr	s15, [pc, #292]	; 8008db8 <__ieee754_asinf+0x1a4>
 8008c94:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008c98:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8008dbc <__ieee754_asinf+0x1a8>
 8008c9c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8008ca0:	eddf 7a47 	vldr	s15, [pc, #284]	; 8008dc0 <__ieee754_asinf+0x1ac>
 8008ca4:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008ca8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8008dc4 <__ieee754_asinf+0x1b0>
 8008cac:	eea7 9a88 	vfma.f32	s18, s15, s16
 8008cb0:	eddf 7a45 	vldr	s15, [pc, #276]	; 8008dc8 <__ieee754_asinf+0x1b4>
 8008cb4:	eee8 7a07 	vfma.f32	s15, s16, s14
 8008cb8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8008dcc <__ieee754_asinf+0x1b8>
 8008cbc:	eea7 7a88 	vfma.f32	s14, s15, s16
 8008cc0:	eddf 7a43 	vldr	s15, [pc, #268]	; 8008dd0 <__ieee754_asinf+0x1bc>
 8008cc4:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008cc8:	eeb0 0a48 	vmov.f32	s0, s16
 8008ccc:	eee7 8a88 	vfma.f32	s17, s15, s16
 8008cd0:	f000 f886 	bl	8008de0 <__ieee754_sqrtf>
 8008cd4:	4b3f      	ldr	r3, [pc, #252]	; (8008dd4 <__ieee754_asinf+0x1c0>)
 8008cd6:	ee29 9a08 	vmul.f32	s18, s18, s16
 8008cda:	429c      	cmp	r4, r3
 8008cdc:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8008ce0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008ce4:	dd3d      	ble.n	8008d62 <__ieee754_asinf+0x14e>
 8008ce6:	eea0 0a06 	vfma.f32	s0, s0, s12
 8008cea:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8008dd8 <__ieee754_asinf+0x1c4>
 8008cee:	eee0 7a26 	vfma.f32	s15, s0, s13
 8008cf2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8008da4 <__ieee754_asinf+0x190>
 8008cf6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008cfa:	2d00      	cmp	r5, #0
 8008cfc:	bfd8      	it	le
 8008cfe:	eeb1 0a40 	vnegle.f32	s0, s0
 8008d02:	e79b      	b.n	8008c3c <__ieee754_asinf+0x28>
 8008d04:	ee60 7a00 	vmul.f32	s15, s0, s0
 8008d08:	eddf 6a28 	vldr	s13, [pc, #160]	; 8008dac <__ieee754_asinf+0x198>
 8008d0c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8008db0 <__ieee754_asinf+0x19c>
 8008d10:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8008dc4 <__ieee754_asinf+0x1b0>
 8008d14:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8008d18:	eddf 6a27 	vldr	s13, [pc, #156]	; 8008db8 <__ieee754_asinf+0x1a4>
 8008d1c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008d20:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8008dbc <__ieee754_asinf+0x1a8>
 8008d24:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008d28:	eddf 6a25 	vldr	s13, [pc, #148]	; 8008dc0 <__ieee754_asinf+0x1ac>
 8008d2c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008d30:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8008db4 <__ieee754_asinf+0x1a0>
 8008d34:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008d38:	eddf 6a23 	vldr	s13, [pc, #140]	; 8008dc8 <__ieee754_asinf+0x1b4>
 8008d3c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8008d40:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8008dcc <__ieee754_asinf+0x1b8>
 8008d44:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8008d48:	eddf 6a21 	vldr	s13, [pc, #132]	; 8008dd0 <__ieee754_asinf+0x1bc>
 8008d4c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008d50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008d54:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8008d58:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8008d5c:	eea0 0a27 	vfma.f32	s0, s0, s15
 8008d60:	e76c      	b.n	8008c3c <__ieee754_asinf+0x28>
 8008d62:	ee10 3a10 	vmov	r3, s0
 8008d66:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008d6a:	f023 030f 	bic.w	r3, r3, #15
 8008d6e:	ee07 3a10 	vmov	s14, r3
 8008d72:	eea7 8a47 	vfms.f32	s16, s14, s14
 8008d76:	ee70 7a07 	vadd.f32	s15, s0, s14
 8008d7a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008d7e:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8008d82:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008da0 <__ieee754_asinf+0x18c>
 8008d86:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8008d8a:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8008d8e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8008ddc <__ieee754_asinf+0x1c8>
 8008d92:	eeb0 6a40 	vmov.f32	s12, s0
 8008d96:	eea7 6a66 	vfms.f32	s12, s14, s13
 8008d9a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008d9e:	e7aa      	b.n	8008cf6 <__ieee754_asinf+0xe2>
 8008da0:	b33bbd2e 	.word	0xb33bbd2e
 8008da4:	3fc90fdb 	.word	0x3fc90fdb
 8008da8:	7149f2ca 	.word	0x7149f2ca
 8008dac:	3811ef08 	.word	0x3811ef08
 8008db0:	3a4f7f04 	.word	0x3a4f7f04
 8008db4:	3e2aaaab 	.word	0x3e2aaaab
 8008db8:	bd241146 	.word	0xbd241146
 8008dbc:	3e4e0aa8 	.word	0x3e4e0aa8
 8008dc0:	bea6b090 	.word	0xbea6b090
 8008dc4:	3d9dc62e 	.word	0x3d9dc62e
 8008dc8:	bf303361 	.word	0xbf303361
 8008dcc:	4001572d 	.word	0x4001572d
 8008dd0:	c019d139 	.word	0xc019d139
 8008dd4:	3f799999 	.word	0x3f799999
 8008dd8:	333bbd2e 	.word	0x333bbd2e
 8008ddc:	3f490fdb 	.word	0x3f490fdb

08008de0 <__ieee754_sqrtf>:
 8008de0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008de4:	4770      	bx	lr

08008de6 <fabsf>:
 8008de6:	ee10 3a10 	vmov	r3, s0
 8008dea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008dee:	ee00 3a10 	vmov	s0, r3
 8008df2:	4770      	bx	lr

08008df4 <nanf>:
 8008df4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008dfc <nanf+0x8>
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	7fc00000 	.word	0x7fc00000

08008e00 <abort>:
 8008e00:	b508      	push	{r3, lr}
 8008e02:	2006      	movs	r0, #6
 8008e04:	f000 f942 	bl	800908c <raise>
 8008e08:	2001      	movs	r0, #1
 8008e0a:	f7fd f953 	bl	80060b4 <_exit>
	...

08008e10 <__errno>:
 8008e10:	4b01      	ldr	r3, [pc, #4]	; (8008e18 <__errno+0x8>)
 8008e12:	6818      	ldr	r0, [r3, #0]
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	20000014 	.word	0x20000014

08008e1c <__libc_init_array>:
 8008e1c:	b570      	push	{r4, r5, r6, lr}
 8008e1e:	4d0d      	ldr	r5, [pc, #52]	; (8008e54 <__libc_init_array+0x38>)
 8008e20:	4c0d      	ldr	r4, [pc, #52]	; (8008e58 <__libc_init_array+0x3c>)
 8008e22:	1b64      	subs	r4, r4, r5
 8008e24:	10a4      	asrs	r4, r4, #2
 8008e26:	2600      	movs	r6, #0
 8008e28:	42a6      	cmp	r6, r4
 8008e2a:	d109      	bne.n	8008e40 <__libc_init_array+0x24>
 8008e2c:	4d0b      	ldr	r5, [pc, #44]	; (8008e5c <__libc_init_array+0x40>)
 8008e2e:	4c0c      	ldr	r4, [pc, #48]	; (8008e60 <__libc_init_array+0x44>)
 8008e30:	f000 f956 	bl	80090e0 <_init>
 8008e34:	1b64      	subs	r4, r4, r5
 8008e36:	10a4      	asrs	r4, r4, #2
 8008e38:	2600      	movs	r6, #0
 8008e3a:	42a6      	cmp	r6, r4
 8008e3c:	d105      	bne.n	8008e4a <__libc_init_array+0x2e>
 8008e3e:	bd70      	pop	{r4, r5, r6, pc}
 8008e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e44:	4798      	blx	r3
 8008e46:	3601      	adds	r6, #1
 8008e48:	e7ee      	b.n	8008e28 <__libc_init_array+0xc>
 8008e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e4e:	4798      	blx	r3
 8008e50:	3601      	adds	r6, #1
 8008e52:	e7f2      	b.n	8008e3a <__libc_init_array+0x1e>
 8008e54:	08009140 	.word	0x08009140
 8008e58:	08009140 	.word	0x08009140
 8008e5c:	08009140 	.word	0x08009140
 8008e60:	08009148 	.word	0x08009148

08008e64 <malloc>:
 8008e64:	4b02      	ldr	r3, [pc, #8]	; (8008e70 <malloc+0xc>)
 8008e66:	4601      	mov	r1, r0
 8008e68:	6818      	ldr	r0, [r3, #0]
 8008e6a:	f000 b87d 	b.w	8008f68 <_malloc_r>
 8008e6e:	bf00      	nop
 8008e70:	20000014 	.word	0x20000014

08008e74 <free>:
 8008e74:	4b02      	ldr	r3, [pc, #8]	; (8008e80 <free+0xc>)
 8008e76:	4601      	mov	r1, r0
 8008e78:	6818      	ldr	r0, [r3, #0]
 8008e7a:	f000 b825 	b.w	8008ec8 <_free_r>
 8008e7e:	bf00      	nop
 8008e80:	20000014 	.word	0x20000014

08008e84 <memmove>:
 8008e84:	4288      	cmp	r0, r1
 8008e86:	b510      	push	{r4, lr}
 8008e88:	eb01 0402 	add.w	r4, r1, r2
 8008e8c:	d902      	bls.n	8008e94 <memmove+0x10>
 8008e8e:	4284      	cmp	r4, r0
 8008e90:	4623      	mov	r3, r4
 8008e92:	d807      	bhi.n	8008ea4 <memmove+0x20>
 8008e94:	1e43      	subs	r3, r0, #1
 8008e96:	42a1      	cmp	r1, r4
 8008e98:	d008      	beq.n	8008eac <memmove+0x28>
 8008e9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ea2:	e7f8      	b.n	8008e96 <memmove+0x12>
 8008ea4:	4402      	add	r2, r0
 8008ea6:	4601      	mov	r1, r0
 8008ea8:	428a      	cmp	r2, r1
 8008eaa:	d100      	bne.n	8008eae <memmove+0x2a>
 8008eac:	bd10      	pop	{r4, pc}
 8008eae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008eb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008eb6:	e7f7      	b.n	8008ea8 <memmove+0x24>

08008eb8 <memset>:
 8008eb8:	4402      	add	r2, r0
 8008eba:	4603      	mov	r3, r0
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d100      	bne.n	8008ec2 <memset+0xa>
 8008ec0:	4770      	bx	lr
 8008ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ec6:	e7f9      	b.n	8008ebc <memset+0x4>

08008ec8 <_free_r>:
 8008ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eca:	2900      	cmp	r1, #0
 8008ecc:	d048      	beq.n	8008f60 <_free_r+0x98>
 8008ece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ed2:	9001      	str	r0, [sp, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f1a1 0404 	sub.w	r4, r1, #4
 8008eda:	bfb8      	it	lt
 8008edc:	18e4      	addlt	r4, r4, r3
 8008ede:	f000 f8f1 	bl	80090c4 <__malloc_lock>
 8008ee2:	4a20      	ldr	r2, [pc, #128]	; (8008f64 <_free_r+0x9c>)
 8008ee4:	9801      	ldr	r0, [sp, #4]
 8008ee6:	6813      	ldr	r3, [r2, #0]
 8008ee8:	4615      	mov	r5, r2
 8008eea:	b933      	cbnz	r3, 8008efa <_free_r+0x32>
 8008eec:	6063      	str	r3, [r4, #4]
 8008eee:	6014      	str	r4, [r2, #0]
 8008ef0:	b003      	add	sp, #12
 8008ef2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ef6:	f000 b8eb 	b.w	80090d0 <__malloc_unlock>
 8008efa:	42a3      	cmp	r3, r4
 8008efc:	d90b      	bls.n	8008f16 <_free_r+0x4e>
 8008efe:	6821      	ldr	r1, [r4, #0]
 8008f00:	1862      	adds	r2, r4, r1
 8008f02:	4293      	cmp	r3, r2
 8008f04:	bf04      	itt	eq
 8008f06:	681a      	ldreq	r2, [r3, #0]
 8008f08:	685b      	ldreq	r3, [r3, #4]
 8008f0a:	6063      	str	r3, [r4, #4]
 8008f0c:	bf04      	itt	eq
 8008f0e:	1852      	addeq	r2, r2, r1
 8008f10:	6022      	streq	r2, [r4, #0]
 8008f12:	602c      	str	r4, [r5, #0]
 8008f14:	e7ec      	b.n	8008ef0 <_free_r+0x28>
 8008f16:	461a      	mov	r2, r3
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	b10b      	cbz	r3, 8008f20 <_free_r+0x58>
 8008f1c:	42a3      	cmp	r3, r4
 8008f1e:	d9fa      	bls.n	8008f16 <_free_r+0x4e>
 8008f20:	6811      	ldr	r1, [r2, #0]
 8008f22:	1855      	adds	r5, r2, r1
 8008f24:	42a5      	cmp	r5, r4
 8008f26:	d10b      	bne.n	8008f40 <_free_r+0x78>
 8008f28:	6824      	ldr	r4, [r4, #0]
 8008f2a:	4421      	add	r1, r4
 8008f2c:	1854      	adds	r4, r2, r1
 8008f2e:	42a3      	cmp	r3, r4
 8008f30:	6011      	str	r1, [r2, #0]
 8008f32:	d1dd      	bne.n	8008ef0 <_free_r+0x28>
 8008f34:	681c      	ldr	r4, [r3, #0]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	6053      	str	r3, [r2, #4]
 8008f3a:	4421      	add	r1, r4
 8008f3c:	6011      	str	r1, [r2, #0]
 8008f3e:	e7d7      	b.n	8008ef0 <_free_r+0x28>
 8008f40:	d902      	bls.n	8008f48 <_free_r+0x80>
 8008f42:	230c      	movs	r3, #12
 8008f44:	6003      	str	r3, [r0, #0]
 8008f46:	e7d3      	b.n	8008ef0 <_free_r+0x28>
 8008f48:	6825      	ldr	r5, [r4, #0]
 8008f4a:	1961      	adds	r1, r4, r5
 8008f4c:	428b      	cmp	r3, r1
 8008f4e:	bf04      	itt	eq
 8008f50:	6819      	ldreq	r1, [r3, #0]
 8008f52:	685b      	ldreq	r3, [r3, #4]
 8008f54:	6063      	str	r3, [r4, #4]
 8008f56:	bf04      	itt	eq
 8008f58:	1949      	addeq	r1, r1, r5
 8008f5a:	6021      	streq	r1, [r4, #0]
 8008f5c:	6054      	str	r4, [r2, #4]
 8008f5e:	e7c7      	b.n	8008ef0 <_free_r+0x28>
 8008f60:	b003      	add	sp, #12
 8008f62:	bd30      	pop	{r4, r5, pc}
 8008f64:	20000424 	.word	0x20000424

08008f68 <_malloc_r>:
 8008f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6a:	1ccd      	adds	r5, r1, #3
 8008f6c:	f025 0503 	bic.w	r5, r5, #3
 8008f70:	3508      	adds	r5, #8
 8008f72:	2d0c      	cmp	r5, #12
 8008f74:	bf38      	it	cc
 8008f76:	250c      	movcc	r5, #12
 8008f78:	2d00      	cmp	r5, #0
 8008f7a:	4606      	mov	r6, r0
 8008f7c:	db01      	blt.n	8008f82 <_malloc_r+0x1a>
 8008f7e:	42a9      	cmp	r1, r5
 8008f80:	d903      	bls.n	8008f8a <_malloc_r+0x22>
 8008f82:	230c      	movs	r3, #12
 8008f84:	6033      	str	r3, [r6, #0]
 8008f86:	2000      	movs	r0, #0
 8008f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f8a:	f000 f89b 	bl	80090c4 <__malloc_lock>
 8008f8e:	4921      	ldr	r1, [pc, #132]	; (8009014 <_malloc_r+0xac>)
 8008f90:	680a      	ldr	r2, [r1, #0]
 8008f92:	4614      	mov	r4, r2
 8008f94:	b99c      	cbnz	r4, 8008fbe <_malloc_r+0x56>
 8008f96:	4f20      	ldr	r7, [pc, #128]	; (8009018 <_malloc_r+0xb0>)
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	b923      	cbnz	r3, 8008fa6 <_malloc_r+0x3e>
 8008f9c:	4621      	mov	r1, r4
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f000 f83c 	bl	800901c <_sbrk_r>
 8008fa4:	6038      	str	r0, [r7, #0]
 8008fa6:	4629      	mov	r1, r5
 8008fa8:	4630      	mov	r0, r6
 8008faa:	f000 f837 	bl	800901c <_sbrk_r>
 8008fae:	1c43      	adds	r3, r0, #1
 8008fb0:	d123      	bne.n	8008ffa <_malloc_r+0x92>
 8008fb2:	230c      	movs	r3, #12
 8008fb4:	6033      	str	r3, [r6, #0]
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	f000 f88a 	bl	80090d0 <__malloc_unlock>
 8008fbc:	e7e3      	b.n	8008f86 <_malloc_r+0x1e>
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	1b5b      	subs	r3, r3, r5
 8008fc2:	d417      	bmi.n	8008ff4 <_malloc_r+0x8c>
 8008fc4:	2b0b      	cmp	r3, #11
 8008fc6:	d903      	bls.n	8008fd0 <_malloc_r+0x68>
 8008fc8:	6023      	str	r3, [r4, #0]
 8008fca:	441c      	add	r4, r3
 8008fcc:	6025      	str	r5, [r4, #0]
 8008fce:	e004      	b.n	8008fda <_malloc_r+0x72>
 8008fd0:	6863      	ldr	r3, [r4, #4]
 8008fd2:	42a2      	cmp	r2, r4
 8008fd4:	bf0c      	ite	eq
 8008fd6:	600b      	streq	r3, [r1, #0]
 8008fd8:	6053      	strne	r3, [r2, #4]
 8008fda:	4630      	mov	r0, r6
 8008fdc:	f000 f878 	bl	80090d0 <__malloc_unlock>
 8008fe0:	f104 000b 	add.w	r0, r4, #11
 8008fe4:	1d23      	adds	r3, r4, #4
 8008fe6:	f020 0007 	bic.w	r0, r0, #7
 8008fea:	1ac2      	subs	r2, r0, r3
 8008fec:	d0cc      	beq.n	8008f88 <_malloc_r+0x20>
 8008fee:	1a1b      	subs	r3, r3, r0
 8008ff0:	50a3      	str	r3, [r4, r2]
 8008ff2:	e7c9      	b.n	8008f88 <_malloc_r+0x20>
 8008ff4:	4622      	mov	r2, r4
 8008ff6:	6864      	ldr	r4, [r4, #4]
 8008ff8:	e7cc      	b.n	8008f94 <_malloc_r+0x2c>
 8008ffa:	1cc4      	adds	r4, r0, #3
 8008ffc:	f024 0403 	bic.w	r4, r4, #3
 8009000:	42a0      	cmp	r0, r4
 8009002:	d0e3      	beq.n	8008fcc <_malloc_r+0x64>
 8009004:	1a21      	subs	r1, r4, r0
 8009006:	4630      	mov	r0, r6
 8009008:	f000 f808 	bl	800901c <_sbrk_r>
 800900c:	3001      	adds	r0, #1
 800900e:	d1dd      	bne.n	8008fcc <_malloc_r+0x64>
 8009010:	e7cf      	b.n	8008fb2 <_malloc_r+0x4a>
 8009012:	bf00      	nop
 8009014:	20000424 	.word	0x20000424
 8009018:	20000428 	.word	0x20000428

0800901c <_sbrk_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	4d06      	ldr	r5, [pc, #24]	; (8009038 <_sbrk_r+0x1c>)
 8009020:	2300      	movs	r3, #0
 8009022:	4604      	mov	r4, r0
 8009024:	4608      	mov	r0, r1
 8009026:	602b      	str	r3, [r5, #0]
 8009028:	f7fd f84e 	bl	80060c8 <_sbrk>
 800902c:	1c43      	adds	r3, r0, #1
 800902e:	d102      	bne.n	8009036 <_sbrk_r+0x1a>
 8009030:	682b      	ldr	r3, [r5, #0]
 8009032:	b103      	cbz	r3, 8009036 <_sbrk_r+0x1a>
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	bd38      	pop	{r3, r4, r5, pc}
 8009038:	20000430 	.word	0x20000430

0800903c <_raise_r>:
 800903c:	291f      	cmp	r1, #31
 800903e:	b538      	push	{r3, r4, r5, lr}
 8009040:	4604      	mov	r4, r0
 8009042:	460d      	mov	r5, r1
 8009044:	d904      	bls.n	8009050 <_raise_r+0x14>
 8009046:	2316      	movs	r3, #22
 8009048:	6003      	str	r3, [r0, #0]
 800904a:	f04f 30ff 	mov.w	r0, #4294967295
 800904e:	bd38      	pop	{r3, r4, r5, pc}
 8009050:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009052:	b112      	cbz	r2, 800905a <_raise_r+0x1e>
 8009054:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009058:	b94b      	cbnz	r3, 800906e <_raise_r+0x32>
 800905a:	4620      	mov	r0, r4
 800905c:	f000 f830 	bl	80090c0 <_getpid_r>
 8009060:	462a      	mov	r2, r5
 8009062:	4601      	mov	r1, r0
 8009064:	4620      	mov	r0, r4
 8009066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800906a:	f000 b817 	b.w	800909c <_kill_r>
 800906e:	2b01      	cmp	r3, #1
 8009070:	d00a      	beq.n	8009088 <_raise_r+0x4c>
 8009072:	1c59      	adds	r1, r3, #1
 8009074:	d103      	bne.n	800907e <_raise_r+0x42>
 8009076:	2316      	movs	r3, #22
 8009078:	6003      	str	r3, [r0, #0]
 800907a:	2001      	movs	r0, #1
 800907c:	e7e7      	b.n	800904e <_raise_r+0x12>
 800907e:	2400      	movs	r4, #0
 8009080:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009084:	4628      	mov	r0, r5
 8009086:	4798      	blx	r3
 8009088:	2000      	movs	r0, #0
 800908a:	e7e0      	b.n	800904e <_raise_r+0x12>

0800908c <raise>:
 800908c:	4b02      	ldr	r3, [pc, #8]	; (8009098 <raise+0xc>)
 800908e:	4601      	mov	r1, r0
 8009090:	6818      	ldr	r0, [r3, #0]
 8009092:	f7ff bfd3 	b.w	800903c <_raise_r>
 8009096:	bf00      	nop
 8009098:	20000014 	.word	0x20000014

0800909c <_kill_r>:
 800909c:	b538      	push	{r3, r4, r5, lr}
 800909e:	4d07      	ldr	r5, [pc, #28]	; (80090bc <_kill_r+0x20>)
 80090a0:	2300      	movs	r3, #0
 80090a2:	4604      	mov	r4, r0
 80090a4:	4608      	mov	r0, r1
 80090a6:	4611      	mov	r1, r2
 80090a8:	602b      	str	r3, [r5, #0]
 80090aa:	f7fc fff3 	bl	8006094 <_kill>
 80090ae:	1c43      	adds	r3, r0, #1
 80090b0:	d102      	bne.n	80090b8 <_kill_r+0x1c>
 80090b2:	682b      	ldr	r3, [r5, #0]
 80090b4:	b103      	cbz	r3, 80090b8 <_kill_r+0x1c>
 80090b6:	6023      	str	r3, [r4, #0]
 80090b8:	bd38      	pop	{r3, r4, r5, pc}
 80090ba:	bf00      	nop
 80090bc:	20000430 	.word	0x20000430

080090c0 <_getpid_r>:
 80090c0:	f7fc bfe0 	b.w	8006084 <_getpid>

080090c4 <__malloc_lock>:
 80090c4:	4801      	ldr	r0, [pc, #4]	; (80090cc <__malloc_lock+0x8>)
 80090c6:	f000 b809 	b.w	80090dc <__retarget_lock_acquire_recursive>
 80090ca:	bf00      	nop
 80090cc:	20000438 	.word	0x20000438

080090d0 <__malloc_unlock>:
 80090d0:	4801      	ldr	r0, [pc, #4]	; (80090d8 <__malloc_unlock+0x8>)
 80090d2:	f000 b804 	b.w	80090de <__retarget_lock_release_recursive>
 80090d6:	bf00      	nop
 80090d8:	20000438 	.word	0x20000438

080090dc <__retarget_lock_acquire_recursive>:
 80090dc:	4770      	bx	lr

080090de <__retarget_lock_release_recursive>:
 80090de:	4770      	bx	lr

080090e0 <_init>:
 80090e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e2:	bf00      	nop
 80090e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090e6:	bc08      	pop	{r3}
 80090e8:	469e      	mov	lr, r3
 80090ea:	4770      	bx	lr

080090ec <_fini>:
 80090ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ee:	bf00      	nop
 80090f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090f2:	bc08      	pop	{r3}
 80090f4:	469e      	mov	lr, r3
 80090f6:	4770      	bx	lr
